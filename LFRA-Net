{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 5293,
     "status": "ok",
     "timestamp": 1725042119290,
     "user": {
      "displayName": "mehwish mehmood",
      "userId": "03028843311539350970"
     },
     "user_tz": -300
    },
    "id": "pghZrtcZNNWn",
    "outputId": "902a3fd2-a3a8-4213-c40a-9f3f591c763b"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:From /tmp/ipykernel_3913053/897549616.py:2: is_gpu_available (from tensorflow.python.framework.test_util) is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Use `tf.config.list_physical_devices('GPU')` instead.\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import tensorflow as tf\n",
    "tf.test.is_gpu_available(\n",
    "    cuda_only=False, min_cuda_compute_capability=None\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 3922,
     "status": "ok",
     "timestamp": 1725042123206,
     "user": {
      "displayName": "mehwish mehmood",
      "userId": "03028843311539350970"
     },
     "user_tz": -300
    },
    "id": "02j5H1VjF4VM",
    "outputId": "9ef7cb8e-0507-4ba4-b16e-6599ecc7722a"
   },
   "outputs": [],
   "source": [
    "# import zipfile\n",
    "\n",
    "# filename = \"/homes/imransharif/Mehwish/Dataset/Combined_dataset.zip\"\n",
    "\n",
    "# with zipfile.ZipFile(filename, 'r') as zip_ref:\n",
    "#     zip_ref.extractall()\n",
    "#     print('Done')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 24156,
     "status": "ok",
     "timestamp": 1725042147347,
     "user": {
      "displayName": "mehwish mehmood",
      "userId": "03028843311539350970"
     },
     "user_tz": -300
    },
    "id": "x0Mh8O8Idis-",
    "outputId": "e0d6864c-d6b6-42a9-a2e7-4ae7f7251116"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/software/software/Python/3.10.4-GCCcore-11.3.0/lib/python3.10/pty.py:89: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.\n",
      "  pid, fd = os.forkpty()\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Defaulting to user installation because normal site-packages is not writeable\n",
      "\u001b[33mWARNING: Ignoring invalid distribution -andas (/homes/imransharif/.local/lib/python3.10/site-packages)\u001b[0m\u001b[33m\n",
      "\u001b[0m\u001b[33mWARNING: Ignoring invalid distribution -ensorflow (/homes/imransharif/.local/lib/python3.10/site-packages)\u001b[0m\u001b[33m\n",
      "\u001b[0m\u001b[33mWARNING: Ignoring invalid distribution -andas (/homes/imransharif/.local/lib/python3.10/site-packages)\u001b[0m\u001b[33m\n",
      "\u001b[0m\u001b[33mWARNING: Ignoring invalid distribution -ensorflow (/homes/imransharif/.local/lib/python3.10/site-packages)\u001b[0m\u001b[33m\n",
      "\u001b[0mRequirement already satisfied: keras-preprocessing in /homes/imransharif/.local/lib/python3.10/site-packages (1.1.2)\n",
      "Requirement already satisfied: numpy>=1.9.1 in /opt/software/software/SciPy-bundle/2022.05-foss-2022a/lib/python3.10/site-packages (from keras-preprocessing) (1.22.3)\n",
      "Requirement already satisfied: six>=1.9.0 in /homes/imransharif/.local/lib/python3.10/site-packages (from keras-preprocessing) (1.16.0)\n",
      "\u001b[33mWARNING: Ignoring invalid distribution -andas (/homes/imransharif/.local/lib/python3.10/site-packages)\u001b[0m\u001b[33m\n",
      "\u001b[0m\u001b[33mWARNING: Ignoring invalid distribution -ensorflow (/homes/imransharif/.local/lib/python3.10/site-packages)\u001b[0m\u001b[33m\n",
      "\u001b[0m\u001b[33mWARNING: Ignoring invalid distribution -andas (/homes/imransharif/.local/lib/python3.10/site-packages)\u001b[0m\u001b[33m\n",
      "\u001b[0m\u001b[33mWARNING: Ignoring invalid distribution -ensorflow (/homes/imransharif/.local/lib/python3.10/site-packages)\u001b[0m\u001b[33m\n",
      "\u001b[0mDefaulting to user installation because normal site-packages is not writeable\n",
      "\u001b[33mWARNING: Ignoring invalid distribution -andas (/homes/imransharif/.local/lib/python3.10/site-packages)\u001b[0m\u001b[33m\n",
      "\u001b[0m\u001b[33mWARNING: Ignoring invalid distribution -ensorflow (/homes/imransharif/.local/lib/python3.10/site-packages)\u001b[0m\u001b[33m\n",
      "\u001b[0m\u001b[33mWARNING: Ignoring invalid distribution -andas (/homes/imransharif/.local/lib/python3.10/site-packages)\u001b[0m\u001b[33m\n",
      "\u001b[0m\u001b[33mWARNING: Ignoring invalid distribution -ensorflow (/homes/imransharif/.local/lib/python3.10/site-packages)\u001b[0m\u001b[33m\n",
      "\u001b[0mRequirement already satisfied: scikit-image in /homes/imransharif/.local/lib/python3.10/site-packages (0.23.2)\n",
      "Collecting numpy>=1.23 (from scikit-image)\n",
      "  Using cached numpy-2.1.3-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (62 kB)\n",
      "Collecting scipy>=1.9 (from scikit-image)\n",
      "  Using cached scipy-1.14.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (60 kB)\n",
      "Requirement already satisfied: networkx>=2.8 in /opt/software/software/networkx/2.8.4-foss-2022a/lib/python3.10/site-packages (from scikit-image) (2.8.4)\n",
      "Requirement already satisfied: pillow>=9.1 in /opt/software/software/Pillow/9.1.1-GCCcore-11.3.0/lib/python3.10/site-packages (from scikit-image) (9.1.1)\n",
      "Requirement already satisfied: imageio>=2.33 in /homes/imransharif/.local/lib/python3.10/site-packages (from scikit-image) (2.34.1)\n",
      "Requirement already satisfied: tifffile>=2022.8.12 in /homes/imransharif/.local/lib/python3.10/site-packages (from scikit-image) (2024.4.24)\n",
      "Requirement already satisfied: packaging>=21 in /homes/imransharif/.local/lib/python3.10/site-packages (from scikit-image) (21.3)\n",
      "Requirement already satisfied: lazy-loader>=0.4 in /homes/imransharif/.local/lib/python3.10/site-packages (from scikit-image) (0.4)\n",
      "Requirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /homes/imransharif/.local/lib/python3.10/site-packages (from packaging>=21->scikit-image) (3.0.9)\n",
      "Using cached numpy-2.1.3-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (16.3 MB)\n",
      "Using cached scipy-1.14.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (41.2 MB)\n",
      "\u001b[33mWARNING: Ignoring invalid distribution -andas (/homes/imransharif/.local/lib/python3.10/site-packages)\u001b[0m\u001b[33m\n",
      "\u001b[0m\u001b[33mWARNING: Ignoring invalid distribution -ensorflow (/homes/imransharif/.local/lib/python3.10/site-packages)\u001b[0m\u001b[33m\n",
      "\u001b[0mInstalling collected packages: numpy, scipy\n",
      "\u001b[33m  WARNING: The scripts f2py and numpy-config are installed in '/homes/imransharif/.local/bin' which is not on PATH.\n",
      "  Consider adding this directory to PATH or, if you prefer to suppress this warning, use --no-warn-script-location.\u001b[0m\u001b[33m\n",
      "\u001b[0m\u001b[33mWARNING: Ignoring invalid distribution -andas (/homes/imransharif/.local/lib/python3.10/site-packages)\u001b[0m\u001b[33m\n",
      "\u001b[0m\u001b[33mWARNING: Ignoring invalid distribution -ensorflow (/homes/imransharif/.local/lib/python3.10/site-packages)\u001b[0m\u001b[33m\n",
      "\u001b[0m\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\n",
      "albumentations 1.4.7 requires typing-extensions>=4.9.0, but you have typing-extensions 4.3.0 which is incompatible.\n",
      "gcvit-tensorflow 1.2.1 requires absl-py==1.2.0, but you have absl-py 1.4.0 which is incompatible.\n",
      "gcvit-tensorflow 1.2.1 requires cachetools==5.2.0, but you have cachetools 5.2.1 which is incompatible.\n",
      "gcvit-tensorflow 1.2.1 requires flatbuffers==1.12, but you have flatbuffers 20240208003218 which is incompatible.\n",
      "gcvit-tensorflow 1.2.1 requires google-auth==2.11.0, but you have google-auth 2.16.0 which is incompatible.\n",
      "gcvit-tensorflow 1.2.1 requires grpcio==1.47.0, but you have grpcio 1.51.1 which is incompatible.\n",
      "gcvit-tensorflow 1.2.1 requires keras==2.9.0, but you have keras 2.11.0 which is incompatible.\n",
      "gcvit-tensorflow 1.2.1 requires numpy==1.23.1, but you have numpy 2.1.3 which is incompatible.\n",
      "gcvit-tensorflow 1.2.1 requires oauthlib==3.2.0, but you have oauthlib 3.2.2 which is incompatible.\n",
      "gcvit-tensorflow 1.2.1 requires tensorboard==2.9.1, but you have tensorboard 2.11.1 which is incompatible.\n",
      "gcvit-tensorflow 1.2.1 requires tensorflow==2.9.0, but you have tensorflow 2.11.0 which is incompatible.\n",
      "gcvit-tensorflow 1.2.1 requires tensorflow-estimator==2.9.0, but you have tensorflow-estimator 2.11.0 which is incompatible.\n",
      "tb-nightly 2.18.0a20240722 requires protobuf!=4.24.0,<5.0.0,>=3.19.6, but you have protobuf 3.19.4 which is incompatible.\n",
      "tb-nightly 2.18.0a20240722 requires tensorboard-data-server<0.8.0,>=0.7.0, but you have tensorboard-data-server 0.6.1 which is incompatible.\n",
      "tensorflow-hub 0.16.1 requires protobuf>=3.19.6, but you have protobuf 3.19.4 which is incompatible.\n",
      "tf-keras 2.16.0 requires tensorflow<2.17,>=2.16, but you have tensorflow 2.11.0 which is incompatible.\n",
      "tf-nightly 2.18.0.dev20240721 requires h5py>=3.10.0, but you have h5py 3.7.0 which is incompatible.\n",
      "tf-nightly 2.18.0.dev20240721 requires numpy<2.0.0,>=1.23.5; python_version <= \"3.11\", but you have numpy 2.1.3 which is incompatible.\n",
      "tf-nightly 2.18.0.dev20240721 requires protobuf!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<5.0.0dev,>=3.20.3, but you have protobuf 3.19.4 which is incompatible.\n",
      "tfswin 3.5.0 requires numpy<2.0.0,>=1.26.0, but you have numpy 2.1.3 which is incompatible.\n",
      "tfswin 3.5.0 requires tensorflow==2.16.*, but you have tensorflow 2.11.0 which is incompatible.\n",
      "torchvision 0.18.0 requires torch==2.3.0, but you have torch 1.12.1 which is incompatible.\u001b[0m\u001b[31m\n",
      "\u001b[0mSuccessfully installed numpy-1.21.6 scipy-1.13.0\n"
     ]
    }
   ],
   "source": [
    "\n",
    "import os\n",
    "!pip install keras-preprocessing\n",
    "!pip install scikit-image\n",
    "import tensorflow as tf\n",
    "import time\n",
    "#import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "plt.style.use(\"ggplot\")\n",
    "%matplotlib inline\n",
    "\n",
    "#from tqdm import tqdm_notebook, tnrange\n",
    "from itertools import chain\n",
    "# from skimage.io import imread, imshow, concatenate_images\n",
    "# from skimage.transform import resize\n",
    "# from skimage.morphology import label\n",
    "from sklearn.model_selection import train_test_split\n",
    "# import imageio\n",
    "\n",
    "from keras.models import Model, load_model\n",
    "from keras.layers import Input, BatchNormalization, Activation, Dense, Dropout, Resizing\n",
    "from keras.layers import Lambda, RepeatVector, Reshape\n",
    "from keras.layers import Conv2D, Conv2DTranspose\n",
    "from keras.layers import MaxPooling2D, GlobalMaxPool2D, AveragePooling2D\n",
    "from keras.regularizers import l2\n",
    "#from keras.layers.merge import concatenate, add\n",
    "from keras.callbacks import EarlyStopping, ModelCheckpoint, ReduceLROnPlateau\n",
    "from keras.optimizers import Adam\n",
    "#from keras_preprocessing.image import ImageDataGenerator, array_to_img, img_to_array, load_img\n",
    "from keras.models import *\n",
    "from keras.layers import *\n",
    "from keras.optimizers import *\n",
    "from keras.callbacks import *\n",
    "from keras.losses import *\n",
    "from keras import backend as keras\n",
    "\n",
    "from keras.utils import plot_model\n",
    "\n",
    "from keras_preprocessing.image import array_to_img, img_to_array, load_img\n",
    "import cv2\n",
    "# import skimage.io as io\n",
    "\n",
    "import glob\n",
    "from PIL import Image\n",
    "# import skimage\n",
    "from keras.initializers import Constant\n",
    "\n",
    "# from skimage.morphology import disk\n",
    "from sklearn.metrics import confusion_matrix\n",
    "# from skimage.measure import label, regionprops\n",
    "from sklearn.metrics import roc_curve, auc\n",
    "from sklearn.metrics import jaccard_score\n",
    "\n",
    "from keras import backend as K\n",
    "from keras import layers, models\n",
    "import zipfile\n",
    "import random\n",
    "import sys\n",
    "\n",
    "# import skimage.io                           #Used for imshow function\n",
    "# import skimage.transform                    #Used for resize function\n",
    "# from skimage.morphology import label        #Used for Run-Length-Encoding RLE to create final submission\n",
    "import matplotlib.pyplot as plt\n",
    "from keras.layers import Concatenate, add\n",
    "\n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")\n",
    "random.seed(42)\n",
    "np.random.seed(42)\n",
    "tf.random.set_seed(42)\n",
    "from keras.losses import binary_crossentropy\n",
    "from sklearn.metrics import precision_recall_curve"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "executionInfo": {
     "elapsed": 25,
     "status": "ok",
     "timestamp": 1725042147355,
     "user": {
      "displayName": "mehwish mehmood",
      "userId": "03028843311539350970"
     },
     "user_tz": -300
    },
    "id": "iOZsKMJt9OLO"
   },
   "outputs": [],
   "source": [
    "from keras import backend as K\n",
    "\n",
    "from scipy.ndimage import distance_transform_edt as distance\n",
    "from keras.losses import binary_crossentropy\n",
    "def dice_coef(y_true, y_pred,smooth = 10):\n",
    "    y_true_f = K.flatten(y_true)\n",
    "    y_pred_f = K.flatten(y_pred)\n",
    "    intersection = K.sum(y_true_f * y_pred_f)\n",
    "    return (2. * intersection + smooth) / (K.sum(y_true_f) + K.sum(y_pred_f) + smooth)\n",
    "\n",
    "def dice_coef_loss(y_true, y_pred):\n",
    "    return 1-dice_coef(y_true, y_pred)\n",
    "\n",
    "def Jaccard_coef(y_true, y_pred):\n",
    "    y_true_f = K.flatten(y_true)\n",
    "    y_pred_f = K.flatten(y_pred)\n",
    "    intersection = K.sum(y_true_f * y_pred_f)\n",
    "    return (intersection ) / (K.sum(y_true_f) + K.sum(y_pred_f) - intersection)\n",
    "\n",
    "def Jaccard_coef_loss(y_true, y_pred):\n",
    "    return (1-Jaccard_coef(y_true, y_pred))\n",
    "\n",
    "# def bcc_Jaccard_coef_loss(y_true, y_pred):\n",
    "#     return (binary_crossentropy(y_true, y_pred)+(1-Jaccard_coef(y_true, y_pred)))\n",
    "\n",
    "#Metrices\n",
    "# from keras import backend as K\n",
    "import tensorflow as tf\n",
    "import keras\n",
    "\n",
    "import tensorflow.keras.backend as K  # Import the correct backend\n",
    "\n",
    "# ... (rest of your code)\n",
    "\n",
    "def iou(y_true, y_pred, threshold=0.5):\n",
    "    y_pred = threshold_binarize(y_pred, threshold)\n",
    "    y_true_f = K.flatten(y_true)  # Now use K.flatten from tensorflow.keras.backend\n",
    "    y_pred_f = K.flatten(y_pred)\n",
    "    intersection = K.sum(y_true_f * y_pred_f)\n",
    "\n",
    "import keras.backend as K  # Make sure to import Keras backend\n",
    "\n",
    "def dice_coef(y_true, y_pred, threshold=0.5):\n",
    "    y_pred = threshold_binarize(y_pred, threshold)\n",
    "    y_true_f = K.flatten(y_true)  # Now use K.flatten\n",
    "    y_pred_f = K.flatten(y_pred)\n",
    "    intersection = K.sum(y_true_f * y_pred_f)\n",
    "    # ... rest of your dice_coef function ...\n",
    "    return (2. * intersection) / (K.sum(y_true_f) + K.sum(y_pred_f))\n",
    "\n",
    "def sensitivity(y_train, results):\n",
    "    true_positives = K.sum(K.round(K.clip(y_train * results, 0, 1)))\n",
    "    actual_positives = K.sum(K.round(K.clip(y_train, 0, 1)))\n",
    "    sensitivity = true_positives / (actual_positives + K.epsilon())\n",
    "    return sensitivity\n",
    "\n",
    "def specificity(y_true, y_pred):\n",
    "    true_negatives = K.sum(K.round(K.clip((1-y_true) * (1-y_pred), 0, 1)))\n",
    "    possible_negatives = K.sum(K.round(K.clip(1-y_true, 0, 1)))\n",
    "    return true_negatives / (possible_negatives + K.epsilon())\n",
    "\n",
    "def threshold_binarize(x, threshold=0.5):\n",
    "    ge = tf.greater_equal(x, tf.constant(threshold))\n",
    "    y = tf.where(ge, x=tf.ones_like(x), y=tf.zeros_like(x))\n",
    "    return y\n",
    "\n",
    "def DiceLoss(y_true, y_pred, smooth=1e-6):\n",
    "    y_true, y_pred = tf.cast(y_true, dtype=tf.float32), tf.cast(y_pred, tf.float32)\n",
    "    nominator = 2 * tf.reduce_sum(tf.multiply(y_pred, y_true)) + smooth\n",
    "    denominator = tf.reduce_sum(y_pred ** 2) + tf.reduce_sum(y_true ** 2) + smooth\n",
    "    result = 1 - tf.divide(nominator, denominator)\n",
    "    return result\n",
    "\n",
    "\n",
    "\n",
    "# def bcc_Jaccard_coef_loss(y_true, y_pred):\n",
    "#     return (DiceLoss(y_true, y_pred, smooth=1e-6)+(1-iou(y_true, y_pred, threshold=0.5)))\n",
    "\n",
    "\n",
    "def bcc_Jaccard_coef_loss(y_true, y_pred):\n",
    "    iou_value = iou(y_true, y_pred, threshold=0.5)  # Calculate IoU\n",
    "    print(\"IoU value:\", iou_value)  # Print the IoU value\n",
    "    return (DiceLoss(y_true, y_pred, smooth=1e-6)+(1-iou_value))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "executionInfo": {
     "elapsed": 21,
     "status": "ok",
     "timestamp": 1725042147356,
     "user": {
      "displayName": "mehwish mehmood",
      "userId": "03028843311539350970"
     },
     "user_tz": -300
    },
    "id": "UEDQ7mh2dXYn"
   },
   "outputs": [],
   "source": [
    "def focal_modulation_block(inputs, gamma=2.0, alpha=0.25):\n",
    "    # Get the number of channels in the input tensor\n",
    "    num_channels = inputs.shape[-1]\n",
    "\n",
    "    # Channel-wise mean calculation\n",
    "    mean = layers.GlobalAveragePooling2D()(inputs)\n",
    "\n",
    "    # Channel-wise max calculation\n",
    "    max_val = layers.GlobalMaxPooling2D()(inputs)\n",
    "\n",
    "    # Calculate the modulation factor for each channel\n",
    "    modulation = (max_val - mean) * alpha\n",
    "\n",
    "    # Apply the focal modulation to the input tensor\n",
    "    modulation = layers.Reshape((1, 1, num_channels))(modulation)\n",
    "    modulation = layers.Conv2D(filters=num_channels, kernel_size=1, activation='sigmoid')(modulation)\n",
    "\n",
    "    # Scale the input tensor by the modulation factor\n",
    "    scaled_inputs = layers.Multiply()([inputs, modulation])\n",
    "\n",
    "    # Apply gamma power to the scaled inputs\n",
    "    outputs = layers.Lambda(lambda x: x ** gamma)(scaled_inputs)\n",
    "\n",
    "    return outputs\n",
    "def focal_modulation_context_aggregation_block(inputs, filters):\n",
    "    filters = int(filters)\n",
    "    \n",
    "    # Apply multiple convolution layers with different receptive fields\n",
    "    conv1 = layers.Conv2D(filters, kernel_size=1, padding='same', activation='relu')(inputs)\n",
    "    conv2 = layers.Conv2D(filters, kernel_size=3, padding='same', activation='relu')(inputs)\n",
    "    conv3 = layers.Conv2D(filters, kernel_size=5, padding='same', activation='relu')(inputs)\n",
    "    \n",
    "    # Apply gating mechanism (point-wise multiplication)\n",
    "    gate1 = layers.Conv2D(filters, kernel_size=1, activation='sigmoid')(inputs)\n",
    "    gate2 = layers.Conv2D(filters, kernel_size=1, activation='sigmoid')(inputs)\n",
    "    gate3 = layers.Conv2D(filters, kernel_size=1, activation='sigmoid')(inputs)\n",
    "    \n",
    "    gated_conv1 = layers.Multiply()([conv1, gate1])\n",
    "    gated_conv2 = layers.Multiply()([conv2, gate2])\n",
    "    gated_conv3 = layers.Multiply()([conv3, gate3])\n",
    "    \n",
    "    # Aggregate context (addition)\n",
    "    context_aggregation = layers.Add()([gated_conv1, gated_conv2, gated_conv3])\n",
    "    \n",
    "    # Apply focal modulation block (represented here as a placeholder function)\n",
    "    focal_modulation = focal_modulation_block(context_aggregation)\n",
    "    \n",
    "    # Query and Modulator interaction\n",
    "    query = layers.Conv2D(filters, kernel_size=1, activation='relu')(inputs)\n",
    "    modulator = layers.Conv2D(filters, kernel_size=1, activation='relu')(focal_modulation)\n",
    "    interaction = layers.Multiply()([query, modulator])\n",
    "    \n",
    "    # Final addition\n",
    "    output = layers.Add()([inputs, interaction])\n",
    "    \n",
    "    return output"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "#  import numpy as np\n",
    "def ana_attention_block(inputs,n_classes,k):\n",
    "    shape=K.int_shape(inputs)\n",
    "    # F=Conv2D(k*n_classes,1, padding='same') (inputs)\n",
    "    F=Conv2D(k*n_classes,3, padding='same') (inputs)\n",
    "    F=BatchNormalization() (F)\n",
    "    F1=Activation('relu') (F)\n",
    "\n",
    "    F2=F1\n",
    "\n",
    "    x1=GlobalMaxPool2D()(F2)\n",
    "    x2=GlobalAveragePooling2D()(F2)\n",
    "    x = Multiply() ([x1,x2])\n",
    "    x=Reshape((n_classes,k))(x)\n",
    "    S=Lambda(lambda x: K.mean(x,axis=-1,keepdims=False)) (x)\n",
    "\n",
    "    # x2=Reshape((n_classes,k)) (x)\n",
    "    # S2=Lambda(lambda x: K.mean(x,axis=-1,keepdims=False))  (x2)\n",
    "    # S= S1+S2\n",
    "    x=Reshape((shape[1],shape[2],n_classes,k)) (F1)\n",
    "    x=Lambda(lambda x: K.mean(x,axis=-1,keepdims=False))  (x)\n",
    "    x=Multiply()([S,x])\n",
    "    M=Lambda(lambda x: K.mean(x,axis=-1,keepdims=True))  (x)\n",
    "\n",
    "    semantic=Multiply()([inputs,M])\n",
    "    return semantic\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 1000
    },
    "executionInfo": {
     "elapsed": 1626,
     "status": "ok",
     "timestamp": 1725042148963,
     "user": {
      "displayName": "mehwish mehmood",
      "userId": "03028843311539350970"
     },
     "user_tz": -300
    },
    "id": "6mSG_M8MdOoW",
    "outputId": "46f6fb97-7c22-406d-97df-8137cbf1d000"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model\"\n",
      "__________________________________________________________________________________________________\n",
      " Layer (type)                   Output Shape         Param #     Connected to                     \n",
      "==================================================================================================\n",
      " input_1 (InputLayer)           [(None, 512, 512, 3  0           []                               \n",
      "                                )]                                                                \n",
      "                                                                                                  \n",
      " conv2d (Conv2D)                (None, 512, 512, 8)  24          ['input_1[0][0]']                \n",
      "                                                                                                  \n",
      " conv2d_1 (Conv2D)              (None, 512, 512, 8)  216         ['input_1[0][0]']                \n",
      "                                                                                                  \n",
      " tf.__operators__.add (TFOpLamb  (None, 512, 512, 8)  0          ['conv2d[0][0]',                 \n",
      " da)                                                              'conv2d_1[0][0]']               \n",
      "                                                                                                  \n",
      " conv2d_2 (Conv2D)              (None, 512, 512, 8)  216         ['input_1[0][0]']                \n",
      "                                                                                                  \n",
      " tf.__operators__.add_1 (TFOpLa  (None, 512, 512, 8)  0          ['tf.__operators__.add[0][0]',   \n",
      " mbda)                                                            'conv2d_2[0][0]']               \n",
      "                                                                                                  \n",
      " batch_normalization (BatchNorm  (None, 512, 512, 8)  32         ['tf.__operators__.add_1[0][0]'] \n",
      " alization)                                                                                       \n",
      "                                                                                                  \n",
      " dropout (Dropout)              (None, 512, 512, 8)  0           ['batch_normalization[0][0]']    \n",
      "                                                                                                  \n",
      " leaky_re_lu (LeakyReLU)        (None, 512, 512, 8)  0           ['dropout[0][0]']                \n",
      "                                                                                                  \n",
      " conv2d_3 (Conv2D)              (None, 512, 512, 8)  576         ['leaky_re_lu[0][0]']            \n",
      "                                                                                                  \n",
      " batch_normalization_1 (BatchNo  (None, 512, 512, 8)  32         ['conv2d_3[0][0]']               \n",
      " rmalization)                                                                                     \n",
      "                                                                                                  \n",
      " dropout_1 (Dropout)            (None, 512, 512, 8)  0           ['batch_normalization_1[0][0]']  \n",
      "                                                                                                  \n",
      " leaky_re_lu_1 (LeakyReLU)      (None, 512, 512, 8)  0           ['dropout_1[0][0]']              \n",
      "                                                                                                  \n",
      " conv2d_4 (Conv2D)              (None, 256, 256, 8)  256         ['leaky_re_lu_1[0][0]']          \n",
      "                                                                                                  \n",
      " batch_normalization_2 (BatchNo  (None, 256, 256, 8)  32         ['conv2d_4[0][0]']               \n",
      " rmalization)                                                                                     \n",
      "                                                                                                  \n",
      " leaky_re_lu_2 (LeakyReLU)      (None, 256, 256, 8)  0           ['batch_normalization_2[0][0]']  \n",
      "                                                                                                  \n",
      " conv2d_5 (Conv2D)              (None, 256, 256, 16  128         ['leaky_re_lu_2[0][0]']          \n",
      "                                )                                                                 \n",
      "                                                                                                  \n",
      " conv2d_6 (Conv2D)              (None, 256, 256, 16  1152        ['leaky_re_lu_2[0][0]']          \n",
      "                                )                                                                 \n",
      "                                                                                                  \n",
      " tf.__operators__.add_2 (TFOpLa  (None, 256, 256, 16  0          ['conv2d_5[0][0]',               \n",
      " mbda)                          )                                 'conv2d_6[0][0]']               \n",
      "                                                                                                  \n",
      " conv2d_7 (Conv2D)              (None, 256, 256, 16  1152        ['leaky_re_lu_2[0][0]']          \n",
      "                                )                                                                 \n",
      "                                                                                                  \n",
      " tf.__operators__.add_3 (TFOpLa  (None, 256, 256, 16  0          ['tf.__operators__.add_2[0][0]', \n",
      " mbda)                          )                                 'conv2d_7[0][0]']               \n",
      "                                                                                                  \n",
      " batch_normalization_3 (BatchNo  (None, 256, 256, 16  64         ['tf.__operators__.add_3[0][0]'] \n",
      " rmalization)                   )                                                                 \n",
      "                                                                                                  \n",
      " dropout_2 (Dropout)            (None, 256, 256, 16  0           ['batch_normalization_3[0][0]']  \n",
      "                                )                                                                 \n",
      "                                                                                                  \n",
      " leaky_re_lu_3 (LeakyReLU)      (None, 256, 256, 16  0           ['dropout_2[0][0]']              \n",
      "                                )                                                                 \n",
      "                                                                                                  \n",
      " conv2d_8 (Conv2D)              (None, 256, 256, 16  2304        ['leaky_re_lu_3[0][0]']          \n",
      "                                )                                                                 \n",
      "                                                                                                  \n",
      " batch_normalization_4 (BatchNo  (None, 256, 256, 16  64         ['conv2d_8[0][0]']               \n",
      " rmalization)                   )                                                                 \n",
      "                                                                                                  \n",
      " dropout_3 (Dropout)            (None, 256, 256, 16  0           ['batch_normalization_4[0][0]']  \n",
      "                                )                                                                 \n",
      "                                                                                                  \n",
      " leaky_re_lu_4 (LeakyReLU)      (None, 256, 256, 16  0           ['dropout_3[0][0]']              \n",
      "                                )                                                                 \n",
      "                                                                                                  \n",
      " conv2d_9 (Conv2D)              (None, 128, 128, 16  1024        ['leaky_re_lu_4[0][0]']          \n",
      "                                )                                                                 \n",
      "                                                                                                  \n",
      " batch_normalization_5 (BatchNo  (None, 128, 128, 16  64         ['conv2d_9[0][0]']               \n",
      " rmalization)                   )                                                                 \n",
      "                                                                                                  \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " leaky_re_lu_5 (LeakyReLU)      (None, 128, 128, 16  0           ['batch_normalization_5[0][0]']  \n",
      "                                )                                                                 \n",
      "                                                                                                  \n",
      " conv2d_10 (Conv2D)             (None, 128, 128, 32  512         ['leaky_re_lu_5[0][0]']          \n",
      "                                )                                                                 \n",
      "                                                                                                  \n",
      " conv2d_11 (Conv2D)             (None, 128, 128, 32  4608        ['leaky_re_lu_5[0][0]']          \n",
      "                                )                                                                 \n",
      "                                                                                                  \n",
      " tf.__operators__.add_4 (TFOpLa  (None, 128, 128, 32  0          ['conv2d_10[0][0]',              \n",
      " mbda)                          )                                 'conv2d_11[0][0]']              \n",
      "                                                                                                  \n",
      " conv2d_12 (Conv2D)             (None, 128, 128, 32  4608        ['leaky_re_lu_5[0][0]']          \n",
      "                                )                                                                 \n",
      "                                                                                                  \n",
      " tf.__operators__.add_5 (TFOpLa  (None, 128, 128, 32  0          ['tf.__operators__.add_4[0][0]', \n",
      " mbda)                          )                                 'conv2d_12[0][0]']              \n",
      "                                                                                                  \n",
      " batch_normalization_6 (BatchNo  (None, 128, 128, 32  128        ['tf.__operators__.add_5[0][0]'] \n",
      " rmalization)                   )                                                                 \n",
      "                                                                                                  \n",
      " dropout_4 (Dropout)            (None, 128, 128, 32  0           ['batch_normalization_6[0][0]']  \n",
      "                                )                                                                 \n",
      "                                                                                                  \n",
      " leaky_re_lu_6 (LeakyReLU)      (None, 128, 128, 32  0           ['dropout_4[0][0]']              \n",
      "                                )                                                                 \n",
      "                                                                                                  \n",
      " conv2d_13 (Conv2D)             (None, 128, 128, 32  9216        ['leaky_re_lu_6[0][0]']          \n",
      "                                )                                                                 \n",
      "                                                                                                  \n",
      " batch_normalization_7 (BatchNo  (None, 128, 128, 32  128        ['conv2d_13[0][0]']              \n",
      " rmalization)                   )                                                                 \n",
      "                                                                                                  \n",
      " dropout_5 (Dropout)            (None, 128, 128, 32  0           ['batch_normalization_7[0][0]']  \n",
      "                                )                                                                 \n",
      "                                                                                                  \n",
      " leaky_re_lu_7 (LeakyReLU)      (None, 128, 128, 32  0           ['dropout_5[0][0]']              \n",
      "                                )                                                                 \n",
      "                                                                                                  \n",
      " conv2d_14 (Conv2D)             (None, 64, 64, 32)   4096        ['leaky_re_lu_7[0][0]']          \n",
      "                                                                                                  \n",
      " batch_normalization_8 (BatchNo  (None, 64, 64, 32)  128         ['conv2d_14[0][0]']              \n",
      " rmalization)                                                                                     \n",
      "                                                                                                  \n",
      " leaky_re_lu_8 (LeakyReLU)      (None, 64, 64, 32)   0           ['batch_normalization_8[0][0]']  \n",
      "                                                                                                  \n",
      " conv2d_17 (Conv2D)             (None, 64, 64, 32)   1056        ['leaky_re_lu_8[0][0]']          \n",
      "                                                                                                  \n",
      " conv2d_20 (Conv2D)             (None, 64, 64, 32)   1056        ['leaky_re_lu_8[0][0]']          \n",
      "                                                                                                  \n",
      " conv2d_18 (Conv2D)             (None, 64, 64, 32)   9248        ['leaky_re_lu_8[0][0]']          \n",
      "                                                                                                  \n",
      " conv2d_21 (Conv2D)             (None, 64, 64, 32)   1056        ['leaky_re_lu_8[0][0]']          \n",
      "                                                                                                  \n",
      " conv2d_19 (Conv2D)             (None, 64, 64, 32)   25632       ['leaky_re_lu_8[0][0]']          \n",
      "                                                                                                  \n",
      " conv2d_22 (Conv2D)             (None, 64, 64, 32)   1056        ['leaky_re_lu_8[0][0]']          \n",
      "                                                                                                  \n",
      " multiply_6 (Multiply)          (None, 64, 64, 32)   0           ['conv2d_17[0][0]',              \n",
      "                                                                  'conv2d_20[0][0]']              \n",
      "                                                                                                  \n",
      " multiply_7 (Multiply)          (None, 64, 64, 32)   0           ['conv2d_18[0][0]',              \n",
      "                                                                  'conv2d_21[0][0]']              \n",
      "                                                                                                  \n",
      " multiply_8 (Multiply)          (None, 64, 64, 32)   0           ['conv2d_19[0][0]',              \n",
      "                                                                  'conv2d_22[0][0]']              \n",
      "                                                                                                  \n",
      " add (Add)                      (None, 64, 64, 32)   0           ['multiply_6[0][0]',             \n",
      "                                                                  'multiply_7[0][0]',             \n",
      "                                                                  'multiply_8[0][0]']             \n",
      "                                                                                                  \n",
      " global_max_pooling2d_2 (Global  (None, 32)          0           ['add[0][0]']                    \n",
      " MaxPooling2D)                                                                                    \n",
      "                                                                                                  \n",
      " global_average_pooling2d_2 (Gl  (None, 32)          0           ['add[0][0]']                    \n",
      " obalAveragePooling2D)                                                                            \n",
      "                                                                                                  \n",
      " tf.math.subtract (TFOpLambda)  (None, 32)           0           ['global_max_pooling2d_2[0][0]', \n",
      "                                                                  'global_average_pooling2d_2[0][0\n",
      "                                                                 ]']                              \n",
      "                                                                                                  \n",
      " tf.math.multiply (TFOpLambda)  (None, 32)           0           ['tf.math.subtract[0][0]']       \n",
      "                                                                                                  \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " reshape_4 (Reshape)            (None, 1, 1, 32)     0           ['tf.math.multiply[0][0]']       \n",
      "                                                                                                  \n",
      " conv2d_23 (Conv2D)             (None, 1, 1, 32)     1056        ['reshape_4[0][0]']              \n",
      "                                                                                                  \n",
      " multiply_9 (Multiply)          (None, 64, 64, 32)   0           ['add[0][0]',                    \n",
      "                                                                  'conv2d_23[0][0]']              \n",
      "                                                                                                  \n",
      " lambda_6 (Lambda)              (None, 64, 64, 32)   0           ['multiply_9[0][0]']             \n",
      "                                                                                                  \n",
      " conv2d_24 (Conv2D)             (None, 64, 64, 32)   1056        ['leaky_re_lu_8[0][0]']          \n",
      "                                                                                                  \n",
      " conv2d_25 (Conv2D)             (None, 64, 64, 32)   1056        ['lambda_6[0][0]']               \n",
      "                                                                                                  \n",
      " multiply_10 (Multiply)         (None, 64, 64, 32)   0           ['conv2d_24[0][0]',              \n",
      "                                                                  'conv2d_25[0][0]']              \n",
      "                                                                                                  \n",
      " add_1 (Add)                    (None, 64, 64, 32)   0           ['leaky_re_lu_8[0][0]',          \n",
      "                                                                  'multiply_10[0][0]']            \n",
      "                                                                                                  \n",
      " conv2d_26 (Conv2D)             (None, 64, 64, 32)   1024        ['add_1[0][0]']                  \n",
      "                                                                                                  \n",
      " conv2d_27 (Conv2D)             (None, 64, 64, 32)   9216        ['add_1[0][0]']                  \n",
      "                                                                                                  \n",
      " tf.__operators__.add_6 (TFOpLa  (None, 64, 64, 32)  0           ['conv2d_26[0][0]',              \n",
      " mbda)                                                            'conv2d_27[0][0]']              \n",
      "                                                                                                  \n",
      " conv2d_28 (Conv2D)             (None, 64, 64, 32)   9216        ['add_1[0][0]']                  \n",
      "                                                                                                  \n",
      " tf.__operators__.add_7 (TFOpLa  (None, 64, 64, 32)  0           ['tf.__operators__.add_6[0][0]', \n",
      " mbda)                                                            'conv2d_28[0][0]']              \n",
      "                                                                                                  \n",
      " batch_normalization_14 (BatchN  (None, 64, 64, 32)  128         ['tf.__operators__.add_7[0][0]'] \n",
      " ormalization)                                                                                    \n",
      "                                                                                                  \n",
      " dropout_6 (Dropout)            (None, 64, 64, 32)   0           ['batch_normalization_14[0][0]'] \n",
      "                                                                                                  \n",
      " leaky_re_lu_12 (LeakyReLU)     (None, 64, 64, 32)   0           ['dropout_6[0][0]']              \n",
      "                                                                                                  \n",
      " conv2d_29 (Conv2D)             (None, 64, 64, 32)   9216        ['leaky_re_lu_12[0][0]']         \n",
      "                                                                                                  \n",
      " batch_normalization_15 (BatchN  (None, 64, 64, 32)  128         ['conv2d_29[0][0]']              \n",
      " ormalization)                                                                                    \n",
      "                                                                                                  \n",
      " dropout_7 (Dropout)            (None, 64, 64, 32)   0           ['batch_normalization_15[0][0]'] \n",
      "                                                                                                  \n",
      " leaky_re_lu_13 (LeakyReLU)     (None, 64, 64, 32)   0           ['dropout_7[0][0]']              \n",
      "                                                                                                  \n",
      " conv2d_transpose_3 (Conv2DTran  (None, 128, 128, 32  4096       ['leaky_re_lu_13[0][0]']         \n",
      " spose)                         )                                                                 \n",
      "                                                                                                  \n",
      " batch_normalization_16 (BatchN  (None, 128, 128, 32  128        ['conv2d_transpose_3[0][0]']     \n",
      " ormalization)                  )                                                                 \n",
      "                                                                                                  \n",
      " leaky_re_lu_14 (LeakyReLU)     (None, 128, 128, 32  0           ['batch_normalization_16[0][0]'] \n",
      "                                )                                                                 \n",
      "                                                                                                  \n",
      " conv2d_30 (Conv2D)             (None, 128, 128, 32  1024        ['leaky_re_lu_14[0][0]']         \n",
      "                                )                                                                 \n",
      "                                                                                                  \n",
      " conv2d_31 (Conv2D)             (None, 128, 128, 32  9216        ['leaky_re_lu_14[0][0]']         \n",
      "                                )                                                                 \n",
      "                                                                                                  \n",
      " tf.__operators__.add_8 (TFOpLa  (None, 128, 128, 32  0          ['conv2d_30[0][0]',              \n",
      " mbda)                          )                                 'conv2d_31[0][0]']              \n",
      "                                                                                                  \n",
      " conv2d_32 (Conv2D)             (None, 128, 128, 32  9216        ['leaky_re_lu_14[0][0]']         \n",
      "                                )                                                                 \n",
      "                                                                                                  \n",
      " tf.__operators__.add_9 (TFOpLa  (None, 128, 128, 32  0          ['tf.__operators__.add_8[0][0]', \n",
      " mbda)                          )                                 'conv2d_32[0][0]']              \n",
      "                                                                                                  \n",
      " conv2d_15 (Conv2D)             (None, 256, 256, 16  2320        ['leaky_re_lu_4[0][0]']          \n",
      "                                )                                                                 \n",
      "                                                                                                  \n",
      " batch_normalization_17 (BatchN  (None, 128, 128, 32  128        ['tf.__operators__.add_9[0][0]'] \n",
      " ormalization)                  )                                                                 \n",
      "                                                                                                  \n",
      " batch_normalization_10 (BatchN  (None, 256, 256, 16  64         ['conv2d_15[0][0]']              \n",
      " ormalization)                  )                                                                 \n",
      "                                                                                                  \n",
      " dropout_8 (Dropout)            (None, 128, 128, 32  0           ['batch_normalization_17[0][0]'] \n",
      "                                )                                                                 \n",
      "                                                                                                  \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " activation (Activation)        (None, 256, 256, 16  0           ['batch_normalization_10[0][0]'] \n",
      "                                )                                                                 \n",
      "                                                                                                  \n",
      " leaky_re_lu_15 (LeakyReLU)     (None, 128, 128, 32  0           ['dropout_8[0][0]']              \n",
      "                                )                                                                 \n",
      "                                                                                                  \n",
      " global_max_pooling2d (GlobalMa  (None, 16)          0           ['activation[0][0]']             \n",
      " xPooling2D)                                                                                      \n",
      "                                                                                                  \n",
      " global_average_pooling2d (Glob  (None, 16)          0           ['activation[0][0]']             \n",
      " alAveragePooling2D)                                                                              \n",
      "                                                                                                  \n",
      " conv2d_33 (Conv2D)             (None, 128, 128, 32  9216        ['leaky_re_lu_15[0][0]']         \n",
      "                                )                                                                 \n",
      "                                                                                                  \n",
      " multiply (Multiply)            (None, 16)           0           ['global_max_pooling2d[0][0]',   \n",
      "                                                                  'global_average_pooling2d[0][0]'\n",
      "                                                                 ]                                \n",
      "                                                                                                  \n",
      " batch_normalization_18 (BatchN  (None, 128, 128, 32  128        ['conv2d_33[0][0]']              \n",
      " ormalization)                  )                                                                 \n",
      "                                                                                                  \n",
      " reshape (Reshape)              (None, 1, 16)        0           ['multiply[0][0]']               \n",
      "                                                                                                  \n",
      " reshape_1 (Reshape)            (None, 256, 256, 1,  0           ['activation[0][0]']             \n",
      "                                 16)                                                              \n",
      "                                                                                                  \n",
      " dropout_9 (Dropout)            (None, 128, 128, 32  0           ['batch_normalization_18[0][0]'] \n",
      "                                )                                                                 \n",
      "                                                                                                  \n",
      " lambda (Lambda)                (None, 1)            0           ['reshape[0][0]']                \n",
      "                                                                                                  \n",
      " lambda_1 (Lambda)              (None, 256, 256, 1)  0           ['reshape_1[0][0]']              \n",
      "                                                                                                  \n",
      " leaky_re_lu_16 (LeakyReLU)     (None, 128, 128, 32  0           ['dropout_9[0][0]']              \n",
      "                                )                                                                 \n",
      "                                                                                                  \n",
      " multiply_1 (Multiply)          (None, 256, 256, 1)  0           ['lambda[0][0]',                 \n",
      "                                                                  'lambda_1[0][0]']               \n",
      "                                                                                                  \n",
      " conv2d_transpose (Conv2DTransp  (None, 256, 256, 32  4096       ['leaky_re_lu_7[0][0]']          \n",
      " ose)                           )                                                                 \n",
      "                                                                                                  \n",
      " conv2d_transpose_4 (Conv2DTran  (None, 256, 256, 16  2048       ['leaky_re_lu_16[0][0]']         \n",
      " spose)                         )                                                                 \n",
      "                                                                                                  \n",
      " lambda_2 (Lambda)              (None, 256, 256, 1)  0           ['multiply_1[0][0]']             \n",
      "                                                                                                  \n",
      " batch_normalization_9 (BatchNo  (None, 256, 256, 32  128        ['conv2d_transpose[0][0]']       \n",
      " rmalization)                   )                                                                 \n",
      "                                                                                                  \n",
      " batch_normalization_19 (BatchN  (None, 256, 256, 16  64         ['conv2d_transpose_4[0][0]']     \n",
      " ormalization)                  )                                                                 \n",
      "                                                                                                  \n",
      " multiply_2 (Multiply)          (None, 256, 256, 16  0           ['leaky_re_lu_4[0][0]',          \n",
      "                                )                                 'lambda_2[0][0]']               \n",
      "                                                                                                  \n",
      " leaky_re_lu_9 (LeakyReLU)      (None, 256, 256, 32  0           ['batch_normalization_9[0][0]']  \n",
      "                                )                                                                 \n",
      "                                                                                                  \n",
      " leaky_re_lu_17 (LeakyReLU)     (None, 256, 256, 16  0           ['batch_normalization_19[0][0]'] \n",
      "                                )                                                                 \n",
      "                                                                                                  \n",
      " concatenate (Concatenate)      (None, 256, 256, 48  0           ['multiply_2[0][0]',             \n",
      "                                )                                 'leaky_re_lu_9[0][0]']          \n",
      "                                                                                                  \n",
      " concatenate_2 (Concatenate)    (None, 256, 256, 64  0           ['leaky_re_lu_17[0][0]',         \n",
      "                                )                                 'concatenate[0][0]']            \n",
      "                                                                                                  \n",
      " conv2d_34 (Conv2D)             (None, 256, 256, 16  1024        ['concatenate_2[0][0]']          \n",
      "                                )                                                                 \n",
      "                                                                                                  \n",
      " conv2d_35 (Conv2D)             (None, 256, 256, 16  9216        ['concatenate_2[0][0]']          \n",
      "                                )                                                                 \n",
      "                                                                                                  \n",
      " tf.__operators__.add_10 (TFOpL  (None, 256, 256, 16  0          ['conv2d_34[0][0]',              \n",
      " ambda)                         )                                 'conv2d_35[0][0]']              \n",
      "                                                                                                  \n",
      " conv2d_36 (Conv2D)             (None, 256, 256, 16  9216        ['concatenate_2[0][0]']          \n",
      "                                )                                                                 \n",
      "                                                                                                  \n",
      " tf.__operators__.add_11 (TFOpL  (None, 256, 256, 16  0          ['tf.__operators__.add_10[0][0]',\n",
      " ambda)                         )                                 'conv2d_36[0][0]']              \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                                                                                                  \n",
      " conv2d_16 (Conv2D)             (None, 512, 512, 16  1168        ['leaky_re_lu_1[0][0]']          \n",
      "                                )                                                                 \n",
      "                                                                                                  \n",
      " batch_normalization_20 (BatchN  (None, 256, 256, 16  64         ['tf.__operators__.add_11[0][0]']\n",
      " ormalization)                  )                                                                 \n",
      "                                                                                                  \n",
      " batch_normalization_12 (BatchN  (None, 512, 512, 16  64         ['conv2d_16[0][0]']              \n",
      " ormalization)                  )                                                                 \n",
      "                                                                                                  \n",
      " dropout_10 (Dropout)           (None, 256, 256, 16  0           ['batch_normalization_20[0][0]'] \n",
      "                                )                                                                 \n",
      "                                                                                                  \n",
      " activation_1 (Activation)      (None, 512, 512, 16  0           ['batch_normalization_12[0][0]'] \n",
      "                                )                                                                 \n",
      "                                                                                                  \n",
      " leaky_re_lu_18 (LeakyReLU)     (None, 256, 256, 16  0           ['dropout_10[0][0]']             \n",
      "                                )                                                                 \n",
      "                                                                                                  \n",
      " global_max_pooling2d_1 (Global  (None, 16)          0           ['activation_1[0][0]']           \n",
      " MaxPooling2D)                                                                                    \n",
      "                                                                                                  \n",
      " global_average_pooling2d_1 (Gl  (None, 16)          0           ['activation_1[0][0]']           \n",
      " obalAveragePooling2D)                                                                            \n",
      "                                                                                                  \n",
      " conv2d_37 (Conv2D)             (None, 256, 256, 16  2304        ['leaky_re_lu_18[0][0]']         \n",
      "                                )                                                                 \n",
      "                                                                                                  \n",
      " multiply_3 (Multiply)          (None, 16)           0           ['global_max_pooling2d_1[0][0]', \n",
      "                                                                  'global_average_pooling2d_1[0][0\n",
      "                                                                 ]']                              \n",
      "                                                                                                  \n",
      " batch_normalization_21 (BatchN  (None, 256, 256, 16  64         ['conv2d_37[0][0]']              \n",
      " ormalization)                  )                                                                 \n",
      "                                                                                                  \n",
      " reshape_2 (Reshape)            (None, 1, 16)        0           ['multiply_3[0][0]']             \n",
      "                                                                                                  \n",
      " reshape_3 (Reshape)            (None, 512, 512, 1,  0           ['activation_1[0][0]']           \n",
      "                                 16)                                                              \n",
      "                                                                                                  \n",
      " dropout_11 (Dropout)           (None, 256, 256, 16  0           ['batch_normalization_21[0][0]'] \n",
      "                                )                                                                 \n",
      "                                                                                                  \n",
      " lambda_3 (Lambda)              (None, 1)            0           ['reshape_2[0][0]']              \n",
      "                                                                                                  \n",
      " lambda_4 (Lambda)              (None, 512, 512, 1)  0           ['reshape_3[0][0]']              \n",
      "                                                                                                  \n",
      " leaky_re_lu_19 (LeakyReLU)     (None, 256, 256, 16  0           ['dropout_11[0][0]']             \n",
      "                                )                                                                 \n",
      "                                                                                                  \n",
      " multiply_4 (Multiply)          (None, 512, 512, 1)  0           ['lambda_3[0][0]',               \n",
      "                                                                  'lambda_4[0][0]']               \n",
      "                                                                                                  \n",
      " conv2d_transpose_1 (Conv2DTran  (None, 512, 512, 16  1024       ['leaky_re_lu_4[0][0]']          \n",
      " spose)                         )                                                                 \n",
      "                                                                                                  \n",
      " conv2d_transpose_5 (Conv2DTran  (None, 512, 512, 8)  512        ['leaky_re_lu_19[0][0]']         \n",
      " spose)                                                                                           \n",
      "                                                                                                  \n",
      " lambda_5 (Lambda)              (None, 512, 512, 1)  0           ['multiply_4[0][0]']             \n",
      "                                                                                                  \n",
      " batch_normalization_11 (BatchN  (None, 512, 512, 16  64         ['conv2d_transpose_1[0][0]']     \n",
      " ormalization)                  )                                                                 \n",
      "                                                                                                  \n",
      " batch_normalization_22 (BatchN  (None, 512, 512, 8)  32         ['conv2d_transpose_5[0][0]']     \n",
      " ormalization)                                                                                    \n",
      "                                                                                                  \n",
      " multiply_5 (Multiply)          (None, 512, 512, 8)  0           ['leaky_re_lu_1[0][0]',          \n",
      "                                                                  'lambda_5[0][0]']               \n",
      "                                                                                                  \n",
      " leaky_re_lu_10 (LeakyReLU)     (None, 512, 512, 16  0           ['batch_normalization_11[0][0]'] \n",
      "                                )                                                                 \n",
      "                                                                                                  \n",
      " leaky_re_lu_20 (LeakyReLU)     (None, 512, 512, 8)  0           ['batch_normalization_22[0][0]'] \n",
      "                                                                                                  \n",
      " concatenate_1 (Concatenate)    (None, 512, 512, 24  0           ['multiply_5[0][0]',             \n",
      "                                )                                 'leaky_re_lu_10[0][0]']         \n",
      "                                                                                                  \n",
      " concatenate_3 (Concatenate)    (None, 512, 512, 32  0           ['leaky_re_lu_20[0][0]',         \n",
      "                                )                                 'concatenate_1[0][0]']          \n",
      "                                                                                                  \n",
      " conv2d_38 (Conv2D)             (None, 512, 512, 8)  256         ['concatenate_3[0][0]']          \n",
      "                                                                                                  \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " conv2d_39 (Conv2D)             (None, 512, 512, 8)  2304        ['concatenate_3[0][0]']          \n",
      "                                                                                                  \n",
      " tf.__operators__.add_12 (TFOpL  (None, 512, 512, 8)  0          ['conv2d_38[0][0]',              \n",
      " ambda)                                                           'conv2d_39[0][0]']              \n",
      "                                                                                                  \n",
      " conv2d_40 (Conv2D)             (None, 512, 512, 8)  2304        ['concatenate_3[0][0]']          \n",
      "                                                                                                  \n",
      " tf.__operators__.add_13 (TFOpL  (None, 512, 512, 8)  0          ['tf.__operators__.add_12[0][0]',\n",
      " ambda)                                                           'conv2d_40[0][0]']              \n",
      "                                                                                                  \n",
      " batch_normalization_23 (BatchN  (None, 512, 512, 8)  32         ['tf.__operators__.add_13[0][0]']\n",
      " ormalization)                                                                                    \n",
      "                                                                                                  \n",
      " dropout_12 (Dropout)           (None, 512, 512, 8)  0           ['batch_normalization_23[0][0]'] \n",
      "                                                                                                  \n",
      " leaky_re_lu_21 (LeakyReLU)     (None, 512, 512, 8)  0           ['dropout_12[0][0]']             \n",
      "                                                                                                  \n",
      " conv2d_41 (Conv2D)             (None, 512, 512, 8)  576         ['leaky_re_lu_21[0][0]']         \n",
      "                                                                                                  \n",
      " batch_normalization_24 (BatchN  (None, 512, 512, 8)  32         ['conv2d_41[0][0]']              \n",
      " ormalization)                                                                                    \n",
      "                                                                                                  \n",
      " dropout_13 (Dropout)           (None, 512, 512, 8)  0           ['batch_normalization_24[0][0]'] \n",
      "                                                                                                  \n",
      " leaky_re_lu_22 (LeakyReLU)     (None, 512, 512, 8)  0           ['dropout_13[0][0]']             \n",
      "                                                                                                  \n",
      " conv2d_42 (Conv2D)             (None, 512, 512, 1)  9           ['leaky_re_lu_22[0][0]']         \n",
      "                                                                                                  \n",
      "==================================================================================================\n",
      "Total params: 174,097\n",
      "Trainable params: 173,137\n",
      "Non-trainable params: 960\n",
      "__________________________________________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "import tensorflow as tf\n",
    "from tensorflow.keras import layers, Model\n",
    "\n",
    "def conv_block(input, out_channels, dropout_rate=0):\n",
    "    # Multi-scale convolutions\n",
    "    conv1x1 = layers.Conv2D(out_channels, kernel_size=1, padding='same', use_bias=False)(input)\n",
    "    conv3x3 = layers.Conv2D(out_channels, kernel_size=3, padding='same', use_bias=False)(input)\n",
    "    conv3x3_dilated = layers.Conv2D(out_channels, kernel_size=3, padding='same', use_bias=False, dilation_rate=2)(input)\n",
    "    \n",
    "    # Fuse multi-scale outputs by summing them\n",
    "    x = conv1x1 + conv3x3 + conv3x3_dilated\n",
    "    \n",
    "    # Apply Batch Normalization, Dropout, and Activation after fusion\n",
    "    x = layers.BatchNormalization()(x)\n",
    "    x = layers.Dropout(dropout_rate)(x)\n",
    "    x = layers.LeakyReLU(alpha=0.1)(x)\n",
    "    \n",
    "    # Second set of regular convolutions\n",
    "    x = layers.Conv2D(out_channels, kernel_size=3, padding='same', use_bias=False)(x)\n",
    "    x = layers.BatchNormalization()(x)\n",
    "    x = layers.Dropout(dropout_rate)(x)\n",
    "    x = layers.LeakyReLU(alpha=0.1)(x)\n",
    "    \n",
    "    return x\n",
    "\n",
    "\n",
    "def up_block(input, out_channels):\n",
    "    x = layers.Conv2DTranspose(out_channels, kernel_size=2, strides=2, padding='same', use_bias=False)(input)\n",
    "    x = layers.BatchNormalization()(x)\n",
    "    x = layers.LeakyReLU(alpha=0.1)(x)\n",
    "    return x\n",
    "\n",
    "def down_block(input, out_channels):\n",
    "    x = layers.Conv2D(out_channels, kernel_size=2, strides=2, padding='same', use_bias=False)(input)\n",
    "    x = layers.BatchNormalization()(x)\n",
    "    x = layers.LeakyReLU(alpha=0.1)(x)\n",
    "    return x\n",
    "\n",
    "def build_FR_UNet(input_shape, num_classes, feature_scale=2, dropout=0.2):\n",
    "    inputs = tf.keras.Input(shape=input_shape)\n",
    "    filters = [int(x / feature_scale) for x in [16,32,64]]\n",
    "\n",
    "    c1 = conv_block(inputs, filters[0], dropout)\n",
    "    p1 = down_block(c1, filters[0])\n",
    "\n",
    "    c2 = conv_block(p1, filters[1], dropout)\n",
    "    p2 = down_block(c2, filters[1])\n",
    "\n",
    "    c3 = conv_block(p2, filters[2], dropout)\n",
    "    p3 = down_block(c3, filters[2])\n",
    "\n",
    "    \n",
    "    ########## Backward Skip Connection Aggregation ###################\n",
    "    \n",
    "#     x1 = ana_attention_block(c3,1,16)\n",
    "    x1_up = up_block(c3, filters[2])\n",
    "    \n",
    "    x2_s = ana_attention_block(c2,1,16)\n",
    "    x2 = layers.concatenate([x2_s, x1_up])\n",
    "    \n",
    "    x2_up = up_block(c2, filters[1])\n",
    "\n",
    "    x3_s = ana_attention_block(c1,1,16)\n",
    "    x3 = layers.concatenate([x3_s, x2_up])\n",
    "   \n",
    "    x3_up = up_block(x3, filters[0])\n",
    "\n",
    "  \n",
    "    ######################################################################\n",
    "    focal_modulation = focal_modulation_context_aggregation_block(p3, 32)\n",
    "    \n",
    "    c4 = conv_block(focal_modulation, filters[2], dropout)\n",
    "#     p4 = down_block(c4, filters[4])\n",
    "\n",
    "#     c5 = conv_block(p4, filters[4], dropout)\n",
    "\n",
    "    u6 = up_block(c4, filters[2])\n",
    "\n",
    "#     u6 = layers.concatenate([u6, x1])\n",
    "    c6 = conv_block(u6, filters[2], dropout)\n",
    "\n",
    "    u7 = up_block(c6, filters[1])\n",
    "\n",
    "    u7 = layers.concatenate([u7, x2])\n",
    "    c7 = conv_block(u7, filters[1], dropout)\n",
    "\n",
    "    u8 = up_block(c7, filters[0])\n",
    "    \n",
    "    u8 = layers.concatenate([u8, x3])\n",
    "    c8 = conv_block(u8, filters[0], dropout)\n",
    "\n",
    "\n",
    "    outputs = layers.Conv2D(num_classes, kernel_size=1, activation='sigmoid')(c8)\n",
    "\n",
    "    model = Model(inputs=[inputs], outputs=[outputs])\n",
    "    return model\n",
    "\n",
    "# Example usage:\n",
    "input_shape = (512, 512, 3)  # Example input shape\n",
    "# num_classes = 3  # Number of classes for segmentation\n",
    "model = build_FR_UNet(input_shape, 1, feature_scale=2, dropout=0.2)\n",
    "\n",
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "executionInfo": {
     "elapsed": 28,
     "status": "ok",
     "timestamp": 1725042151798,
     "user": {
      "displayName": "mehwish mehmood",
      "userId": "03028843311539350970"
     },
     "user_tz": -300
    },
    "id": "dv8QbI1YWxRq"
   },
   "outputs": [],
   "source": [
    "train_data ='' #data path\n",
    "valid_data = ''"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "executionInfo": {
     "elapsed": 28,
     "status": "ok",
     "timestamp": 1725042151799,
     "user": {
      "displayName": "mehwish mehmood",
      "userId": "03028843311539350970"
     },
     "user_tz": -300
    },
    "id": "L9t74jdEW2KO"
   },
   "outputs": [],
   "source": [
    "import os\n",
    "import numpy as np\n",
    "from tensorflow.keras.preprocessing.image import img_to_array, load_img\n",
    "from skimage.transform import resize\n",
    "\n",
    "# Set the desired image dimensions\n",
    "im_height = 512\n",
    "im_width = 512\n",
    "\n",
    "# Function to get and resize train images and masks for binary segmentation\n",
    "def get_data(path):\n",
    "    # Paths to images and masks directories\n",
    "    images_paths = os.path.join(path, 'Images')\n",
    "    masks_path_BV = os.path.join(path, 'GT')\n",
    "\n",
    "    # Get the list of image and mask files, sorted for consistency\n",
    "    images_ids = sorted(os.listdir(images_paths))\n",
    "    mask1_ids = sorted(os.listdir(masks_path_BV))\n",
    "\n",
    "    # Initialize arrays to hold the images and masks\n",
    "    X = np.zeros((len(images_ids), im_height, im_width, 3), dtype=np.float32)  # For RGB images\n",
    "    y1 = np.zeros((len(mask1_ids), im_height, im_width, 1), dtype=np.float32)  # For binary masks\n",
    "\n",
    "    print('Getting and resizing images ... ')\n",
    "    for n in range(len(images_ids)):\n",
    "        try:\n",
    "            # Load and resize the images\n",
    "            img = img_to_array(load_img(os.path.join(images_paths, images_ids[n]), grayscale=False))  # Load as RGB\n",
    "            x_img = resize(img, (im_height, im_width, 3), mode='constant', preserve_range=True)  # Resize image\n",
    "\n",
    "            # Load and resize the masks\n",
    "            mask_BV = img_to_array(load_img(os.path.join(masks_path_BV, mask1_ids[n]), grayscale=True))  # Load as grayscale\n",
    "            mask_BV = resize(mask_BV, (im_height, im_width, 1), mode='constant', preserve_range=True)  # Resize mask\n",
    "\n",
    "            # Normalize the image and mask values to the range [0, 1]\n",
    "            X[n] = x_img / 255.0\n",
    "            y1[n] = mask_BV / 255.0\n",
    "        except Exception as e:\n",
    "            # Handle non-image files or other loading issues\n",
    "            print(f\"Skipping file {images_ids[n]} or {mask1_ids[n]} due to an error: {e}\")\n",
    "            continue\n",
    "\n",
    "    print('Done!')\n",
    "    return X, y1\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 57556,
     "status": "ok",
     "timestamp": 1725042209328,
     "user": {
      "displayName": "mehwish mehmood",
      "userId": "03028843311539350970"
     },
     "user_tz": -300
    },
    "id": "xJM1YlwwgkVl",
    "outputId": "30182eed-aa28-434a-f308-11a056a483ff"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Getting and resizing images ... \n",
      "Done!\n",
      "X_train shape: (3184, 512, 512, 3)\n",
      "y1_train shape: (3184, 512, 512, 1)\n"
     ]
    }
   ],
   "source": [
    "X, y1 = get_data(train_data)\n",
    "\n",
    "print(\"X_train shape:\", X.shape)\n",
    "print(\"y1_train shape:\", y1.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 1044,
     "status": "ok",
     "timestamp": 1725042223385,
     "user": {
      "displayName": "mehwish mehmood",
      "userId": "03028843311539350970"
     },
     "user_tz": -300
    },
    "id": "McgJ-IH8gJIp",
    "outputId": "782be211-b171-43d6-9a89-46d469691c1f"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "X_train shape: (2547, 512, 512, 3)\n",
      "y1_train shape: (2547, 512, 512, 1)\n",
      "X_test shape: (637, 512, 512, 3)\n",
      "y1_test shape: (637, 512, 512, 1)\n"
     ]
    }
   ],
   "source": [
    "# prompt: ADD TRAIN TEST SPLIT AND PRINT SHAPES\n",
    "\n",
    "# Get and resize train images and masks\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y1, test_size=0.20, random_state=42)\n",
    "\n",
    "\n",
    "# Print the shapes of the training and testing sets\n",
    "print(\"X_train shape:\", X_train.shape)\n",
    "print(\"y1_train shape:\", y_train.shape)\n",
    "print(\"X_test shape:\", X_test.shape)\n",
    "print(\"y1_test shape:\", y_test.shape)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "executionInfo": {
     "elapsed": 539,
     "status": "ok",
     "timestamp": 1725042274511,
     "user": {
      "displayName": "mehwish mehmood",
      "userId": "03028843311539350970"
     },
     "user_tz": -300
    },
    "id": "Y1qWxYKCXmK2"
   },
   "outputs": [],
   "source": [
    "# prompt: convert masks into logical values and print shapes\n",
    "\n",
    "y_train = np.array(y_train > 0.5, dtype=np.uint8)\n",
    "y_test = np.array(y_test > 0.5, dtype=np.uint8)\n",
    "# y2_train_od = np.array(y2_train_od > 0.5, dtype=np.uint8)\n",
    "# y2_test_od = np.array(y2_test_od > 0.5, dtype=np.uint8)\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "model.load_weights('Vseg-weights_Combined.h5')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "executionInfo": {
     "elapsed": 490,
     "status": "ok",
     "timestamp": 1725042341931,
     "user": {
      "displayName": "mehwish mehmood",
      "userId": "03028843311539350970"
     },
     "user_tz": -300
    },
    "id": "NRfvPxW8W6HW"
   },
   "outputs": [],
   "source": [
    "from keras.callbacks import EarlyStopping, ModelCheckpoint\n",
    "nb_epoch = 300\n",
    "batch_size=4\n",
    "earlystopper = EarlyStopping(patience=10, verbose=1)\n",
    "# Append '.weights.h5' to the filename\n",
    "checkpoint = ModelCheckpoint('Vseg-weights_Combined-DRIVE.h5',\n",
    "                             verbose=1, save_best_only=True,save_weights_only=True)\n",
    "callbacks = [checkpoint]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import necessary libraries\n",
    "from keras.optimizers import Adam\n",
    "import tensorflow as tf\n",
    "# model.compile(optimizer=Adam(0.002), loss=DiceLoss, metrics=['accuracy',dice_coef, Jaccard_coef,sensitivity, specificity])\n",
    "\n",
    "model.compile(\n",
    "    optimizer=Adam(learning_rate=0.002),\n",
    "    loss=DiceLoss,  # Ensure this is a valid loss function and not None\n",
    "    metrics=['accuracy', dice_coef, Jaccard_coef]  # Ensure metrics are properly defined\n",
    ")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 1626608,
     "status": "ok",
     "timestamp": 1725043982733,
     "user": {
      "displayName": "mehwish mehmood",
      "userId": "03028843311539350970"
     },
     "user_tz": -300
    },
    "id": "0YWgJOrIW8hu",
    "outputId": "bf590803-6f6f-4ec0-f99b-d6ade0ea82f1"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/300\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-12-03 21:06:51.718203: E tensorflow/core/grappler/optimizers/meta_optimizer.cc:954] layout failed: INVALID_ARGUMENT: Size of values 0 does not match size of permutation 4 @ fanin shape inmodel/dropout/dropout/SelectV2-2-TransposeNHWCToNCHW-LayoutOptimizer\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "637/637 [==============================] - ETA: 0s - loss: 0.1220 - accuracy: 0.9715 - dice_coef: 0.8468 - Jaccard_coef: 0.6720\n",
      "Epoch 1: val_loss improved from inf to 0.12313, saving model to /homes/imransharif/Mehwish/DRIVE/AV_weights/FR_UNet_RAAMSkip_BK_16_last2-3_Combined.h5\n",
      "637/637 [==============================] - 144s 192ms/step - loss: 0.1220 - accuracy: 0.9715 - dice_coef: 0.8468 - Jaccard_coef: 0.6720 - val_loss: 0.1231 - val_accuracy: 0.9726 - val_dice_coef: 0.8408 - val_Jaccard_coef: 0.6745\n",
      "Epoch 2/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1219 - accuracy: 0.9716 - dice_coef: 0.8469 - Jaccard_coef: 0.6720\n",
      "Epoch 2: val_loss improved from 0.12313 to 0.12142, saving model to /homes/imransharif/Mehwish/DRIVE/AV_weights/FR_UNet_RAAMSkip_BK_16_last2-3_Combined.h5\n",
      "637/637 [==============================] - 115s 180ms/step - loss: 0.1219 - accuracy: 0.9716 - dice_coef: 0.8469 - Jaccard_coef: 0.6720 - val_loss: 0.1214 - val_accuracy: 0.9728 - val_dice_coef: 0.8443 - val_Jaccard_coef: 0.6770\n",
      "Epoch 3/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1220 - accuracy: 0.9716 - dice_coef: 0.8468 - Jaccard_coef: 0.6720\n",
      "Epoch 3: val_loss did not improve from 0.12142\n",
      "637/637 [==============================] - 114s 178ms/step - loss: 0.1220 - accuracy: 0.9716 - dice_coef: 0.8468 - Jaccard_coef: 0.6720 - val_loss: 0.1288 - val_accuracy: 0.9717 - val_dice_coef: 0.8367 - val_Jaccard_coef: 0.6704\n",
      "Epoch 4/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1219 - accuracy: 0.9716 - dice_coef: 0.8469 - Jaccard_coef: 0.6721\n",
      "Epoch 4: val_loss improved from 0.12142 to 0.11667, saving model to /homes/imransharif/Mehwish/DRIVE/AV_weights/FR_UNet_RAAMSkip_BK_16_last2-3_Combined.h5\n",
      "637/637 [==============================] - 116s 182ms/step - loss: 0.1219 - accuracy: 0.9716 - dice_coef: 0.8469 - Jaccard_coef: 0.6721 - val_loss: 0.1167 - val_accuracy: 0.9734 - val_dice_coef: 0.8503 - val_Jaccard_coef: 0.6772\n",
      "Epoch 5/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1219 - accuracy: 0.9716 - dice_coef: 0.8470 - Jaccard_coef: 0.6722\n",
      "Epoch 5: val_loss did not improve from 0.11667\n",
      "637/637 [==============================] - 114s 179ms/step - loss: 0.1219 - accuracy: 0.9716 - dice_coef: 0.8470 - Jaccard_coef: 0.6722 - val_loss: 0.1216 - val_accuracy: 0.9727 - val_dice_coef: 0.8438 - val_Jaccard_coef: 0.6761\n",
      "Epoch 6/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1219 - accuracy: 0.9716 - dice_coef: 0.8469 - Jaccard_coef: 0.6721\n",
      "Epoch 6: val_loss did not improve from 0.11667\n",
      "637/637 [==============================] - 114s 178ms/step - loss: 0.1219 - accuracy: 0.9716 - dice_coef: 0.8469 - Jaccard_coef: 0.6721 - val_loss: 0.1209 - val_accuracy: 0.9730 - val_dice_coef: 0.8454 - val_Jaccard_coef: 0.6829\n",
      "Epoch 7/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1220 - accuracy: 0.9716 - dice_coef: 0.8469 - Jaccard_coef: 0.6719\n",
      "Epoch 7: val_loss did not improve from 0.11667\n",
      "637/637 [==============================] - 114s 179ms/step - loss: 0.1220 - accuracy: 0.9716 - dice_coef: 0.8469 - Jaccard_coef: 0.6719 - val_loss: 0.1233 - val_accuracy: 0.9726 - val_dice_coef: 0.8414 - val_Jaccard_coef: 0.6754\n",
      "Epoch 8/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1220 - accuracy: 0.9715 - dice_coef: 0.8468 - Jaccard_coef: 0.6719\n",
      "Epoch 8: val_loss did not improve from 0.11667\n",
      "637/637 [==============================] - 113s 178ms/step - loss: 0.1220 - accuracy: 0.9715 - dice_coef: 0.8468 - Jaccard_coef: 0.6719 - val_loss: 0.1181 - val_accuracy: 0.9733 - val_dice_coef: 0.8479 - val_Jaccard_coef: 0.6759\n",
      "Epoch 9/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1218 - accuracy: 0.9716 - dice_coef: 0.8470 - Jaccard_coef: 0.6722\n",
      "Epoch 9: val_loss did not improve from 0.11667\n",
      "637/637 [==============================] - 114s 179ms/step - loss: 0.1218 - accuracy: 0.9716 - dice_coef: 0.8470 - Jaccard_coef: 0.6722 - val_loss: 0.1205 - val_accuracy: 0.9729 - val_dice_coef: 0.8452 - val_Jaccard_coef: 0.6725\n",
      "Epoch 10/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1218 - accuracy: 0.9716 - dice_coef: 0.8470 - Jaccard_coef: 0.6723\n",
      "Epoch 10: val_loss did not improve from 0.11667\n",
      "637/637 [==============================] - 114s 178ms/step - loss: 0.1218 - accuracy: 0.9716 - dice_coef: 0.8470 - Jaccard_coef: 0.6723 - val_loss: 0.1188 - val_accuracy: 0.9732 - val_dice_coef: 0.8471 - val_Jaccard_coef: 0.6778\n",
      "Epoch 11/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1219 - accuracy: 0.9716 - dice_coef: 0.8470 - Jaccard_coef: 0.6723\n",
      "Epoch 11: val_loss did not improve from 0.11667\n",
      "637/637 [==============================] - 114s 178ms/step - loss: 0.1219 - accuracy: 0.9716 - dice_coef: 0.8470 - Jaccard_coef: 0.6723 - val_loss: 0.1239 - val_accuracy: 0.9725 - val_dice_coef: 0.8395 - val_Jaccard_coef: 0.6747\n",
      "Epoch 12/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1217 - accuracy: 0.9716 - dice_coef: 0.8471 - Jaccard_coef: 0.6724\n",
      "Epoch 12: val_loss did not improve from 0.11667\n",
      "637/637 [==============================] - 114s 178ms/step - loss: 0.1217 - accuracy: 0.9716 - dice_coef: 0.8471 - Jaccard_coef: 0.6724 - val_loss: 0.1201 - val_accuracy: 0.9731 - val_dice_coef: 0.8458 - val_Jaccard_coef: 0.6757\n",
      "Epoch 13/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1218 - accuracy: 0.9716 - dice_coef: 0.8471 - Jaccard_coef: 0.6724\n",
      "Epoch 13: val_loss did not improve from 0.11667\n",
      "637/637 [==============================] - 114s 178ms/step - loss: 0.1218 - accuracy: 0.9716 - dice_coef: 0.8471 - Jaccard_coef: 0.6724 - val_loss: 0.1269 - val_accuracy: 0.9720 - val_dice_coef: 0.8345 - val_Jaccard_coef: 0.6656\n",
      "Epoch 14/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1220 - accuracy: 0.9715 - dice_coef: 0.8468 - Jaccard_coef: 0.6719\n",
      "Epoch 14: val_loss did not improve from 0.11667\n",
      "637/637 [==============================] - 114s 179ms/step - loss: 0.1220 - accuracy: 0.9715 - dice_coef: 0.8468 - Jaccard_coef: 0.6719 - val_loss: 0.1249 - val_accuracy: 0.9725 - val_dice_coef: 0.8392 - val_Jaccard_coef: 0.6763\n",
      "Epoch 15/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1218 - accuracy: 0.9716 - dice_coef: 0.8470 - Jaccard_coef: 0.6725\n",
      "Epoch 15: val_loss did not improve from 0.11667\n",
      "637/637 [==============================] - 114s 178ms/step - loss: 0.1218 - accuracy: 0.9716 - dice_coef: 0.8470 - Jaccard_coef: 0.6725 - val_loss: 0.1219 - val_accuracy: 0.9727 - val_dice_coef: 0.8449 - val_Jaccard_coef: 0.6783\n",
      "Epoch 16/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1218 - accuracy: 0.9716 - dice_coef: 0.8470 - Jaccard_coef: 0.6722\n",
      "Epoch 16: val_loss did not improve from 0.11667\n",
      "637/637 [==============================] - 114s 178ms/step - loss: 0.1218 - accuracy: 0.9716 - dice_coef: 0.8470 - Jaccard_coef: 0.6722 - val_loss: 0.1191 - val_accuracy: 0.9731 - val_dice_coef: 0.8482 - val_Jaccard_coef: 0.6804\n",
      "Epoch 17/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1221 - accuracy: 0.9716 - dice_coef: 0.8468 - Jaccard_coef: 0.6720\n",
      "Epoch 17: val_loss did not improve from 0.11667\n",
      "637/637 [==============================] - 113s 178ms/step - loss: 0.1221 - accuracy: 0.9716 - dice_coef: 0.8468 - Jaccard_coef: 0.6720 - val_loss: 0.1195 - val_accuracy: 0.9731 - val_dice_coef: 0.8464 - val_Jaccard_coef: 0.6793\n",
      "Epoch 18/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1217 - accuracy: 0.9716 - dice_coef: 0.8472 - Jaccard_coef: 0.6725\n",
      "Epoch 18: val_loss did not improve from 0.11667\n",
      "637/637 [==============================] - 114s 179ms/step - loss: 0.1217 - accuracy: 0.9716 - dice_coef: 0.8472 - Jaccard_coef: 0.6725 - val_loss: 0.1222 - val_accuracy: 0.9727 - val_dice_coef: 0.8416 - val_Jaccard_coef: 0.6741\n",
      "Epoch 19/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1218 - accuracy: 0.9716 - dice_coef: 0.8471 - Jaccard_coef: 0.6724\n",
      "Epoch 19: val_loss did not improve from 0.11667\n",
      "637/637 [==============================] - 114s 178ms/step - loss: 0.1218 - accuracy: 0.9716 - dice_coef: 0.8471 - Jaccard_coef: 0.6724 - val_loss: 0.1232 - val_accuracy: 0.9727 - val_dice_coef: 0.8404 - val_Jaccard_coef: 0.6725\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 20/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1218 - accuracy: 0.9716 - dice_coef: 0.8470 - Jaccard_coef: 0.6723\n",
      "Epoch 20: val_loss did not improve from 0.11667\n",
      "637/637 [==============================] - 113s 178ms/step - loss: 0.1218 - accuracy: 0.9716 - dice_coef: 0.8470 - Jaccard_coef: 0.6723 - val_loss: 0.1208 - val_accuracy: 0.9729 - val_dice_coef: 0.8453 - val_Jaccard_coef: 0.6802\n",
      "Epoch 21/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1218 - accuracy: 0.9716 - dice_coef: 0.8471 - Jaccard_coef: 0.6725\n",
      "Epoch 21: val_loss did not improve from 0.11667\n",
      "637/637 [==============================] - 114s 178ms/step - loss: 0.1218 - accuracy: 0.9716 - dice_coef: 0.8471 - Jaccard_coef: 0.6725 - val_loss: 0.1199 - val_accuracy: 0.9730 - val_dice_coef: 0.8456 - val_Jaccard_coef: 0.6797\n",
      "Epoch 22/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1218 - accuracy: 0.9716 - dice_coef: 0.8471 - Jaccard_coef: 0.6725\n",
      "Epoch 22: val_loss did not improve from 0.11667\n",
      "637/637 [==============================] - 114s 178ms/step - loss: 0.1218 - accuracy: 0.9716 - dice_coef: 0.8471 - Jaccard_coef: 0.6725 - val_loss: 0.1224 - val_accuracy: 0.9727 - val_dice_coef: 0.8434 - val_Jaccard_coef: 0.6760\n",
      "Epoch 23/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1216 - accuracy: 0.9716 - dice_coef: 0.8473 - Jaccard_coef: 0.6728\n",
      "Epoch 23: val_loss did not improve from 0.11667\n",
      "637/637 [==============================] - 114s 179ms/step - loss: 0.1216 - accuracy: 0.9716 - dice_coef: 0.8473 - Jaccard_coef: 0.6728 - val_loss: 0.1223 - val_accuracy: 0.9728 - val_dice_coef: 0.8430 - val_Jaccard_coef: 0.6751\n",
      "Epoch 24/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1218 - accuracy: 0.9716 - dice_coef: 0.8470 - Jaccard_coef: 0.6724\n",
      "Epoch 24: val_loss did not improve from 0.11667\n",
      "637/637 [==============================] - 114s 178ms/step - loss: 0.1218 - accuracy: 0.9716 - dice_coef: 0.8470 - Jaccard_coef: 0.6724 - val_loss: 0.1205 - val_accuracy: 0.9730 - val_dice_coef: 0.8454 - val_Jaccard_coef: 0.6766\n",
      "Epoch 25/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1216 - accuracy: 0.9716 - dice_coef: 0.8473 - Jaccard_coef: 0.6728\n",
      "Epoch 25: val_loss did not improve from 0.11667\n",
      "637/637 [==============================] - 114s 179ms/step - loss: 0.1216 - accuracy: 0.9716 - dice_coef: 0.8473 - Jaccard_coef: 0.6728 - val_loss: 0.1176 - val_accuracy: 0.9734 - val_dice_coef: 0.8484 - val_Jaccard_coef: 0.6800\n",
      "Epoch 26/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1217 - accuracy: 0.9716 - dice_coef: 0.8472 - Jaccard_coef: 0.6725\n",
      "Epoch 26: val_loss did not improve from 0.11667\n",
      "637/637 [==============================] - 114s 180ms/step - loss: 0.1217 - accuracy: 0.9716 - dice_coef: 0.8472 - Jaccard_coef: 0.6725 - val_loss: 0.1187 - val_accuracy: 0.9731 - val_dice_coef: 0.8482 - val_Jaccard_coef: 0.6793\n",
      "Epoch 27/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1219 - accuracy: 0.9716 - dice_coef: 0.8470 - Jaccard_coef: 0.6724\n",
      "Epoch 27: val_loss did not improve from 0.11667\n",
      "637/637 [==============================] - 114s 179ms/step - loss: 0.1219 - accuracy: 0.9716 - dice_coef: 0.8470 - Jaccard_coef: 0.6724 - val_loss: 0.1216 - val_accuracy: 0.9729 - val_dice_coef: 0.8431 - val_Jaccard_coef: 0.6756\n",
      "Epoch 28/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1217 - accuracy: 0.9716 - dice_coef: 0.8472 - Jaccard_coef: 0.6727\n",
      "Epoch 28: val_loss did not improve from 0.11667\n",
      "637/637 [==============================] - 114s 178ms/step - loss: 0.1217 - accuracy: 0.9716 - dice_coef: 0.8472 - Jaccard_coef: 0.6727 - val_loss: 0.1215 - val_accuracy: 0.9729 - val_dice_coef: 0.8427 - val_Jaccard_coef: 0.6746\n",
      "Epoch 29/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1218 - accuracy: 0.9716 - dice_coef: 0.8471 - Jaccard_coef: 0.6726\n",
      "Epoch 29: val_loss did not improve from 0.11667\n",
      "637/637 [==============================] - 114s 178ms/step - loss: 0.1218 - accuracy: 0.9716 - dice_coef: 0.8471 - Jaccard_coef: 0.6726 - val_loss: 0.1238 - val_accuracy: 0.9726 - val_dice_coef: 0.8406 - val_Jaccard_coef: 0.6762\n",
      "Epoch 30/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1218 - accuracy: 0.9716 - dice_coef: 0.8471 - Jaccard_coef: 0.6724\n",
      "Epoch 30: val_loss did not improve from 0.11667\n",
      "637/637 [==============================] - 114s 179ms/step - loss: 0.1218 - accuracy: 0.9716 - dice_coef: 0.8471 - Jaccard_coef: 0.6724 - val_loss: 0.1192 - val_accuracy: 0.9732 - val_dice_coef: 0.8462 - val_Jaccard_coef: 0.6778\n",
      "Epoch 31/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1217 - accuracy: 0.9716 - dice_coef: 0.8472 - Jaccard_coef: 0.6726\n",
      "Epoch 31: val_loss did not improve from 0.11667\n",
      "637/637 [==============================] - 114s 178ms/step - loss: 0.1217 - accuracy: 0.9716 - dice_coef: 0.8472 - Jaccard_coef: 0.6726 - val_loss: 0.1214 - val_accuracy: 0.9729 - val_dice_coef: 0.8452 - val_Jaccard_coef: 0.6804\n",
      "Epoch 32/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1215 - accuracy: 0.9716 - dice_coef: 0.8474 - Jaccard_coef: 0.6728\n",
      "Epoch 32: val_loss did not improve from 0.11667\n",
      "637/637 [==============================] - 114s 178ms/step - loss: 0.1215 - accuracy: 0.9716 - dice_coef: 0.8474 - Jaccard_coef: 0.6728 - val_loss: 0.1187 - val_accuracy: 0.9732 - val_dice_coef: 0.8474 - val_Jaccard_coef: 0.6824\n",
      "Epoch 33/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1215 - accuracy: 0.9716 - dice_coef: 0.8473 - Jaccard_coef: 0.6728\n",
      "Epoch 33: val_loss did not improve from 0.11667\n",
      "637/637 [==============================] - 114s 178ms/step - loss: 0.1215 - accuracy: 0.9716 - dice_coef: 0.8473 - Jaccard_coef: 0.6728 - val_loss: 0.1206 - val_accuracy: 0.9728 - val_dice_coef: 0.8446 - val_Jaccard_coef: 0.6755\n",
      "Epoch 34/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1216 - accuracy: 0.9716 - dice_coef: 0.8473 - Jaccard_coef: 0.6729\n",
      "Epoch 34: val_loss did not improve from 0.11667\n",
      "637/637 [==============================] - 114s 178ms/step - loss: 0.1216 - accuracy: 0.9716 - dice_coef: 0.8473 - Jaccard_coef: 0.6729 - val_loss: 0.1185 - val_accuracy: 0.9732 - val_dice_coef: 0.8479 - val_Jaccard_coef: 0.6788\n",
      "Epoch 35/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1215 - accuracy: 0.9716 - dice_coef: 0.8474 - Jaccard_coef: 0.6729\n",
      "Epoch 35: val_loss did not improve from 0.11667\n",
      "637/637 [==============================] - 113s 178ms/step - loss: 0.1215 - accuracy: 0.9716 - dice_coef: 0.8474 - Jaccard_coef: 0.6729 - val_loss: 0.1233 - val_accuracy: 0.9726 - val_dice_coef: 0.8396 - val_Jaccard_coef: 0.6703\n",
      "Epoch 36/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1217 - accuracy: 0.9716 - dice_coef: 0.8472 - Jaccard_coef: 0.6727\n",
      "Epoch 36: val_loss did not improve from 0.11667\n",
      "637/637 [==============================] - 114s 178ms/step - loss: 0.1217 - accuracy: 0.9716 - dice_coef: 0.8472 - Jaccard_coef: 0.6727 - val_loss: 0.1228 - val_accuracy: 0.9727 - val_dice_coef: 0.8412 - val_Jaccard_coef: 0.6732\n",
      "Epoch 37/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1216 - accuracy: 0.9716 - dice_coef: 0.8473 - Jaccard_coef: 0.6728\n",
      "Epoch 37: val_loss did not improve from 0.11667\n",
      "637/637 [==============================] - 113s 178ms/step - loss: 0.1216 - accuracy: 0.9716 - dice_coef: 0.8473 - Jaccard_coef: 0.6728 - val_loss: 0.1188 - val_accuracy: 0.9732 - val_dice_coef: 0.8476 - val_Jaccard_coef: 0.6794\n",
      "Epoch 38/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1217 - accuracy: 0.9716 - dice_coef: 0.8472 - Jaccard_coef: 0.6726\n",
      "Epoch 38: val_loss did not improve from 0.11667\n",
      "637/637 [==============================] - 114s 178ms/step - loss: 0.1217 - accuracy: 0.9716 - dice_coef: 0.8472 - Jaccard_coef: 0.6726 - val_loss: 0.1225 - val_accuracy: 0.9727 - val_dice_coef: 0.8414 - val_Jaccard_coef: 0.6760\n",
      "Epoch 39/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1216 - accuracy: 0.9716 - dice_coef: 0.8474 - Jaccard_coef: 0.6729\n",
      "Epoch 39: val_loss did not improve from 0.11667\n",
      "637/637 [==============================] - 113s 178ms/step - loss: 0.1216 - accuracy: 0.9716 - dice_coef: 0.8474 - Jaccard_coef: 0.6729 - val_loss: 0.1186 - val_accuracy: 0.9733 - val_dice_coef: 0.8470 - val_Jaccard_coef: 0.6784\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 40/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1215 - accuracy: 0.9717 - dice_coef: 0.8475 - Jaccard_coef: 0.6730\n",
      "Epoch 40: val_loss did not improve from 0.11667\n",
      "637/637 [==============================] - 114s 178ms/step - loss: 0.1215 - accuracy: 0.9717 - dice_coef: 0.8475 - Jaccard_coef: 0.6730 - val_loss: 0.1186 - val_accuracy: 0.9733 - val_dice_coef: 0.8468 - val_Jaccard_coef: 0.6790\n",
      "Epoch 41/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1216 - accuracy: 0.9716 - dice_coef: 0.8473 - Jaccard_coef: 0.6729\n",
      "Epoch 41: val_loss did not improve from 0.11667\n",
      "637/637 [==============================] - 114s 178ms/step - loss: 0.1216 - accuracy: 0.9716 - dice_coef: 0.8473 - Jaccard_coef: 0.6729 - val_loss: 0.1313 - val_accuracy: 0.9712 - val_dice_coef: 0.8311 - val_Jaccard_coef: 0.6654\n",
      "Epoch 42/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1217 - accuracy: 0.9716 - dice_coef: 0.8472 - Jaccard_coef: 0.6727\n",
      "Epoch 42: val_loss improved from 0.11667 to 0.11591, saving model to /homes/imransharif/Mehwish/DRIVE/AV_weights/FR_UNet_RAAMSkip_BK_16_last2-3_Combined.h5\n",
      "637/637 [==============================] - 115s 181ms/step - loss: 0.1217 - accuracy: 0.9716 - dice_coef: 0.8472 - Jaccard_coef: 0.6727 - val_loss: 0.1159 - val_accuracy: 0.9737 - val_dice_coef: 0.8512 - val_Jaccard_coef: 0.6850\n",
      "Epoch 43/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1216 - accuracy: 0.9716 - dice_coef: 0.8473 - Jaccard_coef: 0.6728\n",
      "Epoch 43: val_loss did not improve from 0.11591\n",
      "637/637 [==============================] - 114s 178ms/step - loss: 0.1216 - accuracy: 0.9716 - dice_coef: 0.8473 - Jaccard_coef: 0.6728 - val_loss: 0.1175 - val_accuracy: 0.9735 - val_dice_coef: 0.8490 - val_Jaccard_coef: 0.6832\n",
      "Epoch 44/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1216 - accuracy: 0.9716 - dice_coef: 0.8473 - Jaccard_coef: 0.6728\n",
      "Epoch 44: val_loss did not improve from 0.11591\n",
      "637/637 [==============================] - 114s 178ms/step - loss: 0.1216 - accuracy: 0.9716 - dice_coef: 0.8473 - Jaccard_coef: 0.6728 - val_loss: 0.1221 - val_accuracy: 0.9726 - val_dice_coef: 0.8448 - val_Jaccard_coef: 0.6768\n",
      "Epoch 45/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1215 - accuracy: 0.9717 - dice_coef: 0.8474 - Jaccard_coef: 0.6731\n",
      "Epoch 45: val_loss improved from 0.11591 to 0.11584, saving model to /homes/imransharif/Mehwish/DRIVE/AV_weights/FR_UNet_RAAMSkip_BK_16_last2-3_Combined.h5\n",
      "637/637 [==============================] - 115s 181ms/step - loss: 0.1215 - accuracy: 0.9717 - dice_coef: 0.8474 - Jaccard_coef: 0.6731 - val_loss: 0.1158 - val_accuracy: 0.9735 - val_dice_coef: 0.8513 - val_Jaccard_coef: 0.6805\n",
      "Epoch 46/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1216 - accuracy: 0.9716 - dice_coef: 0.8473 - Jaccard_coef: 0.6728\n",
      "Epoch 46: val_loss did not improve from 0.11584\n",
      "637/637 [==============================] - 114s 178ms/step - loss: 0.1216 - accuracy: 0.9716 - dice_coef: 0.8473 - Jaccard_coef: 0.6728 - val_loss: 0.1208 - val_accuracy: 0.9730 - val_dice_coef: 0.8444 - val_Jaccard_coef: 0.6804\n",
      "Epoch 47/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1215 - accuracy: 0.9717 - dice_coef: 0.8474 - Jaccard_coef: 0.6731\n",
      "Epoch 47: val_loss did not improve from 0.11584\n",
      "637/637 [==============================] - 114s 179ms/step - loss: 0.1215 - accuracy: 0.9717 - dice_coef: 0.8474 - Jaccard_coef: 0.6731 - val_loss: 0.1224 - val_accuracy: 0.9728 - val_dice_coef: 0.8429 - val_Jaccard_coef: 0.6779\n",
      "Epoch 48/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1214 - accuracy: 0.9717 - dice_coef: 0.8475 - Jaccard_coef: 0.6732\n",
      "Epoch 48: val_loss did not improve from 0.11584\n",
      "637/637 [==============================] - 109s 172ms/step - loss: 0.1214 - accuracy: 0.9717 - dice_coef: 0.8475 - Jaccard_coef: 0.6732 - val_loss: 0.1182 - val_accuracy: 0.9734 - val_dice_coef: 0.8475 - val_Jaccard_coef: 0.6798\n",
      "Epoch 49/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1213 - accuracy: 0.9717 - dice_coef: 0.8476 - Jaccard_coef: 0.6732\n",
      "Epoch 49: val_loss did not improve from 0.11584\n",
      "637/637 [==============================] - 114s 179ms/step - loss: 0.1213 - accuracy: 0.9717 - dice_coef: 0.8476 - Jaccard_coef: 0.6732 - val_loss: 0.1221 - val_accuracy: 0.9729 - val_dice_coef: 0.8431 - val_Jaccard_coef: 0.6773\n",
      "Epoch 50/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1216 - accuracy: 0.9717 - dice_coef: 0.8473 - Jaccard_coef: 0.6729\n",
      "Epoch 50: val_loss did not improve from 0.11584\n",
      "637/637 [==============================] - 114s 178ms/step - loss: 0.1216 - accuracy: 0.9717 - dice_coef: 0.8473 - Jaccard_coef: 0.6729 - val_loss: 0.1195 - val_accuracy: 0.9732 - val_dice_coef: 0.8459 - val_Jaccard_coef: 0.6806\n",
      "Epoch 51/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1213 - accuracy: 0.9717 - dice_coef: 0.8477 - Jaccard_coef: 0.6733\n",
      "Epoch 51: val_loss did not improve from 0.11584\n",
      "637/637 [==============================] - 114s 179ms/step - loss: 0.1213 - accuracy: 0.9717 - dice_coef: 0.8477 - Jaccard_coef: 0.6733 - val_loss: 0.1196 - val_accuracy: 0.9732 - val_dice_coef: 0.8453 - val_Jaccard_coef: 0.6768\n",
      "Epoch 52/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1213 - accuracy: 0.9717 - dice_coef: 0.8477 - Jaccard_coef: 0.6733\n",
      "Epoch 52: val_loss did not improve from 0.11584\n",
      "637/637 [==============================] - 114s 179ms/step - loss: 0.1213 - accuracy: 0.9717 - dice_coef: 0.8477 - Jaccard_coef: 0.6733 - val_loss: 0.1266 - val_accuracy: 0.9721 - val_dice_coef: 0.8386 - val_Jaccard_coef: 0.6760\n",
      "Epoch 53/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1214 - accuracy: 0.9717 - dice_coef: 0.8476 - Jaccard_coef: 0.6732\n",
      "Epoch 53: val_loss did not improve from 0.11584\n",
      "637/637 [==============================] - 114s 180ms/step - loss: 0.1214 - accuracy: 0.9717 - dice_coef: 0.8476 - Jaccard_coef: 0.6732 - val_loss: 0.1181 - val_accuracy: 0.9733 - val_dice_coef: 0.8477 - val_Jaccard_coef: 0.6784\n",
      "Epoch 54/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1217 - accuracy: 0.9716 - dice_coef: 0.8472 - Jaccard_coef: 0.6727\n",
      "Epoch 54: val_loss did not improve from 0.11584\n",
      "637/637 [==============================] - 116s 182ms/step - loss: 0.1217 - accuracy: 0.9716 - dice_coef: 0.8472 - Jaccard_coef: 0.6727 - val_loss: 0.1205 - val_accuracy: 0.9730 - val_dice_coef: 0.8447 - val_Jaccard_coef: 0.6768\n",
      "Epoch 55/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1214 - accuracy: 0.9717 - dice_coef: 0.8476 - Jaccard_coef: 0.6732\n",
      "Epoch 55: val_loss did not improve from 0.11584\n",
      "637/637 [==============================] - 115s 180ms/step - loss: 0.1214 - accuracy: 0.9717 - dice_coef: 0.8476 - Jaccard_coef: 0.6732 - val_loss: 0.1207 - val_accuracy: 0.9730 - val_dice_coef: 0.8435 - val_Jaccard_coef: 0.6774\n",
      "Epoch 56/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1214 - accuracy: 0.9717 - dice_coef: 0.8475 - Jaccard_coef: 0.6733\n",
      "Epoch 56: val_loss did not improve from 0.11584\n",
      "637/637 [==============================] - 114s 179ms/step - loss: 0.1214 - accuracy: 0.9717 - dice_coef: 0.8475 - Jaccard_coef: 0.6733 - val_loss: 0.1169 - val_accuracy: 0.9735 - val_dice_coef: 0.8495 - val_Jaccard_coef: 0.6770\n",
      "Epoch 57/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1213 - accuracy: 0.9717 - dice_coef: 0.8477 - Jaccard_coef: 0.6733\n",
      "Epoch 57: val_loss did not improve from 0.11584\n",
      "637/637 [==============================] - 114s 179ms/step - loss: 0.1213 - accuracy: 0.9717 - dice_coef: 0.8477 - Jaccard_coef: 0.6733 - val_loss: 0.1177 - val_accuracy: 0.9734 - val_dice_coef: 0.8479 - val_Jaccard_coef: 0.6796\n",
      "Epoch 58/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1214 - accuracy: 0.9717 - dice_coef: 0.8475 - Jaccard_coef: 0.6732\n",
      "Epoch 58: val_loss did not improve from 0.11584\n",
      "637/637 [==============================] - 114s 178ms/step - loss: 0.1214 - accuracy: 0.9717 - dice_coef: 0.8475 - Jaccard_coef: 0.6732 - val_loss: 0.1230 - val_accuracy: 0.9727 - val_dice_coef: 0.8416 - val_Jaccard_coef: 0.6774\n",
      "Epoch 59/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1214 - accuracy: 0.9717 - dice_coef: 0.8476 - Jaccard_coef: 0.6733\n",
      "Epoch 59: val_loss did not improve from 0.11584\n",
      "637/637 [==============================] - 114s 179ms/step - loss: 0.1214 - accuracy: 0.9717 - dice_coef: 0.8476 - Jaccard_coef: 0.6733 - val_loss: 0.1172 - val_accuracy: 0.9734 - val_dice_coef: 0.8496 - val_Jaccard_coef: 0.6791\n",
      "Epoch 60/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1213 - accuracy: 0.9717 - dice_coef: 0.8477 - Jaccard_coef: 0.6734\n",
      "Epoch 60: val_loss did not improve from 0.11584\n",
      "637/637 [==============================] - 114s 179ms/step - loss: 0.1213 - accuracy: 0.9717 - dice_coef: 0.8477 - Jaccard_coef: 0.6734 - val_loss: 0.1198 - val_accuracy: 0.9731 - val_dice_coef: 0.8457 - val_Jaccard_coef: 0.6793\n",
      "Epoch 61/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1216 - accuracy: 0.9716 - dice_coef: 0.8473 - Jaccard_coef: 0.6729\n",
      "Epoch 61: val_loss did not improve from 0.11584\n",
      "637/637 [==============================] - 114s 179ms/step - loss: 0.1216 - accuracy: 0.9716 - dice_coef: 0.8473 - Jaccard_coef: 0.6729 - val_loss: 0.1162 - val_accuracy: 0.9735 - val_dice_coef: 0.8507 - val_Jaccard_coef: 0.6784\n",
      "Epoch 62/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1216 - accuracy: 0.9716 - dice_coef: 0.8473 - Jaccard_coef: 0.6727\n",
      "Epoch 62: val_loss did not improve from 0.11584\n",
      "637/637 [==============================] - 114s 179ms/step - loss: 0.1216 - accuracy: 0.9716 - dice_coef: 0.8473 - Jaccard_coef: 0.6727 - val_loss: 0.1209 - val_accuracy: 0.9730 - val_dice_coef: 0.8439 - val_Jaccard_coef: 0.6759\n",
      "Epoch 63/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1213 - accuracy: 0.9717 - dice_coef: 0.8477 - Jaccard_coef: 0.6734\n",
      "Epoch 63: val_loss did not improve from 0.11584\n",
      "637/637 [==============================] - 114s 179ms/step - loss: 0.1213 - accuracy: 0.9717 - dice_coef: 0.8477 - Jaccard_coef: 0.6734 - val_loss: 0.1218 - val_accuracy: 0.9729 - val_dice_coef: 0.8436 - val_Jaccard_coef: 0.6760\n",
      "Epoch 64/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1215 - accuracy: 0.9717 - dice_coef: 0.8475 - Jaccard_coef: 0.6732\n",
      "Epoch 64: val_loss did not improve from 0.11584\n",
      "637/637 [==============================] - 114s 179ms/step - loss: 0.1215 - accuracy: 0.9717 - dice_coef: 0.8475 - Jaccard_coef: 0.6732 - val_loss: 0.1193 - val_accuracy: 0.9732 - val_dice_coef: 0.8460 - val_Jaccard_coef: 0.6788\n",
      "Epoch 65/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1214 - accuracy: 0.9717 - dice_coef: 0.8476 - Jaccard_coef: 0.6733\n",
      "Epoch 65: val_loss did not improve from 0.11584\n",
      "637/637 [==============================] - 114s 179ms/step - loss: 0.1214 - accuracy: 0.9717 - dice_coef: 0.8476 - Jaccard_coef: 0.6733 - val_loss: 0.1242 - val_accuracy: 0.9725 - val_dice_coef: 0.8402 - val_Jaccard_coef: 0.6733\n",
      "Epoch 66/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1212 - accuracy: 0.9717 - dice_coef: 0.8478 - Jaccard_coef: 0.6737\n",
      "Epoch 66: val_loss did not improve from 0.11584\n",
      "637/637 [==============================] - 114s 180ms/step - loss: 0.1212 - accuracy: 0.9717 - dice_coef: 0.8478 - Jaccard_coef: 0.6737 - val_loss: 0.1218 - val_accuracy: 0.9729 - val_dice_coef: 0.8426 - val_Jaccard_coef: 0.6722\n",
      "Epoch 67/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1215 - accuracy: 0.9717 - dice_coef: 0.8474 - Jaccard_coef: 0.6731\n",
      "Epoch 67: val_loss did not improve from 0.11584\n",
      "637/637 [==============================] - 114s 179ms/step - loss: 0.1215 - accuracy: 0.9717 - dice_coef: 0.8474 - Jaccard_coef: 0.6731 - val_loss: 0.1220 - val_accuracy: 0.9728 - val_dice_coef: 0.8426 - val_Jaccard_coef: 0.6760\n",
      "Epoch 68/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1214 - accuracy: 0.9717 - dice_coef: 0.8476 - Jaccard_coef: 0.6733\n",
      "Epoch 68: val_loss did not improve from 0.11584\n",
      "637/637 [==============================] - 112s 176ms/step - loss: 0.1214 - accuracy: 0.9717 - dice_coef: 0.8476 - Jaccard_coef: 0.6733 - val_loss: 0.1189 - val_accuracy: 0.9732 - val_dice_coef: 0.8471 - val_Jaccard_coef: 0.6813\n",
      "Epoch 69/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1212 - accuracy: 0.9717 - dice_coef: 0.8477 - Jaccard_coef: 0.6735\n",
      "Epoch 69: val_loss did not improve from 0.11584\n",
      "637/637 [==============================] - 112s 176ms/step - loss: 0.1212 - accuracy: 0.9717 - dice_coef: 0.8477 - Jaccard_coef: 0.6735 - val_loss: 0.1196 - val_accuracy: 0.9731 - val_dice_coef: 0.8477 - val_Jaccard_coef: 0.6794\n",
      "Epoch 70/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1214 - accuracy: 0.9717 - dice_coef: 0.8476 - Jaccard_coef: 0.6733\n",
      "Epoch 70: val_loss did not improve from 0.11584\n",
      "637/637 [==============================] - 112s 176ms/step - loss: 0.1214 - accuracy: 0.9717 - dice_coef: 0.8476 - Jaccard_coef: 0.6733 - val_loss: 0.1210 - val_accuracy: 0.9729 - val_dice_coef: 0.8444 - val_Jaccard_coef: 0.6776\n",
      "Epoch 71/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1213 - accuracy: 0.9717 - dice_coef: 0.8477 - Jaccard_coef: 0.6736\n",
      "Epoch 71: val_loss did not improve from 0.11584\n",
      "637/637 [==============================] - 108s 169ms/step - loss: 0.1213 - accuracy: 0.9717 - dice_coef: 0.8477 - Jaccard_coef: 0.6736 - val_loss: 0.1208 - val_accuracy: 0.9730 - val_dice_coef: 0.8441 - val_Jaccard_coef: 0.6768\n",
      "Epoch 72/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1212 - accuracy: 0.9717 - dice_coef: 0.8478 - Jaccard_coef: 0.6736\n",
      "Epoch 72: val_loss did not improve from 0.11584\n",
      "637/637 [==============================] - 108s 170ms/step - loss: 0.1212 - accuracy: 0.9717 - dice_coef: 0.8478 - Jaccard_coef: 0.6736 - val_loss: 0.1224 - val_accuracy: 0.9728 - val_dice_coef: 0.8422 - val_Jaccard_coef: 0.6756\n",
      "Epoch 73/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1213 - accuracy: 0.9717 - dice_coef: 0.8477 - Jaccard_coef: 0.6734\n",
      "Epoch 73: val_loss did not improve from 0.11584\n",
      "637/637 [==============================] - 112s 176ms/step - loss: 0.1213 - accuracy: 0.9717 - dice_coef: 0.8477 - Jaccard_coef: 0.6734 - val_loss: 0.1199 - val_accuracy: 0.9731 - val_dice_coef: 0.8457 - val_Jaccard_coef: 0.6793\n",
      "Epoch 74/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1215 - accuracy: 0.9717 - dice_coef: 0.8475 - Jaccard_coef: 0.6732\n",
      "Epoch 74: val_loss did not improve from 0.11584\n",
      "637/637 [==============================] - 112s 176ms/step - loss: 0.1215 - accuracy: 0.9717 - dice_coef: 0.8475 - Jaccard_coef: 0.6732 - val_loss: 0.1213 - val_accuracy: 0.9728 - val_dice_coef: 0.8452 - val_Jaccard_coef: 0.6781\n",
      "Epoch 75/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1213 - accuracy: 0.9717 - dice_coef: 0.8477 - Jaccard_coef: 0.6734\n",
      "Epoch 75: val_loss did not improve from 0.11584\n",
      "637/637 [==============================] - 109s 171ms/step - loss: 0.1213 - accuracy: 0.9717 - dice_coef: 0.8477 - Jaccard_coef: 0.6734 - val_loss: 0.1192 - val_accuracy: 0.9732 - val_dice_coef: 0.8467 - val_Jaccard_coef: 0.6837\n",
      "Epoch 76/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1212 - accuracy: 0.9717 - dice_coef: 0.8478 - Jaccard_coef: 0.6738\n",
      "Epoch 76: val_loss did not improve from 0.11584\n",
      "637/637 [==============================] - 112s 176ms/step - loss: 0.1212 - accuracy: 0.9717 - dice_coef: 0.8478 - Jaccard_coef: 0.6738 - val_loss: 0.1191 - val_accuracy: 0.9732 - val_dice_coef: 0.8473 - val_Jaccard_coef: 0.6830\n",
      "Epoch 77/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1212 - accuracy: 0.9717 - dice_coef: 0.8477 - Jaccard_coef: 0.6734\n",
      "Epoch 77: val_loss did not improve from 0.11584\n",
      "637/637 [==============================] - 108s 170ms/step - loss: 0.1212 - accuracy: 0.9717 - dice_coef: 0.8477 - Jaccard_coef: 0.6734 - val_loss: 0.1174 - val_accuracy: 0.9734 - val_dice_coef: 0.8491 - val_Jaccard_coef: 0.6809\n",
      "Epoch 78/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1212 - accuracy: 0.9717 - dice_coef: 0.8478 - Jaccard_coef: 0.6736\n",
      "Epoch 78: val_loss did not improve from 0.11584\n",
      "637/637 [==============================] - 108s 170ms/step - loss: 0.1212 - accuracy: 0.9717 - dice_coef: 0.8478 - Jaccard_coef: 0.6736 - val_loss: 0.1211 - val_accuracy: 0.9729 - val_dice_coef: 0.8441 - val_Jaccard_coef: 0.6733\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 79/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1213 - accuracy: 0.9717 - dice_coef: 0.8476 - Jaccard_coef: 0.6735\n",
      "Epoch 79: val_loss did not improve from 0.11584\n",
      "637/637 [==============================] - 113s 177ms/step - loss: 0.1213 - accuracy: 0.9717 - dice_coef: 0.8476 - Jaccard_coef: 0.6735 - val_loss: 0.1185 - val_accuracy: 0.9733 - val_dice_coef: 0.8478 - val_Jaccard_coef: 0.6828\n",
      "Epoch 80/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1213 - accuracy: 0.9717 - dice_coef: 0.8477 - Jaccard_coef: 0.6736\n",
      "Epoch 80: val_loss did not improve from 0.11584\n",
      "637/637 [==============================] - 113s 178ms/step - loss: 0.1213 - accuracy: 0.9717 - dice_coef: 0.8477 - Jaccard_coef: 0.6736 - val_loss: 0.1226 - val_accuracy: 0.9727 - val_dice_coef: 0.8410 - val_Jaccard_coef: 0.6736\n",
      "Epoch 81/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1210 - accuracy: 0.9717 - dice_coef: 0.8480 - Jaccard_coef: 0.6740\n",
      "Epoch 81: val_loss did not improve from 0.11584\n",
      "637/637 [==============================] - 114s 179ms/step - loss: 0.1210 - accuracy: 0.9717 - dice_coef: 0.8480 - Jaccard_coef: 0.6740 - val_loss: 0.1171 - val_accuracy: 0.9734 - val_dice_coef: 0.8493 - val_Jaccard_coef: 0.6796\n",
      "Epoch 82/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1211 - accuracy: 0.9717 - dice_coef: 0.8479 - Jaccard_coef: 0.6738\n",
      "Epoch 82: val_loss did not improve from 0.11584\n",
      "637/637 [==============================] - 117s 184ms/step - loss: 0.1211 - accuracy: 0.9717 - dice_coef: 0.8479 - Jaccard_coef: 0.6738 - val_loss: 0.1216 - val_accuracy: 0.9729 - val_dice_coef: 0.8434 - val_Jaccard_coef: 0.6776\n",
      "Epoch 83/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1212 - accuracy: 0.9717 - dice_coef: 0.8478 - Jaccard_coef: 0.6737\n",
      "Epoch 83: val_loss did not improve from 0.11584\n",
      "637/637 [==============================] - 118s 185ms/step - loss: 0.1212 - accuracy: 0.9717 - dice_coef: 0.8478 - Jaccard_coef: 0.6737 - val_loss: 0.1212 - val_accuracy: 0.9730 - val_dice_coef: 0.8438 - val_Jaccard_coef: 0.6776\n",
      "Epoch 84/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1210 - accuracy: 0.9717 - dice_coef: 0.8480 - Jaccard_coef: 0.6741\n",
      "Epoch 84: val_loss did not improve from 0.11584\n",
      "637/637 [==============================] - 118s 185ms/step - loss: 0.1210 - accuracy: 0.9717 - dice_coef: 0.8480 - Jaccard_coef: 0.6741 - val_loss: 0.1201 - val_accuracy: 0.9731 - val_dice_coef: 0.8461 - val_Jaccard_coef: 0.6804\n",
      "Epoch 85/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1211 - accuracy: 0.9717 - dice_coef: 0.8478 - Jaccard_coef: 0.6737\n",
      "Epoch 85: val_loss did not improve from 0.11584\n",
      "637/637 [==============================] - 116s 183ms/step - loss: 0.1211 - accuracy: 0.9717 - dice_coef: 0.8478 - Jaccard_coef: 0.6737 - val_loss: 0.1243 - val_accuracy: 0.9725 - val_dice_coef: 0.8404 - val_Jaccard_coef: 0.6756\n",
      "Epoch 86/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1214 - accuracy: 0.9717 - dice_coef: 0.8476 - Jaccard_coef: 0.6734\n",
      "Epoch 86: val_loss did not improve from 0.11584\n",
      "637/637 [==============================] - 116s 182ms/step - loss: 0.1214 - accuracy: 0.9717 - dice_coef: 0.8476 - Jaccard_coef: 0.6734 - val_loss: 0.1171 - val_accuracy: 0.9735 - val_dice_coef: 0.8497 - val_Jaccard_coef: 0.6796\n",
      "Epoch 87/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1214 - accuracy: 0.9717 - dice_coef: 0.8476 - Jaccard_coef: 0.6734\n",
      "Epoch 87: val_loss did not improve from 0.11584\n",
      "637/637 [==============================] - 115s 181ms/step - loss: 0.1214 - accuracy: 0.9717 - dice_coef: 0.8476 - Jaccard_coef: 0.6734 - val_loss: 0.1168 - val_accuracy: 0.9735 - val_dice_coef: 0.8501 - val_Jaccard_coef: 0.6842\n",
      "Epoch 88/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1214 - accuracy: 0.9717 - dice_coef: 0.8476 - Jaccard_coef: 0.6734\n",
      "Epoch 88: val_loss did not improve from 0.11584\n",
      "637/637 [==============================] - 115s 180ms/step - loss: 0.1214 - accuracy: 0.9717 - dice_coef: 0.8476 - Jaccard_coef: 0.6734 - val_loss: 0.1214 - val_accuracy: 0.9728 - val_dice_coef: 0.8425 - val_Jaccard_coef: 0.6758\n",
      "Epoch 89/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1210 - accuracy: 0.9717 - dice_coef: 0.8480 - Jaccard_coef: 0.6739\n",
      "Epoch 89: val_loss did not improve from 0.11584\n",
      "637/637 [==============================] - 115s 180ms/step - loss: 0.1210 - accuracy: 0.9717 - dice_coef: 0.8480 - Jaccard_coef: 0.6739 - val_loss: 0.1222 - val_accuracy: 0.9728 - val_dice_coef: 0.8433 - val_Jaccard_coef: 0.6776\n",
      "Epoch 90/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1211 - accuracy: 0.9717 - dice_coef: 0.8479 - Jaccard_coef: 0.6737\n",
      "Epoch 90: val_loss did not improve from 0.11584\n",
      "637/637 [==============================] - 114s 180ms/step - loss: 0.1211 - accuracy: 0.9717 - dice_coef: 0.8479 - Jaccard_coef: 0.6737 - val_loss: 0.1192 - val_accuracy: 0.9732 - val_dice_coef: 0.8460 - val_Jaccard_coef: 0.6766\n",
      "Epoch 91/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1212 - accuracy: 0.9717 - dice_coef: 0.8478 - Jaccard_coef: 0.6736\n",
      "Epoch 91: val_loss did not improve from 0.11584\n",
      "637/637 [==============================] - 114s 178ms/step - loss: 0.1212 - accuracy: 0.9717 - dice_coef: 0.8478 - Jaccard_coef: 0.6736 - val_loss: 0.1170 - val_accuracy: 0.9735 - val_dice_coef: 0.8494 - val_Jaccard_coef: 0.6801\n",
      "Epoch 92/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1211 - accuracy: 0.9717 - dice_coef: 0.8479 - Jaccard_coef: 0.6740\n",
      "Epoch 92: val_loss did not improve from 0.11584\n",
      "637/637 [==============================] - 114s 179ms/step - loss: 0.1211 - accuracy: 0.9717 - dice_coef: 0.8479 - Jaccard_coef: 0.6740 - val_loss: 0.1180 - val_accuracy: 0.9734 - val_dice_coef: 0.8477 - val_Jaccard_coef: 0.6782\n",
      "Epoch 93/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1210 - accuracy: 0.9717 - dice_coef: 0.8480 - Jaccard_coef: 0.6740\n",
      "Epoch 93: val_loss did not improve from 0.11584\n",
      "637/637 [==============================] - 114s 179ms/step - loss: 0.1210 - accuracy: 0.9717 - dice_coef: 0.8480 - Jaccard_coef: 0.6740 - val_loss: 0.1234 - val_accuracy: 0.9726 - val_dice_coef: 0.8402 - val_Jaccard_coef: 0.6725\n",
      "Epoch 94/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1212 - accuracy: 0.9717 - dice_coef: 0.8478 - Jaccard_coef: 0.6738\n",
      "Epoch 94: val_loss did not improve from 0.11584\n",
      "637/637 [==============================] - 114s 179ms/step - loss: 0.1212 - accuracy: 0.9717 - dice_coef: 0.8478 - Jaccard_coef: 0.6738 - val_loss: 0.1169 - val_accuracy: 0.9735 - val_dice_coef: 0.8497 - val_Jaccard_coef: 0.6807\n",
      "Epoch 95/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1211 - accuracy: 0.9717 - dice_coef: 0.8480 - Jaccard_coef: 0.6739\n",
      "Epoch 95: val_loss did not improve from 0.11584\n",
      "637/637 [==============================] - 114s 178ms/step - loss: 0.1211 - accuracy: 0.9717 - dice_coef: 0.8480 - Jaccard_coef: 0.6739 - val_loss: 0.1219 - val_accuracy: 0.9728 - val_dice_coef: 0.8434 - val_Jaccard_coef: 0.6798\n",
      "Epoch 96/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1210 - accuracy: 0.9717 - dice_coef: 0.8480 - Jaccard_coef: 0.6739\n",
      "Epoch 96: val_loss did not improve from 0.11584\n",
      "637/637 [==============================] - 114s 178ms/step - loss: 0.1210 - accuracy: 0.9717 - dice_coef: 0.8480 - Jaccard_coef: 0.6739 - val_loss: 0.1174 - val_accuracy: 0.9734 - val_dice_coef: 0.8499 - val_Jaccard_coef: 0.6841\n",
      "Epoch 97/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1212 - accuracy: 0.9717 - dice_coef: 0.8477 - Jaccard_coef: 0.6737\n",
      "Epoch 97: val_loss did not improve from 0.11584\n",
      "637/637 [==============================] - 114s 178ms/step - loss: 0.1212 - accuracy: 0.9717 - dice_coef: 0.8477 - Jaccard_coef: 0.6737 - val_loss: 0.1193 - val_accuracy: 0.9733 - val_dice_coef: 0.8477 - val_Jaccard_coef: 0.6849\n",
      "Epoch 98/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1210 - accuracy: 0.9717 - dice_coef: 0.8480 - Jaccard_coef: 0.6740\n",
      "Epoch 98: val_loss did not improve from 0.11584\n",
      "637/637 [==============================] - 114s 178ms/step - loss: 0.1210 - accuracy: 0.9717 - dice_coef: 0.8480 - Jaccard_coef: 0.6740 - val_loss: 0.1195 - val_accuracy: 0.9731 - val_dice_coef: 0.8469 - val_Jaccard_coef: 0.6785\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 99/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1213 - accuracy: 0.9717 - dice_coef: 0.8477 - Jaccard_coef: 0.6736\n",
      "Epoch 99: val_loss did not improve from 0.11584\n",
      "637/637 [==============================] - 114s 179ms/step - loss: 0.1213 - accuracy: 0.9717 - dice_coef: 0.8477 - Jaccard_coef: 0.6736 - val_loss: 0.1179 - val_accuracy: 0.9734 - val_dice_coef: 0.8481 - val_Jaccard_coef: 0.6812\n",
      "Epoch 100/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1211 - accuracy: 0.9717 - dice_coef: 0.8479 - Jaccard_coef: 0.6739\n",
      "Epoch 100: val_loss did not improve from 0.11584\n",
      "637/637 [==============================] - 113s 178ms/step - loss: 0.1211 - accuracy: 0.9717 - dice_coef: 0.8479 - Jaccard_coef: 0.6739 - val_loss: 0.1293 - val_accuracy: 0.9717 - val_dice_coef: 0.8377 - val_Jaccard_coef: 0.6699\n",
      "Epoch 101/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1211 - accuracy: 0.9717 - dice_coef: 0.8479 - Jaccard_coef: 0.6738\n",
      "Epoch 101: val_loss did not improve from 0.11584\n",
      "637/637 [==============================] - 114s 179ms/step - loss: 0.1211 - accuracy: 0.9717 - dice_coef: 0.8479 - Jaccard_coef: 0.6738 - val_loss: 0.1229 - val_accuracy: 0.9727 - val_dice_coef: 0.8414 - val_Jaccard_coef: 0.6765\n",
      "Epoch 102/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1210 - accuracy: 0.9717 - dice_coef: 0.8480 - Jaccard_coef: 0.6740\n",
      "Epoch 102: val_loss did not improve from 0.11584\n",
      "637/637 [==============================] - 114s 178ms/step - loss: 0.1210 - accuracy: 0.9717 - dice_coef: 0.8480 - Jaccard_coef: 0.6740 - val_loss: 0.1189 - val_accuracy: 0.9732 - val_dice_coef: 0.8472 - val_Jaccard_coef: 0.6754\n",
      "Epoch 103/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1209 - accuracy: 0.9718 - dice_coef: 0.8481 - Jaccard_coef: 0.6741\n",
      "Epoch 103: val_loss did not improve from 0.11584\n",
      "637/637 [==============================] - 114s 179ms/step - loss: 0.1209 - accuracy: 0.9718 - dice_coef: 0.8481 - Jaccard_coef: 0.6741 - val_loss: 0.1226 - val_accuracy: 0.9727 - val_dice_coef: 0.8426 - val_Jaccard_coef: 0.6792\n",
      "Epoch 104/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1209 - accuracy: 0.9718 - dice_coef: 0.8481 - Jaccard_coef: 0.6744\n",
      "Epoch 104: val_loss did not improve from 0.11584\n",
      "637/637 [==============================] - 114s 178ms/step - loss: 0.1209 - accuracy: 0.9718 - dice_coef: 0.8481 - Jaccard_coef: 0.6744 - val_loss: 0.1189 - val_accuracy: 0.9733 - val_dice_coef: 0.8469 - val_Jaccard_coef: 0.6810\n",
      "Epoch 105/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1212 - accuracy: 0.9717 - dice_coef: 0.8478 - Jaccard_coef: 0.6737\n",
      "Epoch 105: val_loss improved from 0.11584 to 0.11537, saving model to /homes/imransharif/Mehwish/DRIVE/AV_weights/FR_UNet_RAAMSkip_BK_16_last2-3_Combined.h5\n",
      "637/637 [==============================] - 116s 182ms/step - loss: 0.1212 - accuracy: 0.9717 - dice_coef: 0.8478 - Jaccard_coef: 0.6737 - val_loss: 0.1154 - val_accuracy: 0.9737 - val_dice_coef: 0.8518 - val_Jaccard_coef: 0.6833\n",
      "Epoch 106/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1209 - accuracy: 0.9718 - dice_coef: 0.8482 - Jaccard_coef: 0.6743\n",
      "Epoch 106: val_loss did not improve from 0.11537\n",
      "637/637 [==============================] - 113s 178ms/step - loss: 0.1209 - accuracy: 0.9718 - dice_coef: 0.8482 - Jaccard_coef: 0.6743 - val_loss: 0.1199 - val_accuracy: 0.9732 - val_dice_coef: 0.8452 - val_Jaccard_coef: 0.6797\n",
      "Epoch 107/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1210 - accuracy: 0.9717 - dice_coef: 0.8480 - Jaccard_coef: 0.6741\n",
      "Epoch 107: val_loss did not improve from 0.11537\n",
      "637/637 [==============================] - 113s 178ms/step - loss: 0.1210 - accuracy: 0.9717 - dice_coef: 0.8480 - Jaccard_coef: 0.6741 - val_loss: 0.1235 - val_accuracy: 0.9726 - val_dice_coef: 0.8408 - val_Jaccard_coef: 0.6743\n",
      "Epoch 108/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1209 - accuracy: 0.9718 - dice_coef: 0.8481 - Jaccard_coef: 0.6743\n",
      "Epoch 108: val_loss did not improve from 0.11537\n",
      "637/637 [==============================] - 114s 178ms/step - loss: 0.1209 - accuracy: 0.9718 - dice_coef: 0.8481 - Jaccard_coef: 0.6743 - val_loss: 0.1229 - val_accuracy: 0.9728 - val_dice_coef: 0.8418 - val_Jaccard_coef: 0.6757\n",
      "Epoch 109/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1209 - accuracy: 0.9718 - dice_coef: 0.8481 - Jaccard_coef: 0.6740\n",
      "Epoch 109: val_loss did not improve from 0.11537\n",
      "637/637 [==============================] - 114s 179ms/step - loss: 0.1209 - accuracy: 0.9718 - dice_coef: 0.8481 - Jaccard_coef: 0.6740 - val_loss: 0.1186 - val_accuracy: 0.9733 - val_dice_coef: 0.8474 - val_Jaccard_coef: 0.6812\n",
      "Epoch 110/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1211 - accuracy: 0.9718 - dice_coef: 0.8478 - Jaccard_coef: 0.6740\n",
      "Epoch 110: val_loss did not improve from 0.11537\n",
      "637/637 [==============================] - 114s 179ms/step - loss: 0.1211 - accuracy: 0.9718 - dice_coef: 0.8478 - Jaccard_coef: 0.6740 - val_loss: 0.1160 - val_accuracy: 0.9737 - val_dice_coef: 0.8512 - val_Jaccard_coef: 0.6842\n",
      "Epoch 111/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1209 - accuracy: 0.9718 - dice_coef: 0.8482 - Jaccard_coef: 0.6743\n",
      "Epoch 111: val_loss did not improve from 0.11537\n",
      "637/637 [==============================] - 114s 179ms/step - loss: 0.1209 - accuracy: 0.9718 - dice_coef: 0.8482 - Jaccard_coef: 0.6743 - val_loss: 0.1214 - val_accuracy: 0.9728 - val_dice_coef: 0.8432 - val_Jaccard_coef: 0.6767\n",
      "Epoch 112/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1208 - accuracy: 0.9718 - dice_coef: 0.8482 - Jaccard_coef: 0.6743\n",
      "Epoch 112: val_loss did not improve from 0.11537\n",
      "637/637 [==============================] - 113s 178ms/step - loss: 0.1208 - accuracy: 0.9718 - dice_coef: 0.8482 - Jaccard_coef: 0.6743 - val_loss: 0.1207 - val_accuracy: 0.9730 - val_dice_coef: 0.8453 - val_Jaccard_coef: 0.6768\n",
      "Epoch 113/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1210 - accuracy: 0.9718 - dice_coef: 0.8481 - Jaccard_coef: 0.6743\n",
      "Epoch 113: val_loss did not improve from 0.11537\n",
      "637/637 [==============================] - 114s 178ms/step - loss: 0.1210 - accuracy: 0.9718 - dice_coef: 0.8481 - Jaccard_coef: 0.6743 - val_loss: 0.1170 - val_accuracy: 0.9735 - val_dice_coef: 0.8503 - val_Jaccard_coef: 0.6841\n",
      "Epoch 114/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1212 - accuracy: 0.9717 - dice_coef: 0.8478 - Jaccard_coef: 0.6738\n",
      "Epoch 114: val_loss did not improve from 0.11537\n",
      "637/637 [==============================] - 114s 179ms/step - loss: 0.1212 - accuracy: 0.9717 - dice_coef: 0.8478 - Jaccard_coef: 0.6738 - val_loss: 0.1181 - val_accuracy: 0.9732 - val_dice_coef: 0.8484 - val_Jaccard_coef: 0.6784\n",
      "Epoch 115/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1211 - accuracy: 0.9717 - dice_coef: 0.8478 - Jaccard_coef: 0.6739\n",
      "Epoch 115: val_loss did not improve from 0.11537\n",
      "637/637 [==============================] - 113s 178ms/step - loss: 0.1211 - accuracy: 0.9717 - dice_coef: 0.8478 - Jaccard_coef: 0.6739 - val_loss: 0.1186 - val_accuracy: 0.9733 - val_dice_coef: 0.8472 - val_Jaccard_coef: 0.6808\n",
      "Epoch 116/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1211 - accuracy: 0.9718 - dice_coef: 0.8480 - Jaccard_coef: 0.6740\n",
      "Epoch 116: val_loss did not improve from 0.11537\n",
      "637/637 [==============================] - 113s 178ms/step - loss: 0.1211 - accuracy: 0.9718 - dice_coef: 0.8480 - Jaccard_coef: 0.6740 - val_loss: 0.1178 - val_accuracy: 0.9735 - val_dice_coef: 0.8487 - val_Jaccard_coef: 0.6818\n",
      "Epoch 117/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1209 - accuracy: 0.9718 - dice_coef: 0.8482 - Jaccard_coef: 0.6744\n",
      "Epoch 117: val_loss did not improve from 0.11537\n",
      "637/637 [==============================] - 113s 178ms/step - loss: 0.1209 - accuracy: 0.9718 - dice_coef: 0.8482 - Jaccard_coef: 0.6744 - val_loss: 0.1158 - val_accuracy: 0.9737 - val_dice_coef: 0.8510 - val_Jaccard_coef: 0.6822\n",
      "Epoch 118/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1210 - accuracy: 0.9718 - dice_coef: 0.8480 - Jaccard_coef: 0.6742\n",
      "Epoch 118: val_loss did not improve from 0.11537\n",
      "637/637 [==============================] - 113s 178ms/step - loss: 0.1210 - accuracy: 0.9718 - dice_coef: 0.8480 - Jaccard_coef: 0.6742 - val_loss: 0.1188 - val_accuracy: 0.9733 - val_dice_coef: 0.8464 - val_Jaccard_coef: 0.6790\n",
      "Epoch 119/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1210 - accuracy: 0.9718 - dice_coef: 0.8481 - Jaccard_coef: 0.6742\n",
      "Epoch 119: val_loss did not improve from 0.11537\n",
      "637/637 [==============================] - 113s 177ms/step - loss: 0.1210 - accuracy: 0.9718 - dice_coef: 0.8481 - Jaccard_coef: 0.6742 - val_loss: 0.1235 - val_accuracy: 0.9726 - val_dice_coef: 0.8393 - val_Jaccard_coef: 0.6715\n",
      "Epoch 120/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1211 - accuracy: 0.9717 - dice_coef: 0.8478 - Jaccard_coef: 0.6737\n",
      "Epoch 120: val_loss improved from 0.11537 to 0.11517, saving model to /homes/imransharif/Mehwish/DRIVE/AV_weights/FR_UNet_RAAMSkip_BK_16_last2-3_Combined.h5\n",
      "637/637 [==============================] - 118s 185ms/step - loss: 0.1211 - accuracy: 0.9717 - dice_coef: 0.8478 - Jaccard_coef: 0.6737 - val_loss: 0.1152 - val_accuracy: 0.9737 - val_dice_coef: 0.8526 - val_Jaccard_coef: 0.6832\n",
      "Epoch 121/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1208 - accuracy: 0.9718 - dice_coef: 0.8482 - Jaccard_coef: 0.6744\n",
      "Epoch 121: val_loss did not improve from 0.11517\n",
      "637/637 [==============================] - 113s 178ms/step - loss: 0.1208 - accuracy: 0.9718 - dice_coef: 0.8482 - Jaccard_coef: 0.6744 - val_loss: 0.1179 - val_accuracy: 0.9734 - val_dice_coef: 0.8480 - val_Jaccard_coef: 0.6786\n",
      "Epoch 122/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1208 - accuracy: 0.9718 - dice_coef: 0.8482 - Jaccard_coef: 0.6744\n",
      "Epoch 122: val_loss did not improve from 0.11517\n",
      "637/637 [==============================] - 113s 178ms/step - loss: 0.1208 - accuracy: 0.9718 - dice_coef: 0.8482 - Jaccard_coef: 0.6744 - val_loss: 0.1177 - val_accuracy: 0.9735 - val_dice_coef: 0.8485 - val_Jaccard_coef: 0.6800\n",
      "Epoch 123/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1209 - accuracy: 0.9718 - dice_coef: 0.8481 - Jaccard_coef: 0.6742\n",
      "Epoch 123: val_loss did not improve from 0.11517\n",
      "637/637 [==============================] - 114s 178ms/step - loss: 0.1209 - accuracy: 0.9718 - dice_coef: 0.8481 - Jaccard_coef: 0.6742 - val_loss: 0.1193 - val_accuracy: 0.9733 - val_dice_coef: 0.8458 - val_Jaccard_coef: 0.6804\n",
      "Epoch 124/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1207 - accuracy: 0.9718 - dice_coef: 0.8484 - Jaccard_coef: 0.6748\n",
      "Epoch 124: val_loss did not improve from 0.11517\n",
      "637/637 [==============================] - 113s 178ms/step - loss: 0.1207 - accuracy: 0.9718 - dice_coef: 0.8484 - Jaccard_coef: 0.6748 - val_loss: 0.1214 - val_accuracy: 0.9729 - val_dice_coef: 0.8426 - val_Jaccard_coef: 0.6744\n",
      "Epoch 125/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1211 - accuracy: 0.9717 - dice_coef: 0.8479 - Jaccard_coef: 0.6738\n",
      "Epoch 125: val_loss did not improve from 0.11517\n",
      "637/637 [==============================] - 114s 179ms/step - loss: 0.1211 - accuracy: 0.9717 - dice_coef: 0.8479 - Jaccard_coef: 0.6738 - val_loss: 0.1209 - val_accuracy: 0.9729 - val_dice_coef: 0.8430 - val_Jaccard_coef: 0.6761\n",
      "Epoch 126/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1210 - accuracy: 0.9718 - dice_coef: 0.8480 - Jaccard_coef: 0.6741\n",
      "Epoch 126: val_loss did not improve from 0.11517\n",
      "637/637 [==============================] - 114s 179ms/step - loss: 0.1210 - accuracy: 0.9718 - dice_coef: 0.8480 - Jaccard_coef: 0.6741 - val_loss: 0.1173 - val_accuracy: 0.9734 - val_dice_coef: 0.8501 - val_Jaccard_coef: 0.6818\n",
      "Epoch 127/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1209 - accuracy: 0.9718 - dice_coef: 0.8481 - Jaccard_coef: 0.6742\n",
      "Epoch 127: val_loss did not improve from 0.11517\n",
      "637/637 [==============================] - 114s 179ms/step - loss: 0.1209 - accuracy: 0.9718 - dice_coef: 0.8481 - Jaccard_coef: 0.6742 - val_loss: 0.1154 - val_accuracy: 0.9737 - val_dice_coef: 0.8520 - val_Jaccard_coef: 0.6812\n",
      "Epoch 128/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1210 - accuracy: 0.9717 - dice_coef: 0.8480 - Jaccard_coef: 0.6740\n",
      "Epoch 128: val_loss did not improve from 0.11517\n",
      "637/637 [==============================] - 114s 179ms/step - loss: 0.1210 - accuracy: 0.9717 - dice_coef: 0.8480 - Jaccard_coef: 0.6740 - val_loss: 0.1175 - val_accuracy: 0.9734 - val_dice_coef: 0.8487 - val_Jaccard_coef: 0.6829\n",
      "Epoch 129/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1208 - accuracy: 0.9718 - dice_coef: 0.8483 - Jaccard_coef: 0.6745\n",
      "Epoch 129: val_loss did not improve from 0.11517\n",
      "637/637 [==============================] - 114s 179ms/step - loss: 0.1208 - accuracy: 0.9718 - dice_coef: 0.8483 - Jaccard_coef: 0.6745 - val_loss: 0.1174 - val_accuracy: 0.9735 - val_dice_coef: 0.8486 - val_Jaccard_coef: 0.6812\n",
      "Epoch 130/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1207 - accuracy: 0.9718 - dice_coef: 0.8483 - Jaccard_coef: 0.6745\n",
      "Epoch 130: val_loss did not improve from 0.11517\n",
      "637/637 [==============================] - 114s 179ms/step - loss: 0.1207 - accuracy: 0.9718 - dice_coef: 0.8483 - Jaccard_coef: 0.6745 - val_loss: 0.1224 - val_accuracy: 0.9728 - val_dice_coef: 0.8424 - val_Jaccard_coef: 0.6745\n",
      "Epoch 131/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1209 - accuracy: 0.9718 - dice_coef: 0.8481 - Jaccard_coef: 0.6743\n",
      "Epoch 131: val_loss did not improve from 0.11517\n",
      "637/637 [==============================] - 113s 177ms/step - loss: 0.1209 - accuracy: 0.9718 - dice_coef: 0.8481 - Jaccard_coef: 0.6743 - val_loss: 0.1197 - val_accuracy: 0.9731 - val_dice_coef: 0.8457 - val_Jaccard_coef: 0.6777\n",
      "Epoch 132/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1209 - accuracy: 0.9718 - dice_coef: 0.8480 - Jaccard_coef: 0.6742\n",
      "Epoch 132: val_loss did not improve from 0.11517\n",
      "637/637 [==============================] - 113s 178ms/step - loss: 0.1209 - accuracy: 0.9718 - dice_coef: 0.8480 - Jaccard_coef: 0.6742 - val_loss: 0.1190 - val_accuracy: 0.9732 - val_dice_coef: 0.8469 - val_Jaccard_coef: 0.6782\n",
      "Epoch 133/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1212 - accuracy: 0.9717 - dice_coef: 0.8478 - Jaccard_coef: 0.6738\n",
      "Epoch 133: val_loss did not improve from 0.11517\n",
      "637/637 [==============================] - 113s 177ms/step - loss: 0.1212 - accuracy: 0.9717 - dice_coef: 0.8478 - Jaccard_coef: 0.6738 - val_loss: 0.1181 - val_accuracy: 0.9733 - val_dice_coef: 0.8480 - val_Jaccard_coef: 0.6777\n",
      "Epoch 134/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1211 - accuracy: 0.9718 - dice_coef: 0.8479 - Jaccard_coef: 0.6740\n",
      "Epoch 134: val_loss did not improve from 0.11517\n",
      "637/637 [==============================] - 113s 177ms/step - loss: 0.1211 - accuracy: 0.9718 - dice_coef: 0.8479 - Jaccard_coef: 0.6740 - val_loss: 0.1178 - val_accuracy: 0.9735 - val_dice_coef: 0.8487 - val_Jaccard_coef: 0.6828\n",
      "Epoch 135/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1206 - accuracy: 0.9718 - dice_coef: 0.8485 - Jaccard_coef: 0.6749\n",
      "Epoch 135: val_loss did not improve from 0.11517\n",
      "637/637 [==============================] - 113s 177ms/step - loss: 0.1206 - accuracy: 0.9718 - dice_coef: 0.8485 - Jaccard_coef: 0.6749 - val_loss: 0.1192 - val_accuracy: 0.9732 - val_dice_coef: 0.8461 - val_Jaccard_coef: 0.6788\n",
      "Epoch 136/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1207 - accuracy: 0.9718 - dice_coef: 0.8483 - Jaccard_coef: 0.6747\n",
      "Epoch 136: val_loss did not improve from 0.11517\n",
      "637/637 [==============================] - 114s 178ms/step - loss: 0.1207 - accuracy: 0.9718 - dice_coef: 0.8483 - Jaccard_coef: 0.6747 - val_loss: 0.1222 - val_accuracy: 0.9728 - val_dice_coef: 0.8421 - val_Jaccard_coef: 0.6768\n",
      "Epoch 137/300\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "637/637 [==============================] - ETA: 0s - loss: 0.1208 - accuracy: 0.9718 - dice_coef: 0.8482 - Jaccard_coef: 0.6744\n",
      "Epoch 137: val_loss did not improve from 0.11517\n",
      "637/637 [==============================] - 113s 178ms/step - loss: 0.1208 - accuracy: 0.9718 - dice_coef: 0.8482 - Jaccard_coef: 0.6744 - val_loss: 0.1237 - val_accuracy: 0.9725 - val_dice_coef: 0.8410 - val_Jaccard_coef: 0.6774\n",
      "Epoch 138/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1208 - accuracy: 0.9718 - dice_coef: 0.8482 - Jaccard_coef: 0.6742\n",
      "Epoch 138: val_loss did not improve from 0.11517\n",
      "637/637 [==============================] - 114s 178ms/step - loss: 0.1208 - accuracy: 0.9718 - dice_coef: 0.8482 - Jaccard_coef: 0.6742 - val_loss: 0.1206 - val_accuracy: 0.9729 - val_dice_coef: 0.8445 - val_Jaccard_coef: 0.6750\n",
      "Epoch 139/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1209 - accuracy: 0.9718 - dice_coef: 0.8481 - Jaccard_coef: 0.6742\n",
      "Epoch 139: val_loss did not improve from 0.11517\n",
      "637/637 [==============================] - 113s 178ms/step - loss: 0.1209 - accuracy: 0.9718 - dice_coef: 0.8481 - Jaccard_coef: 0.6742 - val_loss: 0.1188 - val_accuracy: 0.9733 - val_dice_coef: 0.8471 - val_Jaccard_coef: 0.6794\n",
      "Epoch 140/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1210 - accuracy: 0.9718 - dice_coef: 0.8480 - Jaccard_coef: 0.6741\n",
      "Epoch 140: val_loss did not improve from 0.11517\n",
      "637/637 [==============================] - 113s 177ms/step - loss: 0.1210 - accuracy: 0.9718 - dice_coef: 0.8480 - Jaccard_coef: 0.6741 - val_loss: 0.1201 - val_accuracy: 0.9730 - val_dice_coef: 0.8449 - val_Jaccard_coef: 0.6756\n",
      "Epoch 141/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1207 - accuracy: 0.9718 - dice_coef: 0.8483 - Jaccard_coef: 0.6744\n",
      "Epoch 141: val_loss did not improve from 0.11517\n",
      "637/637 [==============================] - 113s 178ms/step - loss: 0.1207 - accuracy: 0.9718 - dice_coef: 0.8483 - Jaccard_coef: 0.6744 - val_loss: 0.1191 - val_accuracy: 0.9733 - val_dice_coef: 0.8458 - val_Jaccard_coef: 0.6787\n",
      "Epoch 142/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1209 - accuracy: 0.9718 - dice_coef: 0.8481 - Jaccard_coef: 0.6745\n",
      "Epoch 142: val_loss did not improve from 0.11517\n",
      "637/637 [==============================] - 114s 179ms/step - loss: 0.1209 - accuracy: 0.9718 - dice_coef: 0.8481 - Jaccard_coef: 0.6745 - val_loss: 0.1183 - val_accuracy: 0.9734 - val_dice_coef: 0.8471 - val_Jaccard_coef: 0.6765\n",
      "Epoch 143/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1208 - accuracy: 0.9718 - dice_coef: 0.8482 - Jaccard_coef: 0.6743\n",
      "Epoch 143: val_loss did not improve from 0.11517\n",
      "637/637 [==============================] - 114s 179ms/step - loss: 0.1208 - accuracy: 0.9718 - dice_coef: 0.8482 - Jaccard_coef: 0.6743 - val_loss: 0.1196 - val_accuracy: 0.9732 - val_dice_coef: 0.8459 - val_Jaccard_coef: 0.6789\n",
      "Epoch 144/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1207 - accuracy: 0.9718 - dice_coef: 0.8484 - Jaccard_coef: 0.6747\n",
      "Epoch 144: val_loss did not improve from 0.11517\n",
      "637/637 [==============================] - 114s 178ms/step - loss: 0.1207 - accuracy: 0.9718 - dice_coef: 0.8484 - Jaccard_coef: 0.6747 - val_loss: 0.1193 - val_accuracy: 0.9732 - val_dice_coef: 0.8458 - val_Jaccard_coef: 0.6766\n",
      "Epoch 145/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1207 - accuracy: 0.9718 - dice_coef: 0.8484 - Jaccard_coef: 0.6747\n",
      "Epoch 145: val_loss did not improve from 0.11517\n",
      "637/637 [==============================] - 114s 179ms/step - loss: 0.1207 - accuracy: 0.9718 - dice_coef: 0.8484 - Jaccard_coef: 0.6747 - val_loss: 0.1192 - val_accuracy: 0.9733 - val_dice_coef: 0.8459 - val_Jaccard_coef: 0.6770\n",
      "Epoch 146/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1207 - accuracy: 0.9718 - dice_coef: 0.8484 - Jaccard_coef: 0.6746\n",
      "Epoch 146: val_loss did not improve from 0.11517\n",
      "637/637 [==============================] - 113s 178ms/step - loss: 0.1207 - accuracy: 0.9718 - dice_coef: 0.8484 - Jaccard_coef: 0.6746 - val_loss: 0.1175 - val_accuracy: 0.9734 - val_dice_coef: 0.8483 - val_Jaccard_coef: 0.6768\n",
      "Epoch 147/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1208 - accuracy: 0.9718 - dice_coef: 0.8482 - Jaccard_coef: 0.6743\n",
      "Epoch 147: val_loss did not improve from 0.11517\n",
      "637/637 [==============================] - 113s 178ms/step - loss: 0.1208 - accuracy: 0.9718 - dice_coef: 0.8482 - Jaccard_coef: 0.6743 - val_loss: 0.1239 - val_accuracy: 0.9725 - val_dice_coef: 0.8404 - val_Jaccard_coef: 0.6770\n",
      "Epoch 148/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1209 - accuracy: 0.9718 - dice_coef: 0.8481 - Jaccard_coef: 0.6744\n",
      "Epoch 148: val_loss did not improve from 0.11517\n",
      "637/637 [==============================] - 113s 177ms/step - loss: 0.1209 - accuracy: 0.9718 - dice_coef: 0.8481 - Jaccard_coef: 0.6744 - val_loss: 0.1172 - val_accuracy: 0.9735 - val_dice_coef: 0.8489 - val_Jaccard_coef: 0.6795\n",
      "Epoch 149/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1207 - accuracy: 0.9718 - dice_coef: 0.8484 - Jaccard_coef: 0.6748\n",
      "Epoch 149: val_loss did not improve from 0.11517\n",
      "637/637 [==============================] - 113s 178ms/step - loss: 0.1207 - accuracy: 0.9718 - dice_coef: 0.8484 - Jaccard_coef: 0.6748 - val_loss: 0.1177 - val_accuracy: 0.9733 - val_dice_coef: 0.8482 - val_Jaccard_coef: 0.6800\n",
      "Epoch 150/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1207 - accuracy: 0.9718 - dice_coef: 0.8483 - Jaccard_coef: 0.6746\n",
      "Epoch 150: val_loss did not improve from 0.11517\n",
      "637/637 [==============================] - 113s 177ms/step - loss: 0.1207 - accuracy: 0.9718 - dice_coef: 0.8483 - Jaccard_coef: 0.6746 - val_loss: 0.1174 - val_accuracy: 0.9735 - val_dice_coef: 0.8484 - val_Jaccard_coef: 0.6799\n",
      "Epoch 151/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1208 - accuracy: 0.9718 - dice_coef: 0.8482 - Jaccard_coef: 0.6745\n",
      "Epoch 151: val_loss did not improve from 0.11517\n",
      "637/637 [==============================] - 113s 178ms/step - loss: 0.1208 - accuracy: 0.9718 - dice_coef: 0.8482 - Jaccard_coef: 0.6745 - val_loss: 0.1206 - val_accuracy: 0.9731 - val_dice_coef: 0.8437 - val_Jaccard_coef: 0.6774\n",
      "Epoch 152/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1207 - accuracy: 0.9718 - dice_coef: 0.8483 - Jaccard_coef: 0.6745\n",
      "Epoch 152: val_loss did not improve from 0.11517\n",
      "637/637 [==============================] - 113s 178ms/step - loss: 0.1207 - accuracy: 0.9718 - dice_coef: 0.8483 - Jaccard_coef: 0.6745 - val_loss: 0.1186 - val_accuracy: 0.9733 - val_dice_coef: 0.8479 - val_Jaccard_coef: 0.6816\n",
      "Epoch 153/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1205 - accuracy: 0.9718 - dice_coef: 0.8486 - Jaccard_coef: 0.6750\n",
      "Epoch 153: val_loss did not improve from 0.11517\n",
      "637/637 [==============================] - 113s 177ms/step - loss: 0.1205 - accuracy: 0.9718 - dice_coef: 0.8486 - Jaccard_coef: 0.6750 - val_loss: 0.1187 - val_accuracy: 0.9734 - val_dice_coef: 0.8476 - val_Jaccard_coef: 0.6849\n",
      "Epoch 154/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1206 - accuracy: 0.9718 - dice_coef: 0.8485 - Jaccard_coef: 0.6750\n",
      "Epoch 154: val_loss did not improve from 0.11517\n",
      "637/637 [==============================] - 113s 178ms/step - loss: 0.1206 - accuracy: 0.9718 - dice_coef: 0.8485 - Jaccard_coef: 0.6750 - val_loss: 0.1178 - val_accuracy: 0.9734 - val_dice_coef: 0.8481 - val_Jaccard_coef: 0.6752\n",
      "Epoch 155/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1207 - accuracy: 0.9718 - dice_coef: 0.8484 - Jaccard_coef: 0.6748\n",
      "Epoch 155: val_loss did not improve from 0.11517\n",
      "637/637 [==============================] - 113s 178ms/step - loss: 0.1207 - accuracy: 0.9718 - dice_coef: 0.8484 - Jaccard_coef: 0.6748 - val_loss: 0.1179 - val_accuracy: 0.9735 - val_dice_coef: 0.8485 - val_Jaccard_coef: 0.6819\n",
      "Epoch 156/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1208 - accuracy: 0.9718 - dice_coef: 0.8482 - Jaccard_coef: 0.6745\n",
      "Epoch 156: val_loss did not improve from 0.11517\n",
      "637/637 [==============================] - 113s 178ms/step - loss: 0.1208 - accuracy: 0.9718 - dice_coef: 0.8482 - Jaccard_coef: 0.6745 - val_loss: 0.1189 - val_accuracy: 0.9733 - val_dice_coef: 0.8471 - val_Jaccard_coef: 0.6832\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 157/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1209 - accuracy: 0.9718 - dice_coef: 0.8482 - Jaccard_coef: 0.6744\n",
      "Epoch 157: val_loss did not improve from 0.11517\n",
      "637/637 [==============================] - 113s 178ms/step - loss: 0.1209 - accuracy: 0.9718 - dice_coef: 0.8482 - Jaccard_coef: 0.6744 - val_loss: 0.1181 - val_accuracy: 0.9733 - val_dice_coef: 0.8486 - val_Jaccard_coef: 0.6823\n",
      "Epoch 158/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1207 - accuracy: 0.9718 - dice_coef: 0.8483 - Jaccard_coef: 0.6746\n",
      "Epoch 158: val_loss did not improve from 0.11517\n",
      "637/637 [==============================] - 113s 178ms/step - loss: 0.1207 - accuracy: 0.9718 - dice_coef: 0.8483 - Jaccard_coef: 0.6746 - val_loss: 0.1204 - val_accuracy: 0.9731 - val_dice_coef: 0.8443 - val_Jaccard_coef: 0.6749\n",
      "Epoch 159/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1206 - accuracy: 0.9718 - dice_coef: 0.8485 - Jaccard_coef: 0.6749\n",
      "Epoch 159: val_loss did not improve from 0.11517\n",
      "637/637 [==============================] - 114s 178ms/step - loss: 0.1206 - accuracy: 0.9718 - dice_coef: 0.8485 - Jaccard_coef: 0.6749 - val_loss: 0.1180 - val_accuracy: 0.9734 - val_dice_coef: 0.8478 - val_Jaccard_coef: 0.6798\n",
      "Epoch 160/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1207 - accuracy: 0.9718 - dice_coef: 0.8483 - Jaccard_coef: 0.6747\n",
      "Epoch 160: val_loss did not improve from 0.11517\n",
      "637/637 [==============================] - 113s 178ms/step - loss: 0.1207 - accuracy: 0.9718 - dice_coef: 0.8483 - Jaccard_coef: 0.6747 - val_loss: 0.1184 - val_accuracy: 0.9733 - val_dice_coef: 0.8490 - val_Jaccard_coef: 0.6802\n",
      "Epoch 161/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1206 - accuracy: 0.9718 - dice_coef: 0.8485 - Jaccard_coef: 0.6749\n",
      "Epoch 161: val_loss did not improve from 0.11517\n",
      "637/637 [==============================] - 113s 178ms/step - loss: 0.1206 - accuracy: 0.9718 - dice_coef: 0.8485 - Jaccard_coef: 0.6749 - val_loss: 0.1173 - val_accuracy: 0.9735 - val_dice_coef: 0.8498 - val_Jaccard_coef: 0.6838\n",
      "Epoch 162/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1207 - accuracy: 0.9718 - dice_coef: 0.8484 - Jaccard_coef: 0.6746\n",
      "Epoch 162: val_loss did not improve from 0.11517\n",
      "637/637 [==============================] - 113s 178ms/step - loss: 0.1207 - accuracy: 0.9718 - dice_coef: 0.8484 - Jaccard_coef: 0.6746 - val_loss: 0.1168 - val_accuracy: 0.9737 - val_dice_coef: 0.8496 - val_Jaccard_coef: 0.6830\n",
      "Epoch 163/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1207 - accuracy: 0.9718 - dice_coef: 0.8484 - Jaccard_coef: 0.6748\n",
      "Epoch 163: val_loss did not improve from 0.11517\n",
      "637/637 [==============================] - 113s 177ms/step - loss: 0.1207 - accuracy: 0.9718 - dice_coef: 0.8484 - Jaccard_coef: 0.6748 - val_loss: 0.1198 - val_accuracy: 0.9732 - val_dice_coef: 0.8463 - val_Jaccard_coef: 0.6822\n",
      "Epoch 164/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1208 - accuracy: 0.9718 - dice_coef: 0.8483 - Jaccard_coef: 0.6746\n",
      "Epoch 164: val_loss did not improve from 0.11517\n",
      "637/637 [==============================] - 113s 177ms/step - loss: 0.1208 - accuracy: 0.9718 - dice_coef: 0.8483 - Jaccard_coef: 0.6746 - val_loss: 0.1190 - val_accuracy: 0.9733 - val_dice_coef: 0.8465 - val_Jaccard_coef: 0.6808\n",
      "Epoch 165/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1209 - accuracy: 0.9718 - dice_coef: 0.8482 - Jaccard_coef: 0.6745\n",
      "Epoch 165: val_loss did not improve from 0.11517\n",
      "637/637 [==============================] - 113s 177ms/step - loss: 0.1209 - accuracy: 0.9718 - dice_coef: 0.8482 - Jaccard_coef: 0.6745 - val_loss: 0.1196 - val_accuracy: 0.9732 - val_dice_coef: 0.8454 - val_Jaccard_coef: 0.6809\n",
      "Epoch 166/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1207 - accuracy: 0.9718 - dice_coef: 0.8484 - Jaccard_coef: 0.6749\n",
      "Epoch 166: val_loss did not improve from 0.11517\n",
      "637/637 [==============================] - 113s 177ms/step - loss: 0.1207 - accuracy: 0.9718 - dice_coef: 0.8484 - Jaccard_coef: 0.6749 - val_loss: 0.1187 - val_accuracy: 0.9732 - val_dice_coef: 0.8467 - val_Jaccard_coef: 0.6742\n",
      "Epoch 167/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1207 - accuracy: 0.9718 - dice_coef: 0.8484 - Jaccard_coef: 0.6746\n",
      "Epoch 167: val_loss did not improve from 0.11517\n",
      "637/637 [==============================] - 113s 178ms/step - loss: 0.1207 - accuracy: 0.9718 - dice_coef: 0.8484 - Jaccard_coef: 0.6746 - val_loss: 0.1195 - val_accuracy: 0.9733 - val_dice_coef: 0.8456 - val_Jaccard_coef: 0.6793\n",
      "Epoch 168/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1207 - accuracy: 0.9718 - dice_coef: 0.8484 - Jaccard_coef: 0.6748\n",
      "Epoch 168: val_loss did not improve from 0.11517\n",
      "637/637 [==============================] - 113s 177ms/step - loss: 0.1207 - accuracy: 0.9718 - dice_coef: 0.8484 - Jaccard_coef: 0.6748 - val_loss: 0.1183 - val_accuracy: 0.9734 - val_dice_coef: 0.8475 - val_Jaccard_coef: 0.6822\n",
      "Epoch 169/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1208 - accuracy: 0.9718 - dice_coef: 0.8483 - Jaccard_coef: 0.6746\n",
      "Epoch 169: val_loss did not improve from 0.11517\n",
      "637/637 [==============================] - 113s 178ms/step - loss: 0.1208 - accuracy: 0.9718 - dice_coef: 0.8483 - Jaccard_coef: 0.6746 - val_loss: 0.1189 - val_accuracy: 0.9733 - val_dice_coef: 0.8467 - val_Jaccard_coef: 0.6792\n",
      "Epoch 170/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1207 - accuracy: 0.9718 - dice_coef: 0.8484 - Jaccard_coef: 0.6748\n",
      "Epoch 170: val_loss did not improve from 0.11517\n",
      "637/637 [==============================] - 113s 178ms/step - loss: 0.1207 - accuracy: 0.9718 - dice_coef: 0.8484 - Jaccard_coef: 0.6748 - val_loss: 0.1194 - val_accuracy: 0.9732 - val_dice_coef: 0.8462 - val_Jaccard_coef: 0.6792\n",
      "Epoch 171/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1208 - accuracy: 0.9718 - dice_coef: 0.8483 - Jaccard_coef: 0.6747\n",
      "Epoch 171: val_loss did not improve from 0.11517\n",
      "637/637 [==============================] - 113s 177ms/step - loss: 0.1208 - accuracy: 0.9718 - dice_coef: 0.8483 - Jaccard_coef: 0.6747 - val_loss: 0.1223 - val_accuracy: 0.9728 - val_dice_coef: 0.8415 - val_Jaccard_coef: 0.6742\n",
      "Epoch 172/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1206 - accuracy: 0.9718 - dice_coef: 0.8485 - Jaccard_coef: 0.6750\n",
      "Epoch 172: val_loss did not improve from 0.11517\n",
      "637/637 [==============================] - 113s 177ms/step - loss: 0.1206 - accuracy: 0.9718 - dice_coef: 0.8485 - Jaccard_coef: 0.6750 - val_loss: 0.1172 - val_accuracy: 0.9736 - val_dice_coef: 0.8489 - val_Jaccard_coef: 0.6804\n",
      "Epoch 173/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1209 - accuracy: 0.9718 - dice_coef: 0.8482 - Jaccard_coef: 0.6745\n",
      "Epoch 173: val_loss did not improve from 0.11517\n",
      "637/637 [==============================] - 113s 177ms/step - loss: 0.1209 - accuracy: 0.9718 - dice_coef: 0.8482 - Jaccard_coef: 0.6745 - val_loss: 0.1205 - val_accuracy: 0.9731 - val_dice_coef: 0.8437 - val_Jaccard_coef: 0.6773\n",
      "Epoch 174/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1205 - accuracy: 0.9718 - dice_coef: 0.8486 - Jaccard_coef: 0.6750\n",
      "Epoch 174: val_loss did not improve from 0.11517\n",
      "637/637 [==============================] - 113s 178ms/step - loss: 0.1205 - accuracy: 0.9718 - dice_coef: 0.8486 - Jaccard_coef: 0.6750 - val_loss: 0.1211 - val_accuracy: 0.9730 - val_dice_coef: 0.8451 - val_Jaccard_coef: 0.6805\n",
      "Epoch 175/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1206 - accuracy: 0.9718 - dice_coef: 0.8485 - Jaccard_coef: 0.6751\n",
      "Epoch 175: val_loss did not improve from 0.11517\n",
      "637/637 [==============================] - 113s 178ms/step - loss: 0.1206 - accuracy: 0.9718 - dice_coef: 0.8485 - Jaccard_coef: 0.6751 - val_loss: 0.1209 - val_accuracy: 0.9729 - val_dice_coef: 0.8430 - val_Jaccard_coef: 0.6759\n",
      "Epoch 176/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1206 - accuracy: 0.9719 - dice_coef: 0.8485 - Jaccard_coef: 0.6748\n",
      "Epoch 176: val_loss did not improve from 0.11517\n",
      "637/637 [==============================] - 113s 177ms/step - loss: 0.1206 - accuracy: 0.9719 - dice_coef: 0.8485 - Jaccard_coef: 0.6748 - val_loss: 0.1192 - val_accuracy: 0.9732 - val_dice_coef: 0.8466 - val_Jaccard_coef: 0.6830\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 177/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1207 - accuracy: 0.9718 - dice_coef: 0.8484 - Jaccard_coef: 0.6748\n",
      "Epoch 177: val_loss did not improve from 0.11517\n",
      "637/637 [==============================] - 113s 177ms/step - loss: 0.1207 - accuracy: 0.9718 - dice_coef: 0.8484 - Jaccard_coef: 0.6748 - val_loss: 0.1195 - val_accuracy: 0.9732 - val_dice_coef: 0.8458 - val_Jaccard_coef: 0.6811\n",
      "Epoch 178/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1209 - accuracy: 0.9718 - dice_coef: 0.8482 - Jaccard_coef: 0.6744\n",
      "Epoch 178: val_loss did not improve from 0.11517\n",
      "637/637 [==============================] - 113s 178ms/step - loss: 0.1209 - accuracy: 0.9718 - dice_coef: 0.8482 - Jaccard_coef: 0.6744 - val_loss: 0.1172 - val_accuracy: 0.9735 - val_dice_coef: 0.8502 - val_Jaccard_coef: 0.6848\n",
      "Epoch 179/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1206 - accuracy: 0.9718 - dice_coef: 0.8485 - Jaccard_coef: 0.6750\n",
      "Epoch 179: val_loss did not improve from 0.11517\n",
      "637/637 [==============================] - 113s 178ms/step - loss: 0.1206 - accuracy: 0.9718 - dice_coef: 0.8485 - Jaccard_coef: 0.6750 - val_loss: 0.1179 - val_accuracy: 0.9734 - val_dice_coef: 0.8483 - val_Jaccard_coef: 0.6806\n",
      "Epoch 180/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1206 - accuracy: 0.9718 - dice_coef: 0.8485 - Jaccard_coef: 0.6749\n",
      "Epoch 180: val_loss did not improve from 0.11517\n",
      "637/637 [==============================] - 113s 178ms/step - loss: 0.1206 - accuracy: 0.9718 - dice_coef: 0.8485 - Jaccard_coef: 0.6749 - val_loss: 0.1178 - val_accuracy: 0.9734 - val_dice_coef: 0.8490 - val_Jaccard_coef: 0.6795\n",
      "Epoch 181/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1205 - accuracy: 0.9718 - dice_coef: 0.8486 - Jaccard_coef: 0.6752\n",
      "Epoch 181: val_loss did not improve from 0.11517\n",
      "637/637 [==============================] - 114s 178ms/step - loss: 0.1205 - accuracy: 0.9718 - dice_coef: 0.8486 - Jaccard_coef: 0.6752 - val_loss: 0.1198 - val_accuracy: 0.9732 - val_dice_coef: 0.8457 - val_Jaccard_coef: 0.6775\n",
      "Epoch 182/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1206 - accuracy: 0.9718 - dice_coef: 0.8484 - Jaccard_coef: 0.6747\n",
      "Epoch 182: val_loss did not improve from 0.11517\n",
      "637/637 [==============================] - 113s 178ms/step - loss: 0.1206 - accuracy: 0.9718 - dice_coef: 0.8484 - Jaccard_coef: 0.6747 - val_loss: 0.1221 - val_accuracy: 0.9728 - val_dice_coef: 0.8414 - val_Jaccard_coef: 0.6734\n",
      "Epoch 183/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1207 - accuracy: 0.9718 - dice_coef: 0.8484 - Jaccard_coef: 0.6749\n",
      "Epoch 183: val_loss did not improve from 0.11517\n",
      "637/637 [==============================] - 113s 177ms/step - loss: 0.1207 - accuracy: 0.9718 - dice_coef: 0.8484 - Jaccard_coef: 0.6749 - val_loss: 0.1202 - val_accuracy: 0.9731 - val_dice_coef: 0.8447 - val_Jaccard_coef: 0.6774\n",
      "Epoch 184/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1205 - accuracy: 0.9719 - dice_coef: 0.8486 - Jaccard_coef: 0.6751\n",
      "Epoch 184: val_loss did not improve from 0.11517\n",
      "637/637 [==============================] - 113s 177ms/step - loss: 0.1205 - accuracy: 0.9719 - dice_coef: 0.8486 - Jaccard_coef: 0.6751 - val_loss: 0.1181 - val_accuracy: 0.9734 - val_dice_coef: 0.8483 - val_Jaccard_coef: 0.6816\n",
      "Epoch 185/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1205 - accuracy: 0.9718 - dice_coef: 0.8486 - Jaccard_coef: 0.6751\n",
      "Epoch 185: val_loss did not improve from 0.11517\n",
      "637/637 [==============================] - 113s 177ms/step - loss: 0.1205 - accuracy: 0.9718 - dice_coef: 0.8486 - Jaccard_coef: 0.6751 - val_loss: 0.1214 - val_accuracy: 0.9730 - val_dice_coef: 0.8438 - val_Jaccard_coef: 0.6789\n",
      "Epoch 186/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1205 - accuracy: 0.9718 - dice_coef: 0.8485 - Jaccard_coef: 0.6750\n",
      "Epoch 186: val_loss did not improve from 0.11517\n",
      "637/637 [==============================] - 113s 177ms/step - loss: 0.1205 - accuracy: 0.9718 - dice_coef: 0.8485 - Jaccard_coef: 0.6750 - val_loss: 0.1168 - val_accuracy: 0.9735 - val_dice_coef: 0.8511 - val_Jaccard_coef: 0.6859\n",
      "Epoch 187/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1205 - accuracy: 0.9718 - dice_coef: 0.8486 - Jaccard_coef: 0.6751\n",
      "Epoch 187: val_loss did not improve from 0.11517\n",
      "637/637 [==============================] - 113s 178ms/step - loss: 0.1205 - accuracy: 0.9718 - dice_coef: 0.8486 - Jaccard_coef: 0.6751 - val_loss: 0.1179 - val_accuracy: 0.9734 - val_dice_coef: 0.8480 - val_Jaccard_coef: 0.6768\n",
      "Epoch 188/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1206 - accuracy: 0.9718 - dice_coef: 0.8484 - Jaccard_coef: 0.6748\n",
      "Epoch 188: val_loss did not improve from 0.11517\n",
      "637/637 [==============================] - 113s 178ms/step - loss: 0.1206 - accuracy: 0.9718 - dice_coef: 0.8484 - Jaccard_coef: 0.6748 - val_loss: 0.1199 - val_accuracy: 0.9731 - val_dice_coef: 0.8472 - val_Jaccard_coef: 0.6822\n",
      "Epoch 189/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1203 - accuracy: 0.9719 - dice_coef: 0.8488 - Jaccard_coef: 0.6755\n",
      "Epoch 189: val_loss did not improve from 0.11517\n",
      "637/637 [==============================] - 114s 178ms/step - loss: 0.1203 - accuracy: 0.9719 - dice_coef: 0.8488 - Jaccard_coef: 0.6755 - val_loss: 0.1158 - val_accuracy: 0.9737 - val_dice_coef: 0.8512 - val_Jaccard_coef: 0.6833\n",
      "Epoch 190/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1205 - accuracy: 0.9719 - dice_coef: 0.8486 - Jaccard_coef: 0.6751\n",
      "Epoch 190: val_loss did not improve from 0.11517\n",
      "637/637 [==============================] - 113s 178ms/step - loss: 0.1205 - accuracy: 0.9719 - dice_coef: 0.8486 - Jaccard_coef: 0.6751 - val_loss: 0.1190 - val_accuracy: 0.9733 - val_dice_coef: 0.8458 - val_Jaccard_coef: 0.6796\n",
      "Epoch 191/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1205 - accuracy: 0.9719 - dice_coef: 0.8486 - Jaccard_coef: 0.6751\n",
      "Epoch 191: val_loss did not improve from 0.11517\n",
      "637/637 [==============================] - 114s 179ms/step - loss: 0.1205 - accuracy: 0.9719 - dice_coef: 0.8486 - Jaccard_coef: 0.6751 - val_loss: 0.1169 - val_accuracy: 0.9735 - val_dice_coef: 0.8491 - val_Jaccard_coef: 0.6761\n",
      "Epoch 192/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1206 - accuracy: 0.9718 - dice_coef: 0.8485 - Jaccard_coef: 0.6749\n",
      "Epoch 192: val_loss improved from 0.11517 to 0.11490, saving model to /homes/imransharif/Mehwish/DRIVE/AV_weights/FR_UNet_RAAMSkip_BK_16_last2-3_Combined.h5\n",
      "637/637 [==============================] - 115s 181ms/step - loss: 0.1206 - accuracy: 0.9718 - dice_coef: 0.8485 - Jaccard_coef: 0.6749 - val_loss: 0.1149 - val_accuracy: 0.9739 - val_dice_coef: 0.8521 - val_Jaccard_coef: 0.6822\n",
      "Epoch 193/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1206 - accuracy: 0.9719 - dice_coef: 0.8485 - Jaccard_coef: 0.6750\n",
      "Epoch 193: val_loss did not improve from 0.11490\n",
      "637/637 [==============================] - 113s 178ms/step - loss: 0.1206 - accuracy: 0.9719 - dice_coef: 0.8485 - Jaccard_coef: 0.6750 - val_loss: 0.1152 - val_accuracy: 0.9737 - val_dice_coef: 0.8523 - val_Jaccard_coef: 0.6832\n",
      "Epoch 194/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1203 - accuracy: 0.9719 - dice_coef: 0.8488 - Jaccard_coef: 0.6754\n",
      "Epoch 194: val_loss did not improve from 0.11490\n",
      "637/637 [==============================] - 114s 179ms/step - loss: 0.1203 - accuracy: 0.9719 - dice_coef: 0.8488 - Jaccard_coef: 0.6754 - val_loss: 0.1157 - val_accuracy: 0.9738 - val_dice_coef: 0.8510 - val_Jaccard_coef: 0.6846\n",
      "Epoch 195/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1205 - accuracy: 0.9719 - dice_coef: 0.8486 - Jaccard_coef: 0.6750\n",
      "Epoch 195: val_loss improved from 0.11490 to 0.11481, saving model to /homes/imransharif/Mehwish/DRIVE/AV_weights/FR_UNet_RAAMSkip_BK_16_last2-3_Combined.h5\n",
      "637/637 [==============================] - 115s 180ms/step - loss: 0.1205 - accuracy: 0.9719 - dice_coef: 0.8486 - Jaccard_coef: 0.6750 - val_loss: 0.1148 - val_accuracy: 0.9737 - val_dice_coef: 0.8531 - val_Jaccard_coef: 0.6797\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 196/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1205 - accuracy: 0.9718 - dice_coef: 0.8486 - Jaccard_coef: 0.6750\n",
      "Epoch 196: val_loss did not improve from 0.11481\n",
      "637/637 [==============================] - 114s 179ms/step - loss: 0.1205 - accuracy: 0.9718 - dice_coef: 0.8486 - Jaccard_coef: 0.6750 - val_loss: 0.1168 - val_accuracy: 0.9735 - val_dice_coef: 0.8500 - val_Jaccard_coef: 0.6797\n",
      "Epoch 197/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1206 - accuracy: 0.9719 - dice_coef: 0.8485 - Jaccard_coef: 0.6750\n",
      "Epoch 197: val_loss did not improve from 0.11481\n",
      "637/637 [==============================] - 113s 178ms/step - loss: 0.1206 - accuracy: 0.9719 - dice_coef: 0.8485 - Jaccard_coef: 0.6750 - val_loss: 0.1197 - val_accuracy: 0.9733 - val_dice_coef: 0.8462 - val_Jaccard_coef: 0.6821\n",
      "Epoch 198/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1202 - accuracy: 0.9719 - dice_coef: 0.8489 - Jaccard_coef: 0.6757\n",
      "Epoch 198: val_loss did not improve from 0.11481\n",
      "637/637 [==============================] - 113s 178ms/step - loss: 0.1202 - accuracy: 0.9719 - dice_coef: 0.8489 - Jaccard_coef: 0.6757 - val_loss: 0.1209 - val_accuracy: 0.9729 - val_dice_coef: 0.8458 - val_Jaccard_coef: 0.6782\n",
      "Epoch 199/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1205 - accuracy: 0.9718 - dice_coef: 0.8486 - Jaccard_coef: 0.6751\n",
      "Epoch 199: val_loss did not improve from 0.11481\n",
      "637/637 [==============================] - 113s 178ms/step - loss: 0.1205 - accuracy: 0.9718 - dice_coef: 0.8486 - Jaccard_coef: 0.6751 - val_loss: 0.1185 - val_accuracy: 0.9733 - val_dice_coef: 0.8480 - val_Jaccard_coef: 0.6808\n",
      "Epoch 200/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1205 - accuracy: 0.9719 - dice_coef: 0.8486 - Jaccard_coef: 0.6752\n",
      "Epoch 200: val_loss did not improve from 0.11481\n",
      "637/637 [==============================] - 113s 178ms/step - loss: 0.1205 - accuracy: 0.9719 - dice_coef: 0.8486 - Jaccard_coef: 0.6752 - val_loss: 0.1174 - val_accuracy: 0.9733 - val_dice_coef: 0.8490 - val_Jaccard_coef: 0.6743\n",
      "Epoch 201/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1210 - accuracy: 0.9718 - dice_coef: 0.8480 - Jaccard_coef: 0.6743\n",
      "Epoch 201: val_loss improved from 0.11481 to 0.11474, saving model to /homes/imransharif/Mehwish/DRIVE/AV_weights/FR_UNet_RAAMSkip_BK_16_last2-3_Combined.h5\n",
      "637/637 [==============================] - 115s 181ms/step - loss: 0.1210 - accuracy: 0.9718 - dice_coef: 0.8480 - Jaccard_coef: 0.6743 - val_loss: 0.1147 - val_accuracy: 0.9739 - val_dice_coef: 0.8526 - val_Jaccard_coef: 0.6848\n",
      "Epoch 202/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1205 - accuracy: 0.9719 - dice_coef: 0.8487 - Jaccard_coef: 0.6753\n",
      "Epoch 202: val_loss did not improve from 0.11474\n",
      "637/637 [==============================] - 113s 178ms/step - loss: 0.1205 - accuracy: 0.9719 - dice_coef: 0.8487 - Jaccard_coef: 0.6753 - val_loss: 0.1204 - val_accuracy: 0.9731 - val_dice_coef: 0.8448 - val_Jaccard_coef: 0.6794\n",
      "Epoch 203/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1203 - accuracy: 0.9719 - dice_coef: 0.8488 - Jaccard_coef: 0.6755\n",
      "Epoch 203: val_loss did not improve from 0.11474\n",
      "637/637 [==============================] - 113s 178ms/step - loss: 0.1203 - accuracy: 0.9719 - dice_coef: 0.8488 - Jaccard_coef: 0.6755 - val_loss: 0.1159 - val_accuracy: 0.9737 - val_dice_coef: 0.8509 - val_Jaccard_coef: 0.6805\n",
      "Epoch 204/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1204 - accuracy: 0.9719 - dice_coef: 0.8487 - Jaccard_coef: 0.6753\n",
      "Epoch 204: val_loss did not improve from 0.11474\n",
      "637/637 [==============================] - 113s 177ms/step - loss: 0.1204 - accuracy: 0.9719 - dice_coef: 0.8487 - Jaccard_coef: 0.6753 - val_loss: 0.1163 - val_accuracy: 0.9737 - val_dice_coef: 0.8512 - val_Jaccard_coef: 0.6830\n",
      "Epoch 205/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1205 - accuracy: 0.9718 - dice_coef: 0.8486 - Jaccard_coef: 0.6750\n",
      "Epoch 205: val_loss did not improve from 0.11474\n",
      "637/637 [==============================] - 113s 178ms/step - loss: 0.1205 - accuracy: 0.9718 - dice_coef: 0.8486 - Jaccard_coef: 0.6750 - val_loss: 0.1195 - val_accuracy: 0.9732 - val_dice_coef: 0.8461 - val_Jaccard_coef: 0.6800\n",
      "Epoch 206/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1205 - accuracy: 0.9718 - dice_coef: 0.8485 - Jaccard_coef: 0.6753\n",
      "Epoch 206: val_loss did not improve from 0.11474\n",
      "637/637 [==============================] - 113s 177ms/step - loss: 0.1205 - accuracy: 0.9718 - dice_coef: 0.8485 - Jaccard_coef: 0.6753 - val_loss: 0.1155 - val_accuracy: 0.9737 - val_dice_coef: 0.8512 - val_Jaccard_coef: 0.6816\n",
      "Epoch 207/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1203 - accuracy: 0.9719 - dice_coef: 0.8488 - Jaccard_coef: 0.6755\n",
      "Epoch 207: val_loss did not improve from 0.11474\n",
      "637/637 [==============================] - 113s 178ms/step - loss: 0.1203 - accuracy: 0.9719 - dice_coef: 0.8488 - Jaccard_coef: 0.6755 - val_loss: 0.1168 - val_accuracy: 0.9736 - val_dice_coef: 0.8501 - val_Jaccard_coef: 0.6861\n",
      "Epoch 208/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1205 - accuracy: 0.9719 - dice_coef: 0.8486 - Jaccard_coef: 0.6752\n",
      "Epoch 208: val_loss did not improve from 0.11474\n",
      "637/637 [==============================] - 113s 177ms/step - loss: 0.1205 - accuracy: 0.9719 - dice_coef: 0.8486 - Jaccard_coef: 0.6752 - val_loss: 0.1195 - val_accuracy: 0.9731 - val_dice_coef: 0.8473 - val_Jaccard_coef: 0.6770\n",
      "Epoch 209/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1203 - accuracy: 0.9719 - dice_coef: 0.8489 - Jaccard_coef: 0.6755\n",
      "Epoch 209: val_loss did not improve from 0.11474\n",
      "637/637 [==============================] - 113s 178ms/step - loss: 0.1203 - accuracy: 0.9719 - dice_coef: 0.8489 - Jaccard_coef: 0.6755 - val_loss: 0.1212 - val_accuracy: 0.9729 - val_dice_coef: 0.8438 - val_Jaccard_coef: 0.6772\n",
      "Epoch 210/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1205 - accuracy: 0.9718 - dice_coef: 0.8486 - Jaccard_coef: 0.6752\n",
      "Epoch 210: val_loss did not improve from 0.11474\n",
      "637/637 [==============================] - 114s 179ms/step - loss: 0.1205 - accuracy: 0.9718 - dice_coef: 0.8486 - Jaccard_coef: 0.6752 - val_loss: 0.1181 - val_accuracy: 0.9734 - val_dice_coef: 0.8480 - val_Jaccard_coef: 0.6811\n",
      "Epoch 211/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1204 - accuracy: 0.9718 - dice_coef: 0.8487 - Jaccard_coef: 0.6753\n",
      "Epoch 211: val_loss did not improve from 0.11474\n",
      "637/637 [==============================] - 113s 178ms/step - loss: 0.1204 - accuracy: 0.9718 - dice_coef: 0.8487 - Jaccard_coef: 0.6753 - val_loss: 0.1191 - val_accuracy: 0.9732 - val_dice_coef: 0.8463 - val_Jaccard_coef: 0.6789\n",
      "Epoch 212/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1204 - accuracy: 0.9719 - dice_coef: 0.8488 - Jaccard_coef: 0.6753\n",
      "Epoch 212: val_loss did not improve from 0.11474\n",
      "637/637 [==============================] - 113s 177ms/step - loss: 0.1204 - accuracy: 0.9719 - dice_coef: 0.8488 - Jaccard_coef: 0.6753 - val_loss: 0.1159 - val_accuracy: 0.9735 - val_dice_coef: 0.8516 - val_Jaccard_coef: 0.6835\n",
      "Epoch 213/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1204 - accuracy: 0.9719 - dice_coef: 0.8487 - Jaccard_coef: 0.6754\n",
      "Epoch 213: val_loss did not improve from 0.11474\n",
      "637/637 [==============================] - 113s 177ms/step - loss: 0.1204 - accuracy: 0.9719 - dice_coef: 0.8487 - Jaccard_coef: 0.6754 - val_loss: 0.1183 - val_accuracy: 0.9734 - val_dice_coef: 0.8484 - val_Jaccard_coef: 0.6830\n",
      "Epoch 214/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1205 - accuracy: 0.9719 - dice_coef: 0.8486 - Jaccard_coef: 0.6752\n",
      "Epoch 214: val_loss did not improve from 0.11474\n",
      "637/637 [==============================] - 112s 176ms/step - loss: 0.1205 - accuracy: 0.9719 - dice_coef: 0.8486 - Jaccard_coef: 0.6752 - val_loss: 0.1182 - val_accuracy: 0.9734 - val_dice_coef: 0.8480 - val_Jaccard_coef: 0.6823\n",
      "Epoch 215/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1204 - accuracy: 0.9719 - dice_coef: 0.8487 - Jaccard_coef: 0.6753\n",
      "Epoch 215: val_loss did not improve from 0.11474\n",
      "637/637 [==============================] - 113s 177ms/step - loss: 0.1204 - accuracy: 0.9719 - dice_coef: 0.8487 - Jaccard_coef: 0.6753 - val_loss: 0.1180 - val_accuracy: 0.9734 - val_dice_coef: 0.8474 - val_Jaccard_coef: 0.6807\n",
      "Epoch 216/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1205 - accuracy: 0.9719 - dice_coef: 0.8487 - Jaccard_coef: 0.6752\n",
      "Epoch 216: val_loss did not improve from 0.11474\n",
      "637/637 [==============================] - 112s 177ms/step - loss: 0.1205 - accuracy: 0.9719 - dice_coef: 0.8487 - Jaccard_coef: 0.6752 - val_loss: 0.1161 - val_accuracy: 0.9737 - val_dice_coef: 0.8507 - val_Jaccard_coef: 0.6817\n",
      "Epoch 217/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1205 - accuracy: 0.9719 - dice_coef: 0.8486 - Jaccard_coef: 0.6752\n",
      "Epoch 217: val_loss did not improve from 0.11474\n",
      "637/637 [==============================] - 113s 177ms/step - loss: 0.1205 - accuracy: 0.9719 - dice_coef: 0.8486 - Jaccard_coef: 0.6752 - val_loss: 0.1256 - val_accuracy: 0.9724 - val_dice_coef: 0.8380 - val_Jaccard_coef: 0.6744\n",
      "Epoch 218/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1204 - accuracy: 0.9719 - dice_coef: 0.8488 - Jaccard_coef: 0.6754\n",
      "Epoch 218: val_loss did not improve from 0.11474\n",
      "637/637 [==============================] - 113s 177ms/step - loss: 0.1204 - accuracy: 0.9719 - dice_coef: 0.8488 - Jaccard_coef: 0.6754 - val_loss: 0.1187 - val_accuracy: 0.9733 - val_dice_coef: 0.8463 - val_Jaccard_coef: 0.6767\n",
      "Epoch 219/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1205 - accuracy: 0.9719 - dice_coef: 0.8486 - Jaccard_coef: 0.6754\n",
      "Epoch 219: val_loss did not improve from 0.11474\n",
      "637/637 [==============================] - 112s 176ms/step - loss: 0.1205 - accuracy: 0.9719 - dice_coef: 0.8486 - Jaccard_coef: 0.6754 - val_loss: 0.1191 - val_accuracy: 0.9733 - val_dice_coef: 0.8457 - val_Jaccard_coef: 0.6792\n",
      "Epoch 220/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1203 - accuracy: 0.9719 - dice_coef: 0.8488 - Jaccard_coef: 0.6754\n",
      "Epoch 220: val_loss did not improve from 0.11474\n",
      "637/637 [==============================] - 113s 177ms/step - loss: 0.1203 - accuracy: 0.9719 - dice_coef: 0.8488 - Jaccard_coef: 0.6754 - val_loss: 0.1171 - val_accuracy: 0.9736 - val_dice_coef: 0.8492 - val_Jaccard_coef: 0.6840\n",
      "Epoch 221/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1203 - accuracy: 0.9719 - dice_coef: 0.8488 - Jaccard_coef: 0.6755\n",
      "Epoch 221: val_loss did not improve from 0.11474\n",
      "637/637 [==============================] - 112s 176ms/step - loss: 0.1203 - accuracy: 0.9719 - dice_coef: 0.8488 - Jaccard_coef: 0.6755 - val_loss: 0.1204 - val_accuracy: 0.9731 - val_dice_coef: 0.8443 - val_Jaccard_coef: 0.6798\n",
      "Epoch 222/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1204 - accuracy: 0.9719 - dice_coef: 0.8488 - Jaccard_coef: 0.6756\n",
      "Epoch 222: val_loss did not improve from 0.11474\n",
      "637/637 [==============================] - 112s 176ms/step - loss: 0.1204 - accuracy: 0.9719 - dice_coef: 0.8488 - Jaccard_coef: 0.6756 - val_loss: 0.1194 - val_accuracy: 0.9732 - val_dice_coef: 0.8448 - val_Jaccard_coef: 0.6778\n",
      "Epoch 223/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1203 - accuracy: 0.9719 - dice_coef: 0.8488 - Jaccard_coef: 0.6756\n",
      "Epoch 223: val_loss did not improve from 0.11474\n",
      "637/637 [==============================] - 112s 176ms/step - loss: 0.1203 - accuracy: 0.9719 - dice_coef: 0.8488 - Jaccard_coef: 0.6756 - val_loss: 0.1188 - val_accuracy: 0.9733 - val_dice_coef: 0.8467 - val_Jaccard_coef: 0.6793\n",
      "Epoch 224/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1206 - accuracy: 0.9719 - dice_coef: 0.8486 - Jaccard_coef: 0.6751\n",
      "Epoch 224: val_loss did not improve from 0.11474\n",
      "637/637 [==============================] - 112s 176ms/step - loss: 0.1206 - accuracy: 0.9719 - dice_coef: 0.8486 - Jaccard_coef: 0.6751 - val_loss: 0.1197 - val_accuracy: 0.9731 - val_dice_coef: 0.8463 - val_Jaccard_coef: 0.6763\n",
      "Epoch 225/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1202 - accuracy: 0.9719 - dice_coef: 0.8490 - Jaccard_coef: 0.6757\n",
      "Epoch 225: val_loss did not improve from 0.11474\n",
      "637/637 [==============================] - 112s 176ms/step - loss: 0.1202 - accuracy: 0.9719 - dice_coef: 0.8490 - Jaccard_coef: 0.6757 - val_loss: 0.1167 - val_accuracy: 0.9737 - val_dice_coef: 0.8498 - val_Jaccard_coef: 0.6844\n",
      "Epoch 226/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1202 - accuracy: 0.9719 - dice_coef: 0.8489 - Jaccard_coef: 0.6756\n",
      "Epoch 226: val_loss did not improve from 0.11474\n",
      "637/637 [==============================] - 112s 176ms/step - loss: 0.1202 - accuracy: 0.9719 - dice_coef: 0.8489 - Jaccard_coef: 0.6756 - val_loss: 0.1199 - val_accuracy: 0.9732 - val_dice_coef: 0.8457 - val_Jaccard_coef: 0.6800\n",
      "Epoch 227/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1204 - accuracy: 0.9719 - dice_coef: 0.8487 - Jaccard_coef: 0.6755\n",
      "Epoch 227: val_loss did not improve from 0.11474\n",
      "637/637 [==============================] - 113s 177ms/step - loss: 0.1204 - accuracy: 0.9719 - dice_coef: 0.8487 - Jaccard_coef: 0.6755 - val_loss: 0.1181 - val_accuracy: 0.9734 - val_dice_coef: 0.8480 - val_Jaccard_coef: 0.6792\n",
      "Epoch 228/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1204 - accuracy: 0.9719 - dice_coef: 0.8487 - Jaccard_coef: 0.6754\n",
      "Epoch 228: val_loss did not improve from 0.11474\n",
      "637/637 [==============================] - 113s 177ms/step - loss: 0.1204 - accuracy: 0.9719 - dice_coef: 0.8487 - Jaccard_coef: 0.6754 - val_loss: 0.1175 - val_accuracy: 0.9736 - val_dice_coef: 0.8484 - val_Jaccard_coef: 0.6835\n",
      "Epoch 229/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1203 - accuracy: 0.9719 - dice_coef: 0.8489 - Jaccard_coef: 0.6757\n",
      "Epoch 229: val_loss did not improve from 0.11474\n",
      "637/637 [==============================] - 112s 176ms/step - loss: 0.1203 - accuracy: 0.9719 - dice_coef: 0.8489 - Jaccard_coef: 0.6757 - val_loss: 0.1161 - val_accuracy: 0.9736 - val_dice_coef: 0.8504 - val_Jaccard_coef: 0.6802\n",
      "Epoch 230/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1202 - accuracy: 0.9719 - dice_coef: 0.8490 - Jaccard_coef: 0.6756\n",
      "Epoch 230: val_loss did not improve from 0.11474\n",
      "637/637 [==============================] - 113s 177ms/step - loss: 0.1202 - accuracy: 0.9719 - dice_coef: 0.8490 - Jaccard_coef: 0.6756 - val_loss: 0.1181 - val_accuracy: 0.9734 - val_dice_coef: 0.8477 - val_Jaccard_coef: 0.6778\n",
      "Epoch 231/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1204 - accuracy: 0.9719 - dice_coef: 0.8488 - Jaccard_coef: 0.6754\n",
      "Epoch 231: val_loss did not improve from 0.11474\n",
      "637/637 [==============================] - 113s 177ms/step - loss: 0.1204 - accuracy: 0.9719 - dice_coef: 0.8488 - Jaccard_coef: 0.6754 - val_loss: 0.1169 - val_accuracy: 0.9736 - val_dice_coef: 0.8491 - val_Jaccard_coef: 0.6797\n",
      "Epoch 232/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1205 - accuracy: 0.9719 - dice_coef: 0.8487 - Jaccard_coef: 0.6754\n",
      "Epoch 232: val_loss did not improve from 0.11474\n",
      "637/637 [==============================] - 113s 177ms/step - loss: 0.1205 - accuracy: 0.9719 - dice_coef: 0.8487 - Jaccard_coef: 0.6754 - val_loss: 0.1190 - val_accuracy: 0.9733 - val_dice_coef: 0.8467 - val_Jaccard_coef: 0.6813\n",
      "Epoch 233/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1204 - accuracy: 0.9719 - dice_coef: 0.8487 - Jaccard_coef: 0.6754\n",
      "Epoch 233: val_loss did not improve from 0.11474\n",
      "637/637 [==============================] - 113s 177ms/step - loss: 0.1204 - accuracy: 0.9719 - dice_coef: 0.8487 - Jaccard_coef: 0.6754 - val_loss: 0.1177 - val_accuracy: 0.9734 - val_dice_coef: 0.8485 - val_Jaccard_coef: 0.6756\n",
      "Epoch 234/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1202 - accuracy: 0.9719 - dice_coef: 0.8489 - Jaccard_coef: 0.6756\n",
      "Epoch 234: val_loss did not improve from 0.11474\n",
      "637/637 [==============================] - 108s 170ms/step - loss: 0.1202 - accuracy: 0.9719 - dice_coef: 0.8489 - Jaccard_coef: 0.6756 - val_loss: 0.1153 - val_accuracy: 0.9737 - val_dice_coef: 0.8518 - val_Jaccard_coef: 0.6802\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 235/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1202 - accuracy: 0.9719 - dice_coef: 0.8490 - Jaccard_coef: 0.6757\n",
      "Epoch 235: val_loss did not improve from 0.11474\n",
      "637/637 [==============================] - 113s 177ms/step - loss: 0.1202 - accuracy: 0.9719 - dice_coef: 0.8490 - Jaccard_coef: 0.6757 - val_loss: 0.1183 - val_accuracy: 0.9734 - val_dice_coef: 0.8481 - val_Jaccard_coef: 0.6818\n",
      "Epoch 236/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1205 - accuracy: 0.9719 - dice_coef: 0.8486 - Jaccard_coef: 0.6753\n",
      "Epoch 236: val_loss did not improve from 0.11474\n",
      "637/637 [==============================] - 113s 177ms/step - loss: 0.1205 - accuracy: 0.9719 - dice_coef: 0.8486 - Jaccard_coef: 0.6753 - val_loss: 0.1167 - val_accuracy: 0.9736 - val_dice_coef: 0.8494 - val_Jaccard_coef: 0.6811\n",
      "Epoch 237/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1204 - accuracy: 0.9719 - dice_coef: 0.8488 - Jaccard_coef: 0.6755\n",
      "Epoch 237: val_loss did not improve from 0.11474\n",
      "637/637 [==============================] - 112s 176ms/step - loss: 0.1204 - accuracy: 0.9719 - dice_coef: 0.8488 - Jaccard_coef: 0.6755 - val_loss: 0.1177 - val_accuracy: 0.9734 - val_dice_coef: 0.8483 - val_Jaccard_coef: 0.6819\n",
      "Epoch 238/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1204 - accuracy: 0.9719 - dice_coef: 0.8487 - Jaccard_coef: 0.6755\n",
      "Epoch 238: val_loss did not improve from 0.11474\n",
      "637/637 [==============================] - 113s 177ms/step - loss: 0.1204 - accuracy: 0.9719 - dice_coef: 0.8487 - Jaccard_coef: 0.6755 - val_loss: 0.1201 - val_accuracy: 0.9731 - val_dice_coef: 0.8449 - val_Jaccard_coef: 0.6741\n",
      "Epoch 239/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1204 - accuracy: 0.9719 - dice_coef: 0.8488 - Jaccard_coef: 0.6754\n",
      "Epoch 239: val_loss did not improve from 0.11474\n",
      "637/637 [==============================] - 112s 177ms/step - loss: 0.1204 - accuracy: 0.9719 - dice_coef: 0.8488 - Jaccard_coef: 0.6754 - val_loss: 0.1161 - val_accuracy: 0.9737 - val_dice_coef: 0.8502 - val_Jaccard_coef: 0.6811\n",
      "Epoch 240/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1204 - accuracy: 0.9719 - dice_coef: 0.8487 - Jaccard_coef: 0.6754\n",
      "Epoch 240: val_loss did not improve from 0.11474\n",
      "637/637 [==============================] - 113s 177ms/step - loss: 0.1204 - accuracy: 0.9719 - dice_coef: 0.8487 - Jaccard_coef: 0.6754 - val_loss: 0.1204 - val_accuracy: 0.9731 - val_dice_coef: 0.8440 - val_Jaccard_coef: 0.6758\n",
      "Epoch 241/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1202 - accuracy: 0.9719 - dice_coef: 0.8490 - Jaccard_coef: 0.6758\n",
      "Epoch 241: val_loss did not improve from 0.11474\n",
      "637/637 [==============================] - 113s 177ms/step - loss: 0.1202 - accuracy: 0.9719 - dice_coef: 0.8490 - Jaccard_coef: 0.6758 - val_loss: 0.1161 - val_accuracy: 0.9737 - val_dice_coef: 0.8506 - val_Jaccard_coef: 0.6829\n",
      "Epoch 242/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1203 - accuracy: 0.9719 - dice_coef: 0.8489 - Jaccard_coef: 0.6757\n",
      "Epoch 242: val_loss did not improve from 0.11474\n",
      "637/637 [==============================] - 113s 177ms/step - loss: 0.1203 - accuracy: 0.9719 - dice_coef: 0.8489 - Jaccard_coef: 0.6757 - val_loss: 0.1186 - val_accuracy: 0.9733 - val_dice_coef: 0.8479 - val_Jaccard_coef: 0.6823\n",
      "Epoch 243/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1201 - accuracy: 0.9719 - dice_coef: 0.8491 - Jaccard_coef: 0.6759\n",
      "Epoch 243: val_loss did not improve from 0.11474\n",
      "637/637 [==============================] - 113s 177ms/step - loss: 0.1201 - accuracy: 0.9719 - dice_coef: 0.8491 - Jaccard_coef: 0.6759 - val_loss: 0.1177 - val_accuracy: 0.9734 - val_dice_coef: 0.8493 - val_Jaccard_coef: 0.6847\n",
      "Epoch 244/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1203 - accuracy: 0.9719 - dice_coef: 0.8488 - Jaccard_coef: 0.6756\n",
      "Epoch 244: val_loss did not improve from 0.11474\n",
      "637/637 [==============================] - 114s 178ms/step - loss: 0.1203 - accuracy: 0.9719 - dice_coef: 0.8488 - Jaccard_coef: 0.6756 - val_loss: 0.1178 - val_accuracy: 0.9735 - val_dice_coef: 0.8480 - val_Jaccard_coef: 0.6806\n",
      "Epoch 245/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1203 - accuracy: 0.9719 - dice_coef: 0.8489 - Jaccard_coef: 0.6757\n",
      "Epoch 245: val_loss did not improve from 0.11474\n",
      "637/637 [==============================] - 113s 178ms/step - loss: 0.1203 - accuracy: 0.9719 - dice_coef: 0.8489 - Jaccard_coef: 0.6757 - val_loss: 0.1157 - val_accuracy: 0.9737 - val_dice_coef: 0.8514 - val_Jaccard_coef: 0.6815\n",
      "Epoch 246/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1205 - accuracy: 0.9719 - dice_coef: 0.8487 - Jaccard_coef: 0.6754\n",
      "Epoch 246: val_loss did not improve from 0.11474\n",
      "637/637 [==============================] - 113s 177ms/step - loss: 0.1205 - accuracy: 0.9719 - dice_coef: 0.8487 - Jaccard_coef: 0.6754 - val_loss: 0.1175 - val_accuracy: 0.9735 - val_dice_coef: 0.8494 - val_Jaccard_coef: 0.6820\n",
      "Epoch 247/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1203 - accuracy: 0.9719 - dice_coef: 0.8489 - Jaccard_coef: 0.6755\n",
      "Epoch 247: val_loss did not improve from 0.11474\n",
      "637/637 [==============================] - 112s 176ms/step - loss: 0.1203 - accuracy: 0.9719 - dice_coef: 0.8489 - Jaccard_coef: 0.6755 - val_loss: 0.1180 - val_accuracy: 0.9734 - val_dice_coef: 0.8479 - val_Jaccard_coef: 0.6800\n",
      "Epoch 248/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1202 - accuracy: 0.9719 - dice_coef: 0.8490 - Jaccard_coef: 0.6759\n",
      "Epoch 248: val_loss did not improve from 0.11474\n",
      "637/637 [==============================] - 113s 177ms/step - loss: 0.1202 - accuracy: 0.9719 - dice_coef: 0.8490 - Jaccard_coef: 0.6759 - val_loss: 0.1152 - val_accuracy: 0.9738 - val_dice_coef: 0.8520 - val_Jaccard_coef: 0.6789\n",
      "Epoch 249/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1202 - accuracy: 0.9719 - dice_coef: 0.8490 - Jaccard_coef: 0.6758\n",
      "Epoch 249: val_loss did not improve from 0.11474\n",
      "637/637 [==============================] - 108s 170ms/step - loss: 0.1202 - accuracy: 0.9719 - dice_coef: 0.8490 - Jaccard_coef: 0.6758 - val_loss: 0.1164 - val_accuracy: 0.9736 - val_dice_coef: 0.8509 - val_Jaccard_coef: 0.6813\n",
      "Epoch 250/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1201 - accuracy: 0.9719 - dice_coef: 0.8490 - Jaccard_coef: 0.6758\n",
      "Epoch 250: val_loss did not improve from 0.11474\n",
      "637/637 [==============================] - 109s 171ms/step - loss: 0.1201 - accuracy: 0.9719 - dice_coef: 0.8490 - Jaccard_coef: 0.6758 - val_loss: 0.1153 - val_accuracy: 0.9738 - val_dice_coef: 0.8516 - val_Jaccard_coef: 0.6823\n",
      "Epoch 251/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1202 - accuracy: 0.9719 - dice_coef: 0.8490 - Jaccard_coef: 0.6757\n",
      "Epoch 251: val_loss did not improve from 0.11474\n",
      "637/637 [==============================] - 113s 177ms/step - loss: 0.1202 - accuracy: 0.9719 - dice_coef: 0.8490 - Jaccard_coef: 0.6757 - val_loss: 0.1216 - val_accuracy: 0.9728 - val_dice_coef: 0.8427 - val_Jaccard_coef: 0.6743\n",
      "Epoch 252/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1202 - accuracy: 0.9719 - dice_coef: 0.8489 - Jaccard_coef: 0.6757\n",
      "Epoch 252: val_loss did not improve from 0.11474\n",
      "637/637 [==============================] - 113s 177ms/step - loss: 0.1202 - accuracy: 0.9719 - dice_coef: 0.8489 - Jaccard_coef: 0.6757 - val_loss: 0.1180 - val_accuracy: 0.9735 - val_dice_coef: 0.8476 - val_Jaccard_coef: 0.6822\n",
      "Epoch 253/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1202 - accuracy: 0.9719 - dice_coef: 0.8490 - Jaccard_coef: 0.6758\n",
      "Epoch 253: val_loss did not improve from 0.11474\n",
      "637/637 [==============================] - 109s 170ms/step - loss: 0.1202 - accuracy: 0.9719 - dice_coef: 0.8490 - Jaccard_coef: 0.6758 - val_loss: 0.1153 - val_accuracy: 0.9737 - val_dice_coef: 0.8532 - val_Jaccard_coef: 0.6880\n",
      "Epoch 254/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1202 - accuracy: 0.9719 - dice_coef: 0.8489 - Jaccard_coef: 0.6757\n",
      "Epoch 254: val_loss did not improve from 0.11474\n",
      "637/637 [==============================] - 113s 177ms/step - loss: 0.1202 - accuracy: 0.9719 - dice_coef: 0.8489 - Jaccard_coef: 0.6757 - val_loss: 0.1178 - val_accuracy: 0.9735 - val_dice_coef: 0.8482 - val_Jaccard_coef: 0.6814\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 255/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1202 - accuracy: 0.9719 - dice_coef: 0.8490 - Jaccard_coef: 0.6759\n",
      "Epoch 255: val_loss did not improve from 0.11474\n",
      "637/637 [==============================] - 108s 170ms/step - loss: 0.1202 - accuracy: 0.9719 - dice_coef: 0.8490 - Jaccard_coef: 0.6759 - val_loss: 0.1198 - val_accuracy: 0.9732 - val_dice_coef: 0.8448 - val_Jaccard_coef: 0.6776\n",
      "Epoch 256/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1202 - accuracy: 0.9719 - dice_coef: 0.8490 - Jaccard_coef: 0.6757\n",
      "Epoch 256: val_loss did not improve from 0.11474\n",
      "637/637 [==============================] - 109s 171ms/step - loss: 0.1202 - accuracy: 0.9719 - dice_coef: 0.8490 - Jaccard_coef: 0.6757 - val_loss: 0.1165 - val_accuracy: 0.9736 - val_dice_coef: 0.8500 - val_Jaccard_coef: 0.6830\n",
      "Epoch 257/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1201 - accuracy: 0.9719 - dice_coef: 0.8491 - Jaccard_coef: 0.6760\n",
      "Epoch 257: val_loss did not improve from 0.11474\n",
      "637/637 [==============================] - 109s 171ms/step - loss: 0.1201 - accuracy: 0.9719 - dice_coef: 0.8491 - Jaccard_coef: 0.6760 - val_loss: 0.1179 - val_accuracy: 0.9735 - val_dice_coef: 0.8472 - val_Jaccard_coef: 0.6801\n",
      "Epoch 258/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1201 - accuracy: 0.9719 - dice_coef: 0.8490 - Jaccard_coef: 0.6759\n",
      "Epoch 258: val_loss did not improve from 0.11474\n",
      "637/637 [==============================] - 113s 177ms/step - loss: 0.1201 - accuracy: 0.9719 - dice_coef: 0.8490 - Jaccard_coef: 0.6759 - val_loss: 0.1201 - val_accuracy: 0.9732 - val_dice_coef: 0.8444 - val_Jaccard_coef: 0.6785\n",
      "Epoch 259/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1200 - accuracy: 0.9719 - dice_coef: 0.8491 - Jaccard_coef: 0.6761\n",
      "Epoch 259: val_loss did not improve from 0.11474\n",
      "637/637 [==============================] - 108s 170ms/step - loss: 0.1200 - accuracy: 0.9719 - dice_coef: 0.8491 - Jaccard_coef: 0.6761 - val_loss: 0.1165 - val_accuracy: 0.9736 - val_dice_coef: 0.8509 - val_Jaccard_coef: 0.6828\n",
      "Epoch 260/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1200 - accuracy: 0.9720 - dice_coef: 0.8492 - Jaccard_coef: 0.6763\n",
      "Epoch 260: val_loss did not improve from 0.11474\n",
      "637/637 [==============================] - 113s 177ms/step - loss: 0.1200 - accuracy: 0.9720 - dice_coef: 0.8492 - Jaccard_coef: 0.6763 - val_loss: 0.1185 - val_accuracy: 0.9733 - val_dice_coef: 0.8465 - val_Jaccard_coef: 0.6784\n",
      "Epoch 261/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1204 - accuracy: 0.9719 - dice_coef: 0.8488 - Jaccard_coef: 0.6754\n",
      "Epoch 261: val_loss did not improve from 0.11474\n",
      "637/637 [==============================] - 108s 170ms/step - loss: 0.1204 - accuracy: 0.9719 - dice_coef: 0.8488 - Jaccard_coef: 0.6754 - val_loss: 0.1175 - val_accuracy: 0.9736 - val_dice_coef: 0.8481 - val_Jaccard_coef: 0.6777\n",
      "Epoch 262/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1202 - accuracy: 0.9719 - dice_coef: 0.8490 - Jaccard_coef: 0.6758\n",
      "Epoch 262: val_loss did not improve from 0.11474\n",
      "637/637 [==============================] - 109s 171ms/step - loss: 0.1202 - accuracy: 0.9719 - dice_coef: 0.8490 - Jaccard_coef: 0.6758 - val_loss: 0.1167 - val_accuracy: 0.9736 - val_dice_coef: 0.8501 - val_Jaccard_coef: 0.6808\n",
      "Epoch 263/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1202 - accuracy: 0.9719 - dice_coef: 0.8489 - Jaccard_coef: 0.6757\n",
      "Epoch 263: val_loss did not improve from 0.11474\n",
      "637/637 [==============================] - 109s 171ms/step - loss: 0.1202 - accuracy: 0.9719 - dice_coef: 0.8489 - Jaccard_coef: 0.6757 - val_loss: 0.1194 - val_accuracy: 0.9733 - val_dice_coef: 0.8460 - val_Jaccard_coef: 0.6780\n",
      "Epoch 264/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1200 - accuracy: 0.9719 - dice_coef: 0.8491 - Jaccard_coef: 0.6760\n",
      "Epoch 264: val_loss did not improve from 0.11474\n",
      "637/637 [==============================] - 113s 177ms/step - loss: 0.1200 - accuracy: 0.9719 - dice_coef: 0.8491 - Jaccard_coef: 0.6760 - val_loss: 0.1177 - val_accuracy: 0.9735 - val_dice_coef: 0.8480 - val_Jaccard_coef: 0.6817\n",
      "Epoch 265/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1201 - accuracy: 0.9719 - dice_coef: 0.8491 - Jaccard_coef: 0.6760\n",
      "Epoch 265: val_loss did not improve from 0.11474\n",
      "637/637 [==============================] - 109s 171ms/step - loss: 0.1201 - accuracy: 0.9719 - dice_coef: 0.8491 - Jaccard_coef: 0.6760 - val_loss: 0.1179 - val_accuracy: 0.9735 - val_dice_coef: 0.8474 - val_Jaccard_coef: 0.6798\n",
      "Epoch 266/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1201 - accuracy: 0.9719 - dice_coef: 0.8491 - Jaccard_coef: 0.6760\n",
      "Epoch 266: val_loss did not improve from 0.11474\n",
      "637/637 [==============================] - 113s 177ms/step - loss: 0.1201 - accuracy: 0.9719 - dice_coef: 0.8491 - Jaccard_coef: 0.6760 - val_loss: 0.1162 - val_accuracy: 0.9737 - val_dice_coef: 0.8503 - val_Jaccard_coef: 0.6834\n",
      "Epoch 267/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1201 - accuracy: 0.9719 - dice_coef: 0.8491 - Jaccard_coef: 0.6759\n",
      "Epoch 267: val_loss did not improve from 0.11474\n",
      "637/637 [==============================] - 113s 177ms/step - loss: 0.1201 - accuracy: 0.9719 - dice_coef: 0.8491 - Jaccard_coef: 0.6759 - val_loss: 0.1189 - val_accuracy: 0.9733 - val_dice_coef: 0.8467 - val_Jaccard_coef: 0.6784\n",
      "Epoch 268/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1202 - accuracy: 0.9719 - dice_coef: 0.8489 - Jaccard_coef: 0.6757\n",
      "Epoch 268: val_loss did not improve from 0.11474\n",
      "637/637 [==============================] - 113s 177ms/step - loss: 0.1202 - accuracy: 0.9719 - dice_coef: 0.8489 - Jaccard_coef: 0.6757 - val_loss: 0.1184 - val_accuracy: 0.9734 - val_dice_coef: 0.8473 - val_Jaccard_coef: 0.6788\n",
      "Epoch 269/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1202 - accuracy: 0.9719 - dice_coef: 0.8490 - Jaccard_coef: 0.6757\n",
      "Epoch 269: val_loss did not improve from 0.11474\n",
      "637/637 [==============================] - 109s 170ms/step - loss: 0.1202 - accuracy: 0.9719 - dice_coef: 0.8490 - Jaccard_coef: 0.6757 - val_loss: 0.1234 - val_accuracy: 0.9727 - val_dice_coef: 0.8403 - val_Jaccard_coef: 0.6746\n",
      "Epoch 270/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1201 - accuracy: 0.9720 - dice_coef: 0.8491 - Jaccard_coef: 0.6761\n",
      "Epoch 270: val_loss did not improve from 0.11474\n",
      "637/637 [==============================] - 109s 171ms/step - loss: 0.1201 - accuracy: 0.9720 - dice_coef: 0.8491 - Jaccard_coef: 0.6761 - val_loss: 0.1199 - val_accuracy: 0.9731 - val_dice_coef: 0.8443 - val_Jaccard_coef: 0.6748\n",
      "Epoch 271/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1201 - accuracy: 0.9719 - dice_coef: 0.8491 - Jaccard_coef: 0.6760\n",
      "Epoch 271: val_loss did not improve from 0.11474\n",
      "637/637 [==============================] - 113s 177ms/step - loss: 0.1201 - accuracy: 0.9719 - dice_coef: 0.8491 - Jaccard_coef: 0.6760 - val_loss: 0.1171 - val_accuracy: 0.9736 - val_dice_coef: 0.8490 - val_Jaccard_coef: 0.6825\n",
      "Epoch 272/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1200 - accuracy: 0.9719 - dice_coef: 0.8492 - Jaccard_coef: 0.6761\n",
      "Epoch 272: val_loss did not improve from 0.11474\n",
      "637/637 [==============================] - 109s 170ms/step - loss: 0.1200 - accuracy: 0.9719 - dice_coef: 0.8492 - Jaccard_coef: 0.6761 - val_loss: 0.1221 - val_accuracy: 0.9729 - val_dice_coef: 0.8422 - val_Jaccard_coef: 0.6774\n",
      "Epoch 273/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1201 - accuracy: 0.9719 - dice_coef: 0.8491 - Jaccard_coef: 0.6758\n",
      "Epoch 273: val_loss did not improve from 0.11474\n",
      "637/637 [==============================] - 109s 171ms/step - loss: 0.1201 - accuracy: 0.9719 - dice_coef: 0.8491 - Jaccard_coef: 0.6758 - val_loss: 0.1204 - val_accuracy: 0.9731 - val_dice_coef: 0.8443 - val_Jaccard_coef: 0.6795\n",
      "Epoch 274/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1201 - accuracy: 0.9719 - dice_coef: 0.8491 - Jaccard_coef: 0.6761\n",
      "Epoch 274: val_loss did not improve from 0.11474\n",
      "637/637 [==============================] - 108s 170ms/step - loss: 0.1201 - accuracy: 0.9719 - dice_coef: 0.8491 - Jaccard_coef: 0.6761 - val_loss: 0.1154 - val_accuracy: 0.9738 - val_dice_coef: 0.8513 - val_Jaccard_coef: 0.6797\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 275/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1201 - accuracy: 0.9719 - dice_coef: 0.8491 - Jaccard_coef: 0.6761\n",
      "Epoch 275: val_loss did not improve from 0.11474\n",
      "637/637 [==============================] - 108s 170ms/step - loss: 0.1201 - accuracy: 0.9719 - dice_coef: 0.8491 - Jaccard_coef: 0.6761 - val_loss: 0.1153 - val_accuracy: 0.9738 - val_dice_coef: 0.8513 - val_Jaccard_coef: 0.6800\n",
      "Epoch 276/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1202 - accuracy: 0.9719 - dice_coef: 0.8490 - Jaccard_coef: 0.6758\n",
      "Epoch 276: val_loss did not improve from 0.11474\n",
      "637/637 [==============================] - 113s 177ms/step - loss: 0.1202 - accuracy: 0.9719 - dice_coef: 0.8490 - Jaccard_coef: 0.6758 - val_loss: 0.1171 - val_accuracy: 0.9735 - val_dice_coef: 0.8485 - val_Jaccard_coef: 0.6777\n",
      "Epoch 277/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1199 - accuracy: 0.9720 - dice_coef: 0.8493 - Jaccard_coef: 0.6763\n",
      "Epoch 277: val_loss did not improve from 0.11474\n",
      "637/637 [==============================] - 108s 170ms/step - loss: 0.1199 - accuracy: 0.9720 - dice_coef: 0.8493 - Jaccard_coef: 0.6763 - val_loss: 0.1203 - val_accuracy: 0.9731 - val_dice_coef: 0.8435 - val_Jaccard_coef: 0.6756\n",
      "Epoch 278/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1203 - accuracy: 0.9719 - dice_coef: 0.8488 - Jaccard_coef: 0.6756\n",
      "Epoch 278: val_loss did not improve from 0.11474\n",
      "637/637 [==============================] - 109s 171ms/step - loss: 0.1203 - accuracy: 0.9719 - dice_coef: 0.8488 - Jaccard_coef: 0.6756 - val_loss: 0.1186 - val_accuracy: 0.9733 - val_dice_coef: 0.8471 - val_Jaccard_coef: 0.6775\n",
      "Epoch 279/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1202 - accuracy: 0.9719 - dice_coef: 0.8490 - Jaccard_coef: 0.6758\n",
      "Epoch 279: val_loss did not improve from 0.11474\n",
      "637/637 [==============================] - 113s 177ms/step - loss: 0.1202 - accuracy: 0.9719 - dice_coef: 0.8490 - Jaccard_coef: 0.6758 - val_loss: 0.1160 - val_accuracy: 0.9737 - val_dice_coef: 0.8506 - val_Jaccard_coef: 0.6811\n",
      "Epoch 280/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1200 - accuracy: 0.9719 - dice_coef: 0.8492 - Jaccard_coef: 0.6760\n",
      "Epoch 280: val_loss improved from 0.11474 to 0.11409, saving model to /homes/imransharif/Mehwish/DRIVE/AV_weights/FR_UNet_RAAMSkip_BK_16_last2-3_Combined.h5\n",
      "637/637 [==============================] - 110s 173ms/step - loss: 0.1200 - accuracy: 0.9719 - dice_coef: 0.8492 - Jaccard_coef: 0.6760 - val_loss: 0.1141 - val_accuracy: 0.9738 - val_dice_coef: 0.8539 - val_Jaccard_coef: 0.6812\n",
      "Epoch 281/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1200 - accuracy: 0.9720 - dice_coef: 0.8492 - Jaccard_coef: 0.6760\n",
      "Epoch 281: val_loss did not improve from 0.11409\n",
      "637/637 [==============================] - 113s 177ms/step - loss: 0.1200 - accuracy: 0.9720 - dice_coef: 0.8492 - Jaccard_coef: 0.6760 - val_loss: 0.1145 - val_accuracy: 0.9739 - val_dice_coef: 0.8530 - val_Jaccard_coef: 0.6869\n",
      "Epoch 282/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1199 - accuracy: 0.9720 - dice_coef: 0.8494 - Jaccard_coef: 0.6765\n",
      "Epoch 282: val_loss did not improve from 0.11409\n",
      "637/637 [==============================] - 108s 170ms/step - loss: 0.1199 - accuracy: 0.9720 - dice_coef: 0.8494 - Jaccard_coef: 0.6765 - val_loss: 0.1182 - val_accuracy: 0.9734 - val_dice_coef: 0.8477 - val_Jaccard_coef: 0.6805\n",
      "Epoch 283/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1201 - accuracy: 0.9720 - dice_coef: 0.8492 - Jaccard_coef: 0.6762\n",
      "Epoch 283: val_loss did not improve from 0.11409\n",
      "637/637 [==============================] - 109s 171ms/step - loss: 0.1201 - accuracy: 0.9720 - dice_coef: 0.8492 - Jaccard_coef: 0.6762 - val_loss: 0.1170 - val_accuracy: 0.9736 - val_dice_coef: 0.8493 - val_Jaccard_coef: 0.6817\n",
      "Epoch 284/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1203 - accuracy: 0.9719 - dice_coef: 0.8488 - Jaccard_coef: 0.6755\n",
      "Epoch 284: val_loss did not improve from 0.11409\n",
      "637/637 [==============================] - 113s 177ms/step - loss: 0.1203 - accuracy: 0.9719 - dice_coef: 0.8488 - Jaccard_coef: 0.6755 - val_loss: 0.1173 - val_accuracy: 0.9736 - val_dice_coef: 0.8487 - val_Jaccard_coef: 0.6805\n",
      "Epoch 285/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1199 - accuracy: 0.9720 - dice_coef: 0.8492 - Jaccard_coef: 0.6763\n",
      "Epoch 285: val_loss did not improve from 0.11409\n",
      "637/637 [==============================] - 109s 171ms/step - loss: 0.1199 - accuracy: 0.9720 - dice_coef: 0.8492 - Jaccard_coef: 0.6763 - val_loss: 0.1150 - val_accuracy: 0.9739 - val_dice_coef: 0.8519 - val_Jaccard_coef: 0.6833\n",
      "Epoch 286/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1200 - accuracy: 0.9720 - dice_coef: 0.8492 - Jaccard_coef: 0.6760\n",
      "Epoch 286: val_loss did not improve from 0.11409\n",
      "637/637 [==============================] - 112s 176ms/step - loss: 0.1200 - accuracy: 0.9720 - dice_coef: 0.8492 - Jaccard_coef: 0.6760 - val_loss: 0.1197 - val_accuracy: 0.9732 - val_dice_coef: 0.8459 - val_Jaccard_coef: 0.6793\n",
      "Epoch 287/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1202 - accuracy: 0.9719 - dice_coef: 0.8490 - Jaccard_coef: 0.6758\n",
      "Epoch 287: val_loss did not improve from 0.11409\n",
      "637/637 [==============================] - 112s 176ms/step - loss: 0.1202 - accuracy: 0.9719 - dice_coef: 0.8490 - Jaccard_coef: 0.6758 - val_loss: 0.1236 - val_accuracy: 0.9727 - val_dice_coef: 0.8417 - val_Jaccard_coef: 0.6780\n",
      "Epoch 288/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1200 - accuracy: 0.9720 - dice_coef: 0.8492 - Jaccard_coef: 0.6761\n",
      "Epoch 288: val_loss did not improve from 0.11409\n",
      "637/637 [==============================] - 108s 170ms/step - loss: 0.1200 - accuracy: 0.9720 - dice_coef: 0.8492 - Jaccard_coef: 0.6761 - val_loss: 0.1187 - val_accuracy: 0.9733 - val_dice_coef: 0.8466 - val_Jaccard_coef: 0.6762\n",
      "Epoch 289/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1201 - accuracy: 0.9720 - dice_coef: 0.8491 - Jaccard_coef: 0.6760\n",
      "Epoch 289: val_loss did not improve from 0.11409\n",
      "637/637 [==============================] - 108s 170ms/step - loss: 0.1201 - accuracy: 0.9720 - dice_coef: 0.8491 - Jaccard_coef: 0.6760 - val_loss: 0.1161 - val_accuracy: 0.9738 - val_dice_coef: 0.8502 - val_Jaccard_coef: 0.6845\n",
      "Epoch 290/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1201 - accuracy: 0.9720 - dice_coef: 0.8492 - Jaccard_coef: 0.6761\n",
      "Epoch 290: val_loss did not improve from 0.11409\n",
      "637/637 [==============================] - 108s 169ms/step - loss: 0.1201 - accuracy: 0.9720 - dice_coef: 0.8492 - Jaccard_coef: 0.6761 - val_loss: 0.1144 - val_accuracy: 0.9740 - val_dice_coef: 0.8529 - val_Jaccard_coef: 0.6855\n",
      "Epoch 291/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1200 - accuracy: 0.9720 - dice_coef: 0.8492 - Jaccard_coef: 0.6762\n",
      "Epoch 291: val_loss did not improve from 0.11409\n",
      "637/637 [==============================] - 112s 176ms/step - loss: 0.1200 - accuracy: 0.9720 - dice_coef: 0.8492 - Jaccard_coef: 0.6762 - val_loss: 0.1173 - val_accuracy: 0.9735 - val_dice_coef: 0.8489 - val_Jaccard_coef: 0.6816\n",
      "Epoch 292/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1202 - accuracy: 0.9719 - dice_coef: 0.8490 - Jaccard_coef: 0.6759\n",
      "Epoch 292: val_loss did not improve from 0.11409\n",
      "637/637 [==============================] - 108s 169ms/step - loss: 0.1202 - accuracy: 0.9719 - dice_coef: 0.8490 - Jaccard_coef: 0.6759 - val_loss: 0.1173 - val_accuracy: 0.9736 - val_dice_coef: 0.8490 - val_Jaccard_coef: 0.6815\n",
      "Epoch 293/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1199 - accuracy: 0.9720 - dice_coef: 0.8493 - Jaccard_coef: 0.6764\n",
      "Epoch 293: val_loss did not improve from 0.11409\n",
      "637/637 [==============================] - 108s 170ms/step - loss: 0.1199 - accuracy: 0.9720 - dice_coef: 0.8493 - Jaccard_coef: 0.6764 - val_loss: 0.1189 - val_accuracy: 0.9733 - val_dice_coef: 0.8462 - val_Jaccard_coef: 0.6787\n",
      "Epoch 294/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1200 - accuracy: 0.9719 - dice_coef: 0.8491 - Jaccard_coef: 0.6760\n",
      "Epoch 294: val_loss did not improve from 0.11409\n",
      "637/637 [==============================] - 112s 176ms/step - loss: 0.1200 - accuracy: 0.9719 - dice_coef: 0.8491 - Jaccard_coef: 0.6760 - val_loss: 0.1155 - val_accuracy: 0.9738 - val_dice_coef: 0.8510 - val_Jaccard_coef: 0.6812\n",
      "Epoch 295/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1202 - accuracy: 0.9719 - dice_coef: 0.8490 - Jaccard_coef: 0.6759\n",
      "Epoch 295: val_loss did not improve from 0.11409\n",
      "637/637 [==============================] - 108s 169ms/step - loss: 0.1202 - accuracy: 0.9719 - dice_coef: 0.8490 - Jaccard_coef: 0.6759 - val_loss: 0.1166 - val_accuracy: 0.9736 - val_dice_coef: 0.8496 - val_Jaccard_coef: 0.6797\n",
      "Epoch 296/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1200 - accuracy: 0.9720 - dice_coef: 0.8492 - Jaccard_coef: 0.6763\n",
      "Epoch 296: val_loss did not improve from 0.11409\n",
      "637/637 [==============================] - 112s 176ms/step - loss: 0.1200 - accuracy: 0.9720 - dice_coef: 0.8492 - Jaccard_coef: 0.6763 - val_loss: 0.1192 - val_accuracy: 0.9734 - val_dice_coef: 0.8463 - val_Jaccard_coef: 0.6798\n",
      "Epoch 297/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1199 - accuracy: 0.9720 - dice_coef: 0.8492 - Jaccard_coef: 0.6763\n",
      "Epoch 297: val_loss did not improve from 0.11409\n",
      "637/637 [==============================] - 108s 169ms/step - loss: 0.1199 - accuracy: 0.9720 - dice_coef: 0.8492 - Jaccard_coef: 0.6763 - val_loss: 0.1171 - val_accuracy: 0.9736 - val_dice_coef: 0.8484 - val_Jaccard_coef: 0.6793\n",
      "Epoch 298/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1200 - accuracy: 0.9720 - dice_coef: 0.8492 - Jaccard_coef: 0.6761\n",
      "Epoch 298: val_loss did not improve from 0.11409\n",
      "637/637 [==============================] - 108s 169ms/step - loss: 0.1200 - accuracy: 0.9720 - dice_coef: 0.8492 - Jaccard_coef: 0.6761 - val_loss: 0.1172 - val_accuracy: 0.9735 - val_dice_coef: 0.8489 - val_Jaccard_coef: 0.6815\n",
      "Epoch 299/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1201 - accuracy: 0.9719 - dice_coef: 0.8492 - Jaccard_coef: 0.6761\n",
      "Epoch 299: val_loss did not improve from 0.11409\n",
      "637/637 [==============================] - 108s 169ms/step - loss: 0.1201 - accuracy: 0.9719 - dice_coef: 0.8492 - Jaccard_coef: 0.6761 - val_loss: 0.1175 - val_accuracy: 0.9735 - val_dice_coef: 0.8483 - val_Jaccard_coef: 0.6780\n",
      "Epoch 300/300\n",
      "637/637 [==============================] - ETA: 0s - loss: 0.1201 - accuracy: 0.9719 - dice_coef: 0.8491 - Jaccard_coef: 0.6760\n",
      "Epoch 300: val_loss did not improve from 0.11409\n",
      "637/637 [==============================] - 108s 170ms/step - loss: 0.1201 - accuracy: 0.9719 - dice_coef: 0.8491 - Jaccard_coef: 0.6760 - val_loss: 0.1182 - val_accuracy: 0.9734 - val_dice_coef: 0.8471 - val_Jaccard_coef: 0.6778\n"
     ]
    }
   ],
   "source": [
    "results = model.fit(\n",
    "    X_train,\n",
    "    y_train,  # Pass y_train directly without brackets\n",
    "    batch_size=batch_size,\n",
    "    epochs=nb_epoch,\n",
    "    callbacks=callbacks,\n",
    "    validation_data=(X_test, y_test)  # Pass y_test directly without brackets\n",
    ")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Modifying the code for a single output\n",
    "plt.figure(figsize=(8, 8))\n",
    "plt.title(\"Learning curve\")\n",
    "# Assuming results.history['loss'] and results.history['val_loss'] correspond to the single output loss\n",
    "plt.plot(results.history[\"accuracy\"], label=\"Accuracy\")\n",
    "plt.plot(results.history[\"val_accuracy\"], label=\"Validation Accuracy\")\n",
    "\n",
    "plt.xlabel(\"Epochs\")\n",
    "plt.ylabel(\"accuracy\")\n",
    "plt.legend()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Modifying the code for a single output\n",
    "plt.figure(figsize=(8, 8))\n",
    "plt.title(\"Learning curve\")\n",
    "# Assuming results.history['loss'] and results.history['val_loss'] correspond to the single output loss\n",
    "plt.plot(results.history[\"dice_coef\"], label=\"dice_coef\")\n",
    "plt.plot(results.history[\"val_dice_coef\"], label=\"Validation dice_coef\")\n",
    "\n",
    "plt.xlabel(\"Epochs\")\n",
    "plt.ylabel(\"dice_coef\")\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Modifying the code for a single output\n",
    "plt.figure(figsize=(8, 8))\n",
    "plt.title(\"Learning curve\")\n",
    "# Assuming results.history['loss'] and results.history['val_loss'] correspond to the single output loss\n",
    "plt.plot(results.history[\"loss\"], label=\"Training Loss\")\n",
    "plt.plot(results.history[\"val_loss\"], label=\"Validation Loss\")\n",
    "\n",
    "plt.xlabel(\"Epochs\")\n",
    "plt.ylabel(\"Loss\")\n",
    "plt.legend()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "executionInfo": {
     "elapsed": 783,
     "status": "ok",
     "timestamp": 1725044003315,
     "user": {
      "displayName": "mehwish mehmood",
      "userId": "03028843311539350970"
     },
     "user_tz": -300
    },
    "id": "NDbReF2rGght"
   },
   "outputs": [],
   "source": [
    "def evaluate_metrics(y_test, y_pred):\n",
    "    n = y_pred.shape[0]\n",
    "    all_F1_score = np.zeros(n)\n",
    "    all_dice = np.zeros(n)\n",
    "    all_jaccard = np.zeros(n)\n",
    "    all_sensitivity = np.zeros(n)\n",
    "    all_specificity = np.zeros(n)\n",
    "    for i in range(n):\n",
    "        gt, pred = y_test[i], y_pred[i]\n",
    "        gt_flt = np.ndarray.flatten(gt)\n",
    "        pred_flt = np.ndarray.flatten(pred)\n",
    "\n",
    "        precisions, recalls, thresholds = precision_recall_curve(gt_flt, pred_flt)\n",
    "        f1 = 2*(precisions * recalls) / (precisions + recalls)\n",
    "        max_value = np.argmax(f1)\n",
    "        thres = thresholds[max_value]\n",
    "        pred_mask = (pred_flt >= thres)\n",
    "        pred_label = pred_mask*1\n",
    "\n",
    "        tn, fp, fn, tp = confusion_matrix(gt_flt, pred_label).ravel()\n",
    "\n",
    "        F1_score = tp/(tp+((0.5)*(fp+fn)))\n",
    "        iou = tp / (tp + fp + fn)\n",
    "        dice = 2*tp / (2*tp + fp + fn)\n",
    "        specificity = tn / (tn + fp)\n",
    "        recall = tp / (tp + fn)\n",
    "\n",
    "        all_F1_score[i] = F1_score\n",
    "        all_dice[i] = dice\n",
    "        all_jaccard[i] = iou\n",
    "        all_sensitivity[i] = recall\n",
    "        all_specificity[i] = specificity\n",
    "\n",
    "        print(' F1_score: {:4f}, Dice: {:4f}, Jaccard: {:4f}, Sensitivity: {:4f}, Specificity: {:4f}'.format(\n",
    "        np.nanmean(all_F1_score), np.nanmean(all_dice), np.nanmean(all_jaccard), np.nanmean(all_sensitivity), np.nanmean(all_specificity)\n",
    "        ))\n",
    "    return all_F1_score, all_dice, all_jaccard, all_sensitivity, all_specificity\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "executionInfo": {
     "elapsed": 31,
     "status": "aborted",
     "timestamp": 1725042209330,
     "user": {
      "displayName": "mehwish mehmood",
      "userId": "03028843311539350970"
     },
     "user_tz": -300
    },
    "id": "ihWhyLM4j0TC"
   },
   "outputs": [],
   "source": [
    "# model.save_weights('/homes/imransharif/Mehwish/DRIVE/AV_weights/FR_UNet_RAAM_DRIVE.h5')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 3819,
     "status": "ok",
     "timestamp": 1725044013218,
     "user": {
      "displayName": "mehwish mehmood",
      "userId": "03028843311539350970"
     },
     "user_tz": -300
    },
    "id": "5R9Hw2AkqHjG",
    "outputId": "f84fbb34-4253-424b-bec4-b56329779b56"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Getting and resizing images ... \n",
      "Done!\n"
     ]
    }
   ],
   "source": [
    "# valid_data = '/content/ISIC2018_256x256/test' #data path\n",
    "X_test, y_test = get_data(valid_data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "executionInfo": {
     "elapsed": 739,
     "status": "ok",
     "timestamp": 1725044862387,
     "user": {
      "displayName": "mehwish mehmood",
      "userId": "03028843311539350970"
     },
     "user_tz": -300
    },
    "id": "cj-CElS6ru_a"
   },
   "outputs": [],
   "source": [
    "from sklearn.metrics import precision_recall_curve\n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")\n",
    "\n",
    "def evaluate_metrics(y_test, y_pred, return_mode='all'):\n",
    "    n = y_pred.shape[0]\n",
    "    all_accuracy = np.zeros(n)\n",
    "    all_dice = np.zeros(n)\n",
    "    all_jaccard = np.zeros(n)\n",
    "    all_sensitivity = np.zeros(n)\n",
    "    all_specificity = np.zeros(n)\n",
    "    for i in range(n):\n",
    "        gt, pred = y_test[i], y_pred[i]\n",
    "        gt_flt = np.ndarray.flatten(gt)\n",
    "        pred_flt = np.ndarray.flatten(pred)\n",
    "\n",
    "        precisions, recalls, thresholds = precision_recall_curve(gt_flt, pred_flt)\n",
    "        f1 = 2*(precisions * recalls) / (precisions + recalls)\n",
    "        max_value = np.argmax(f1)\n",
    "        precision, recall, thres = precisions[max_value], recalls[max_value], thresholds[max_value]\n",
    "\n",
    "        maxval = 255\n",
    "        pred_mask = (pred_flt > thres)\n",
    "        pred_label = pred_mask*1\n",
    "\n",
    "        tn, fp, fn, tp = confusion_matrix(gt_flt, pred_label).ravel()\n",
    "\n",
    "        accuracy = (tp + tn) / (tp + tn + fp + fn)\n",
    "        iou = tp / (tp + fp + fn)\n",
    "        dice = 2*tp / (2*tp + fp + fn)\n",
    "        specificity = tn / (tn + fp)\n",
    "\n",
    "        all_accuracy[i] = accuracy\n",
    "        all_dice[i] = dice\n",
    "        all_jaccard[i] = iou\n",
    "        all_sensitivity[i] = recall\n",
    "        all_specificity[i] = specificity\n",
    "\n",
    "    print('Accuracy: {:4f}, Dice: {:4f}, Jaccard: {:4f}, Sensitivity: {:4f}, Specificity: {:4f}'.format(\n",
    "        np.nanmean(all_accuracy), np.nanmean(all_dice), np.nanmean(all_jaccard), np.nanmean(all_sensitivity), np.nanmean(all_specificity)\n",
    "    ))\n",
    "    if return_mode == 'all':\n",
    "        return all_accuracy, all_dice, all_jaccard, all_sensitivity, all_specificity\n",
    "    if return_mode == 'value':\n",
    "        return np.nanmean(all_accuracy), np.nanmean(all_dice), np.nanmean(all_jaccard), np.nanmean(all_sensitivity), np.nanmean(all_specificity)\n",
    "    else:\n",
    "        return 'No val returned'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 2587,
     "status": "ok",
     "timestamp": 1725045045162,
     "user": {
      "displayName": "mehwish mehmood",
      "userId": "03028843311539350970"
     },
     "user_tz": -300
    },
    "id": "bT-hrleO3M3c",
    "outputId": "07f38fcd-bcbf-461c-83f9-d3972cae3e5a"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "32/32 [==============================] - 2s 12ms/step\n"
     ]
    }
   ],
   "source": [
    "# Convert ground truth labels to binary\n",
    "y_test_BV = (y_test[0] > 0.5).astype(np.uint8)\n",
    "# y_test_OD = (y_test[1] > 0.5).astype(np.uint8)\n",
    "\n",
    "y_pred = model.predict(X_test, batch_size =1 ,verbose=1)\n",
    "\n",
    "# y_pred = model.predict(X_test)\n",
    "# evl = evaluate_metrics(y_test_BV, y_pred, return_mode='all')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "executionInfo": {
     "elapsed": 2903,
     "status": "ok",
     "timestamp": 1725045144495,
     "user": {
      "displayName": "mehwish mehmood",
      "userId": "03028843311539350970"
     },
     "user_tz": -300
    },
    "id": "KaLh_Eeyr1UI"
   },
   "outputs": [],
   "source": [
    "save_dir = ''\n",
    "os.makedirs(save_dir, exist_ok=True)\n",
    "for i in range(len(y_pred)):\n",
    "    plt.imsave(\"/\"+str(i+1)+\"_Pred.png\",y_pred[i,:,:,0],cmap='gray') # binary segmenation\n",
    "    plt.imsave(\"/\"+str(i+1)+\"_GT.png\",y_test[i,:,:,0],cmap='gray') # binary segmenation "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "executionInfo": {
     "elapsed": 522,
     "status": "ok",
     "timestamp": 1725044188555,
     "user": {
      "displayName": "mehwish mehmood",
      "userId": "03028843311539350970"
     },
     "user_tz": -300
    },
    "id": "Bm5tHx6E6Y_1"
   },
   "outputs": [],
   "source": [
    "# Convert model's outputs to binary\n",
    "predictions_BV = (y_pred[0] > 0.5).astype(np.uint8)\n",
    "# predictions_OD = (predictions[1] > 0.5).astype(np.uint8)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Memory Usage: 0.66 MB\n"
     ]
    }
   ],
   "source": [
    "memory_usage = model.count_params() * 4  # Assuming float32 data type (4 bytes per parameter)\n",
    "print(\"Memory Usage: {:.2f} MB\".format(memory_usage / 1024 / 1024))  # Divide by 1024 twice to convert from bytes to KB, then KB to MB\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Defaulting to user installation because normal site-packages is not writeable\n",
      "\u001b[33mWARNING: Ignoring invalid distribution -andas (/homes/imransharif/.local/lib/python3.10/site-packages)\u001b[0m\u001b[33m\n",
      "\u001b[0m\u001b[33mWARNING: Ignoring invalid distribution -ensorflow (/homes/imransharif/.local/lib/python3.10/site-packages)\u001b[0m\u001b[33m\n",
      "\u001b[0m\u001b[33mWARNING: Ignoring invalid distribution -andas (/homes/imransharif/.local/lib/python3.10/site-packages)\u001b[0m\u001b[33m\n",
      "\u001b[0m\u001b[33mWARNING: Ignoring invalid distribution -ensorflow (/homes/imransharif/.local/lib/python3.10/site-packages)\u001b[0m\u001b[33m\n",
      "\u001b[0mRequirement already satisfied: keras-flops in /homes/imransharif/.local/lib/python3.10/site-packages (0.1.2)\n",
      "Requirement already satisfied: tensorflow<3.0,>=2.2 in /opt/software/software/TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0/lib/python3.10/site-packages (from keras-flops) (2.11.0)\n",
      "Requirement already satisfied: absl-py>=1.0.0 in /opt/software/software/TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0/lib/python3.10/site-packages (from tensorflow<3.0,>=2.2->keras-flops) (1.4.0)\n",
      "Requirement already satisfied: astunparse>=1.6.0 in /opt/software/software/TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0/lib/python3.10/site-packages (from tensorflow<3.0,>=2.2->keras-flops) (1.6.3)\n",
      "Requirement already satisfied: flatbuffers>=2.0 in /opt/software/software/flatbuffers/2.0.7-GCCcore-11.3.0/lib/python3.10/site-packages (from tensorflow<3.0,>=2.2->keras-flops) (20240208003218)\n",
      "Requirement already satisfied: gast<=0.4.0,>=0.2.1 in /opt/software/software/TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0/lib/python3.10/site-packages (from tensorflow<3.0,>=2.2->keras-flops) (0.4.0)\n",
      "Requirement already satisfied: google-pasta>=0.1.1 in /opt/software/software/TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0/lib/python3.10/site-packages (from tensorflow<3.0,>=2.2->keras-flops) (0.2.0)\n",
      "Requirement already satisfied: h5py>=2.9.0 in /opt/software/software/h5py/3.7.0-foss-2022a/lib/python3.10/site-packages (from tensorflow<3.0,>=2.2->keras-flops) (3.7.0)\n",
      "Requirement already satisfied: numpy>=1.20 in /opt/software/software/SciPy-bundle/2022.05-foss-2022a/lib/python3.10/site-packages (from tensorflow<3.0,>=2.2->keras-flops) (1.22.3)\n",
      "Requirement already satisfied: opt-einsum>=2.3.2 in /opt/software/software/TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0/lib/python3.10/site-packages (from tensorflow<3.0,>=2.2->keras-flops) (3.3.0)\n",
      "Requirement already satisfied: packaging in /homes/imransharif/.local/lib/python3.10/site-packages (from tensorflow<3.0,>=2.2->keras-flops) (21.3)\n",
      "Requirement already satisfied: protobuf<3.20,>=3.9.2 in /opt/software/software/protobuf-python/3.19.4-GCCcore-11.3.0/lib/python3.10/site-packages (from tensorflow<3.0,>=2.2->keras-flops) (3.19.4)\n",
      "Requirement already satisfied: setuptools in /opt/software/software/Python/3.10.4-GCCcore-11.3.0/lib/python3.10/site-packages (from tensorflow<3.0,>=2.2->keras-flops) (62.1.0)\n",
      "Requirement already satisfied: six>=1.12.0 in /homes/imransharif/.local/lib/python3.10/site-packages (from tensorflow<3.0,>=2.2->keras-flops) (1.16.0)\n",
      "Requirement already satisfied: termcolor>=1.1.0 in /opt/software/software/TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0/lib/python3.10/site-packages (from tensorflow<3.0,>=2.2->keras-flops) (1.1.0)\n",
      "Requirement already satisfied: typing-extensions>=3.6.6 in /homes/imransharif/.local/lib/python3.10/site-packages (from tensorflow<3.0,>=2.2->keras-flops) (4.3.0)\n",
      "Requirement already satisfied: wrapt>=1.11.0 in /opt/software/software/TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0/lib/python3.10/site-packages (from tensorflow<3.0,>=2.2->keras-flops) (1.14.1)\n",
      "Requirement already satisfied: grpcio<2.0,>=1.24.3 in /opt/software/software/TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0/lib/python3.10/site-packages (from tensorflow<3.0,>=2.2->keras-flops) (1.51.1)\n",
      "Requirement already satisfied: tensorboard<2.12,>=2.11 in /opt/software/software/TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0/lib/python3.10/site-packages (from tensorflow<3.0,>=2.2->keras-flops) (2.11.1)\n",
      "Requirement already satisfied: tensorflow-estimator<2.12,>=2.11.0 in /opt/software/software/TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0/lib/python3.10/site-packages (from tensorflow<3.0,>=2.2->keras-flops) (2.11.0)\n",
      "Requirement already satisfied: keras<2.12,>=2.11.0 in /opt/software/software/TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0/lib/python3.10/site-packages (from tensorflow<3.0,>=2.2->keras-flops) (2.11.0)\n",
      "Requirement already satisfied: wheel<1.0,>=0.23.0 in /opt/software/software/Python/3.10.4-GCCcore-11.3.0/lib/python3.10/site-packages (from astunparse>=1.6.0->tensorflow<3.0,>=2.2->keras-flops) (0.37.1)\n",
      "Requirement already satisfied: mpi4py>=3.0.2 in /opt/software/software/SciPy-bundle/2022.05-foss-2022a/lib/python3.10/site-packages (from h5py>=2.9.0->tensorflow<3.0,>=2.2->keras-flops) (3.1.3)\n",
      "Requirement already satisfied: google-auth<3,>=1.6.3 in /opt/software/software/TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0/lib/python3.10/site-packages (from tensorboard<2.12,>=2.11->tensorflow<3.0,>=2.2->keras-flops) (2.16.0)\n",
      "Requirement already satisfied: google-auth-oauthlib<0.5,>=0.4.1 in /opt/software/software/TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0/lib/python3.10/site-packages (from tensorboard<2.12,>=2.11->tensorflow<3.0,>=2.2->keras-flops) (0.4.6)\n",
      "Requirement already satisfied: markdown>=2.6.8 in /opt/software/software/TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0/lib/python3.10/site-packages (from tensorboard<2.12,>=2.11->tensorflow<3.0,>=2.2->keras-flops) (3.4.1)\n",
      "Requirement already satisfied: requests<3,>=2.21.0 in /homes/imransharif/.local/lib/python3.10/site-packages (from tensorboard<2.12,>=2.11->tensorflow<3.0,>=2.2->keras-flops) (2.28.1)\n",
      "Requirement already satisfied: tensorboard-data-server<0.7.0,>=0.6.0 in /opt/software/software/TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0/lib/python3.10/site-packages (from tensorboard<2.12,>=2.11->tensorflow<3.0,>=2.2->keras-flops) (0.6.1)\n",
      "Requirement already satisfied: tensorboard-plugin-wit>=1.6.0 in /opt/software/software/TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0/lib/python3.10/site-packages (from tensorboard<2.12,>=2.11->tensorflow<3.0,>=2.2->keras-flops) (1.8.1)\n",
      "Requirement already satisfied: werkzeug>=1.0.1 in /opt/software/software/TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0/lib/python3.10/site-packages (from tensorboard<2.12,>=2.11->tensorflow<3.0,>=2.2->keras-flops) (2.2.2)\n",
      "Requirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /homes/imransharif/.local/lib/python3.10/site-packages (from packaging->tensorflow<3.0,>=2.2->keras-flops) (3.0.9)\n",
      "Requirement already satisfied: cachetools<6.0,>=2.0.0 in /opt/software/software/TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0/lib/python3.10/site-packages (from google-auth<3,>=1.6.3->tensorboard<2.12,>=2.11->tensorflow<3.0,>=2.2->keras-flops) (5.2.1)\n",
      "Requirement already satisfied: pyasn1-modules>=0.2.1 in /opt/software/software/TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0/lib/python3.10/site-packages (from google-auth<3,>=1.6.3->tensorboard<2.12,>=2.11->tensorflow<3.0,>=2.2->keras-flops) (0.2.8)\n",
      "Requirement already satisfied: rsa<5,>=3.1.4 in /opt/software/software/TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0/lib/python3.10/site-packages (from google-auth<3,>=1.6.3->tensorboard<2.12,>=2.11->tensorflow<3.0,>=2.2->keras-flops) (4.9)\n",
      "Requirement already satisfied: requests-oauthlib>=0.7.0 in /opt/software/software/TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0/lib/python3.10/site-packages (from google-auth-oauthlib<0.5,>=0.4.1->tensorboard<2.12,>=2.11->tensorflow<3.0,>=2.2->keras-flops) (1.3.1)\n",
      "Requirement already satisfied: charset-normalizer<3,>=2 in /homes/imransharif/.local/lib/python3.10/site-packages (from requests<3,>=2.21.0->tensorboard<2.12,>=2.11->tensorflow<3.0,>=2.2->keras-flops) (2.1.1)\n",
      "Requirement already satisfied: idna<4,>=2.5 in /opt/software/software/Python/3.10.4-GCCcore-11.3.0/lib/python3.10/site-packages (from requests<3,>=2.21.0->tensorboard<2.12,>=2.11->tensorflow<3.0,>=2.2->keras-flops) (3.3)\n",
      "Requirement already satisfied: urllib3<1.27,>=1.21.1 in /homes/imransharif/.local/lib/python3.10/site-packages (from requests<3,>=2.21.0->tensorboard<2.12,>=2.11->tensorflow<3.0,>=2.2->keras-flops) (1.26.12)\n",
      "Requirement already satisfied: certifi>=2017.4.17 in /homes/imransharif/.local/lib/python3.10/site-packages (from requests<3,>=2.21.0->tensorboard<2.12,>=2.11->tensorflow<3.0,>=2.2->keras-flops) (2022.6.15)\n",
      "Requirement already satisfied: MarkupSafe>=2.1.1 in /opt/software/software/Python/3.10.4-GCCcore-11.3.0/lib/python3.10/site-packages (from werkzeug>=1.0.1->tensorboard<2.12,>=2.11->tensorflow<3.0,>=2.2->keras-flops) (2.1.1)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: pyasn1<0.5.0,>=0.4.6 in /opt/software/software/Python/3.10.4-GCCcore-11.3.0/lib/python3.10/site-packages (from pyasn1-modules>=0.2.1->google-auth<3,>=1.6.3->tensorboard<2.12,>=2.11->tensorflow<3.0,>=2.2->keras-flops) (0.4.8)\n",
      "Requirement already satisfied: oauthlib>=3.0.0 in /opt/software/software/TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0/lib/python3.10/site-packages (from requests-oauthlib>=0.7.0->google-auth-oauthlib<0.5,>=0.4.1->tensorboard<2.12,>=2.11->tensorflow<3.0,>=2.2->keras-flops) (3.2.2)\n",
      "\u001b[33mWARNING: Ignoring invalid distribution -andas (/homes/imransharif/.local/lib/python3.10/site-packages)\u001b[0m\u001b[33m\n",
      "\u001b[0m\u001b[33mWARNING: Ignoring invalid distribution -ensorflow (/homes/imransharif/.local/lib/python3.10/site-packages)\u001b[0m\u001b[33m\n",
      "\u001b[0m\u001b[33mWARNING: Ignoring invalid distribution -andas (/homes/imransharif/.local/lib/python3.10/site-packages)\u001b[0m\u001b[33m\n",
      "\u001b[0m\u001b[33mWARNING: Ignoring invalid distribution -ensorflow (/homes/imransharif/.local/lib/python3.10/site-packages)\u001b[0m\u001b[33m\n",
      "\u001b[0mWARNING:tensorflow:From /opt/software/software/TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0/lib/python3.10/site-packages/tensorflow/python/ops/nn_ops.py:5250: tensor_shape_from_node_def_name (from tensorflow.python.framework.graph_util_impl) is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "This API was designed for TensorFlow v1. See https://www.tensorflow.org/guide/migrate for instructions on how to migrate your code to TensorFlow v2.\n",
      "\n",
      "=========================Options=============================\n",
      "-max_depth                  10000\n",
      "-min_bytes                  0\n",
      "-min_peak_bytes             0\n",
      "-min_residual_bytes         0\n",
      "-min_output_bytes           0\n",
      "-min_micros                 0\n",
      "-min_accelerator_micros     0\n",
      "-min_cpu_micros             0\n",
      "-min_params                 0\n",
      "-min_float_ops              1\n",
      "-min_occurrence             0\n",
      "-step                       -1\n",
      "-order_by                   float_ops\n",
      "-account_type_regexes       .*\n",
      "-start_name_regexes         .*\n",
      "-trim_name_regexes          \n",
      "-show_name_regexes          .*\n",
      "-hide_name_regexes          \n",
      "-account_displayed_op_only  true\n",
      "-select                     float_ops\n",
      "-output                     stdout:\n",
      "\n",
      "==================Model Analysis Report======================\n",
      "\n",
      "Doc:\n",
      "scope: The nodes in the model graph are organized by their names, which is hierarchical like filesystem.\n",
      "flops: Number of float operations. Note: Please read the implementation for the math behind it.\n",
      "\n",
      "ProfiFLOPs: 10.5 G\n"
     ]
    }
   ],
   "source": [
    "  !pip install keras-flops\n",
    "  from keras_flops import get_flops\n",
    "\n",
    "  flops = get_flops(model)\n",
    "  print(f\"FLOPs: {flops / 10**9:.03} G\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 529,
     "status": "ok",
     "timestamp": 1725044209615,
     "user": {
      "displayName": "mehwish mehmood",
      "userId": "03028843311539350970"
     },
     "user_tz": -300
    },
    "id": "FH_1bdpYg_1V",
    "outputId": "9d69948d-a5e6-4e1b-e2d9-24d9be1cbbb7"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "le:\n",
      "node name | # float_ops\n",
      "_TFProfRoot (--/10.55b flops)\n",
      "  model/conv2d_35/Conv2D (1.21b/1.21b flops)\n",
      "  model/conv2d_36/Conv2D (1.21b/1.21b flops)\n",
      "  model/conv2d_39/Conv2D (1.21b/1.21b flops)\n",
      "  model/conv2d_40/Conv2D (1.21b/1.21b flops)\n",
      "  model/conv2d_16/Conv2D (603.98m/603.98m flops)\n",
      "  model/conv2d_13/Conv2D (301.99m/301.99m flops)\n",
      "  model/conv2d_15/Conv2D (301.99m/301.99m flops)\n",
      "  model/conv2d_3/Conv2D (301.99m/301.99m flops)\n",
      "  model/conv2d_31/Conv2D (301.99m/301.99m flops)\n",
      "  model/conv2d_32/Conv2D (301.99m/301.99m flops)\n",
      "  model/conv2d_33/Conv2D (301.99m/301.99m flops)\n",
      "  model/conv2d_37/Conv2D (301.99m/301.99m flops)\n",
      "  model/conv2d_41/Conv2D (301.99m/301.99m flops)\n",
      "  model/conv2d_8/Conv2D (301.99m/301.99m flops)\n",
      "  model/conv2d_19/Conv2D (209.72m/209.72m flops)\n",
      "  model/conv2d_11/Conv2D (150.99m/150.99m flops)\n",
      "  model/conv2d_12/Conv2D (150.99m/150.99m flops)\n",
      "  model/conv2d_6/Conv2D (150.99m/150.99m flops)\n",
      "  model/conv2d_7/Conv2D (150.99m/150.99m flops)\n",
      "  model/conv2d_34/Conv2D (134.22m/134.22m flops)\n",
      "  model/conv2d_38/Conv2D (134.22m/134.22m flops)\n",
      "  model/conv2d_transpose/conv2d_transpose (134.22m/134.22m flops)\n",
      "  model/conv2d_transpose_1/conv2d_transpose (134.22m/134.22m flops)\n",
      "  model/conv2d_1/Conv2D (113.25m/113.25m flops)\n",
      "  model/conv2d_2/Conv2D (113.25m/113.25m flops)\n",
      "  model/conv2d_18/Conv2D (75.50m/75.50m flops)\n",
      "  model/conv2d_27/Conv2D (75.50m/75.50m flops)\n",
      "  model/conv2d_28/Conv2D (75.50m/75.50m flops)\n",
      "  model/conv2d_29/Conv2D (75.50m/75.50m flops)\n",
      "  model/conv2d_transpose_4/conv2d_transpose (67.11m/67.11m flops)\n",
      "  model/conv2d_transpose_5/conv2d_transpose (67.11m/67.11m flops)\n",
      "  model/conv2d_14/Conv2D (33.55m/33.55m flops)\n",
      "  model/conv2d_30/Conv2D (33.55m/33.55m flops)\n",
      "  model/conv2d_4/Conv2D (33.55m/33.55m flops)\n",
      "  model/conv2d_9/Conv2D (33.55m/33.55m flops)\n",
      "  model/conv2d_transpose_3/conv2d_transpose (33.55m/33.55m flops)\n",
      "  model/conv2d_10/Conv2D (16.78m/16.78m flops)\n",
      "  model/conv2d_5/Conv2D (16.78m/16.78m flops)\n",
      "  model/conv2d/Conv2D (12.58m/12.58m flops)\n",
      "  model/batch_normalization_11/FusedBatchNormV3 (8.39m/8.39m flops)\n",
      "  model/batch_normalization_12/FusedBatchNormV3 (8.39m/8.39m flops)\n",
      "  model/conv2d_17/Conv2D (8.39m/8.39m flops)\n",
      "  model/conv2d_20/Conv2D (8.39m/8.39m flops)\n",
      "  model/conv2d_21/Conv2D (8.39m/8.39m flops)\n",
      "  model/conv2d_22/Conv2D (8.39m/8.39m flops)\n",
      "  model/conv2d_24/Conv2D (8.39m/8.39m flops)\n",
      "  model/conv2d_25/Conv2D (8.39m/8.39m flops)\n",
      "  model/conv2d_26/Conv2D (8.39m/8.39m flops)\n",
      "  model/batch_normalization_9/FusedBatchNormV3 (4.19m/4.19m flops)\n",
      "  model/batch_normalization/FusedBatchNormV3 (4.19m/4.19m flops)\n",
      "  model/batch_normalization_1/FusedBatchNormV3 (4.19m/4.19m flops)\n",
      "  model/batch_normalization_22/FusedBatchNormV3 (4.19m/4.19m flops)\n",
      "  model/batch_normalization_23/FusedBatchNormV3 (4.19m/4.19m flops)\n",
      "  model/batch_normalization_24/FusedBatchNormV3 (4.19m/4.19m flops)\n",
      "  model/conv2d_16/BiasAdd (4.19m/4.19m flops)\n",
      "  model/conv2d_42/Conv2D (4.19m/4.19m flops)\n",
      "  model/global_average_pooling2d_1/Mean (4.19m/4.19m flops)\n",
      "  model/lambda_4/Mean (4.19m/4.19m flops)\n",
      "  model/global_max_pooling2d_1/Max (4.19m/4.19m flops)\n",
      "  model/batch_normalization_10/FusedBatchNormV3 (2.10m/2.10m flops)\n",
      "  model/batch_normalization_19/FusedBatchNormV3 (2.10m/2.10m flops)\n",
      "  model/batch_normalization_20/FusedBatchNormV3 (2.10m/2.10m flops)\n",
      "  model/batch_normalization_21/FusedBatchNormV3 (2.10m/2.10m flops)\n",
      "  model/batch_normalization_3/FusedBatchNormV3 (2.10m/2.10m flops)\n",
      "  model/batch_normalization_4/FusedBatchNormV3 (2.10m/2.10m flops)\n",
      "  model/multiply_5/mul (2.10m/2.10m flops)\n",
      "  model/tf.__operators__.add/AddV2 (2.10m/2.10m flops)\n",
      "  model/tf.__operators__.add_1/AddV2 (2.10m/2.10m flops)\n",
      "  model/tf.__operators__.add_12/AddV2 (2.10m/2.10m flops)\n",
      "  model/tf.__operators__.add_13/AddV2 (2.10m/2.10m flops)\n",
      "  model/batch_normalization_16/FusedBatchNormV3 (1.05m/1.05m flops)\n",
      "  model/batch_normalization_17/FusedBatchNormV3 (1.05m/1.05m flops)\n",
      "  model/batch_normalization_18/FusedBatchNormV3 (1.05m/1.05m flops)\n",
      "  model/bat"
     ]
    },
    {
     "ename": "FileNotFoundError",
     "evalue": "[Errno 2] No such file or directory: '/homes/imransharif/Mehwish/Year 3/Skip_Connection_Aggregation/Combined_dataset/Test/Images/1_folder1.png.png'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
      "Cell \u001b[0;32mIn [35], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m test_image \u001b[38;5;241m=\u001b[39m \u001b[43mload_img\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43m/homes/imransharif/Mehwish/Year 3/Skip_Connection_Aggregation/Combined_dataset/Test/Images/1_folder1.png.png\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mtarget_size\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m512\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m512\u001b[39;49m\u001b[43m)\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m      2\u001b[0m test_image \u001b[38;5;241m=\u001b[39m img_to_array(test_image)\n\u001b[1;32m      3\u001b[0m test_image \u001b[38;5;241m=\u001b[39m np\u001b[38;5;241m.\u001b[39mexpand_dims(test_image, axis\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m0\u001b[39m)\n",
      "File \u001b[0;32m/opt/software/software/TensorFlow/2.11.0-foss-2022a-CUDA-11.7.0/lib/python3.10/site-packages/keras/utils/image_utils.py:422\u001b[0m, in \u001b[0;36mload_img\u001b[0;34m(path, grayscale, color_mode, target_size, interpolation, keep_aspect_ratio)\u001b[0m\n\u001b[1;32m    420\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(path, pathlib\u001b[38;5;241m.\u001b[39mPath):\n\u001b[1;32m    421\u001b[0m         path \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mstr\u001b[39m(path\u001b[38;5;241m.\u001b[39mresolve())\n\u001b[0;32m--> 422\u001b[0m     \u001b[38;5;28;01mwith\u001b[39;00m \u001b[38;5;28;43mopen\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43mpath\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mrb\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m)\u001b[49m \u001b[38;5;28;01mas\u001b[39;00m f:\n\u001b[1;32m    423\u001b[0m         img \u001b[38;5;241m=\u001b[39m pil_image\u001b[38;5;241m.\u001b[39mopen(io\u001b[38;5;241m.\u001b[39mBytesIO(f\u001b[38;5;241m.\u001b[39mread()))\n\u001b[1;32m    424\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n",
      "\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: '/homes/imransharif/Mehwish/Year 3/Skip_Connection_Aggregation/Combined_dataset/Test/Images/1_folder1.png.png'"
     ]
    }
   ],
   "source": [
    "test_image = load_img('/homes/imransharif/Mehwish/Year 3/Skip_Connection_Aggregation/Combined_dataset/Test/Images/1_folder1.png.png', target_size=(512, 512))\n",
    "test_image = img_to_array(test_image)\n",
    "test_image = np.expand_dims(test_image, axis=0)\n",
    "print(test_image.shape)\n",
    "# Scale the pixel values to [0, 1] range\n",
    "test_image = test_image / 255.\n",
    "\n",
    "preds_test = model.predict(test_image)\n",
    "end_time = time.time()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 200
    },
    "executionInfo": {
     "elapsed": 1201,
     "status": "ok",
     "timestamp": 1725044222582,
     "user": {
      "displayName": "mehwish mehmood",
      "userId": "03028843311539350970"
     },
     "user_tz": -300
    },
    "id": "XMPpHeLzNA9w",
    "outputId": "81d8d430-3974-4275-c869-6cb736754357"
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "\n",
    "fig, ax = plt.subplots(nrows=1, ncols=3)\n",
    "ax[0].imshow((test_image[0]))\n",
    "ax[0].axis('off')\n",
    "ax[1].imshow(np.squeeze(preds_test[0]), cmap='gray') # squeeze out unnecessary dimensions\n",
    "ax[1].axis('off')\n",
    "ax[2].imshow(np.squeeze(preds_test[0]), cmap='gray')\n",
    "ax[2].axis('off')\n"
   ]
  }
 ],
 "metadata": {
  "accelerator": "GPU",
  "colab": {
   "gpuType": "T4",
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3.10.4-TensorFlow-2.11.0-cuda [jupyter_python]",
   "language": "python",
   "name": "sys_python_3.10.4-tensorflow-2.11.0-cuda"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
